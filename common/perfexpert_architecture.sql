--
-- Copyright (c) 2011-2013 University of Texas at Austin. All rights reserved.
--
-- $COPYRIGHT$
--
-- Additional copyrights may follow
--
-- This file is part of PerfExpert.
--
-- PerfExpert is free software: you can redistribute it and/or modify it under
-- the terms of the The University of Texas at Austin Research License
--
-- PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
-- WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-- A PARTICULAR PURPOSE.
--
-- Authors: Leonardo Fialho and Ashay Rane
--
-- $HEADER$
--

--
-- Enable foreign keys
--
PRAGMA foreign_keys = ON;

--
-- Create tables if not exist
--
CREATE TABLE IF NOT EXISTS arch_processor (
    id          INTEGER,
    family      INTEGER NOT NULL,
    model       INTEGER NOT NULL,
    description VARCHAR NOT NULL);

CREATE TABLE IF NOT EXISTS arch_event (
    code         INTEGER NOT NULL,
    umask        INTEGER NOT NULL,
    name         VARCHAR NOT NULL,
    description  VARCHAR,
    type         VARCHAR NOT NULL,
    processor_id INTEGER NOT NULL
);

--
-- Populate tables
--
BEGIN TRANSACTION;

INSERT INTO arch_processor (id, family, model, description) VALUES (1, 6, 46, 'NehalemEX');
INSERT INTO arch_processor (id, family, model, description) VALUES (2, 6, 30, 'NehalemEP');
INSERT INTO arch_processor (id, family, model, description) VALUES (2, 6, 31, 'NehalemEP');
INSERT INTO arch_processor (id, family, model, description) VALUES (2, 6, 26, 'NehalemEP');
INSERT INTO arch_processor (id, family, model, description) VALUES (3, 6, 47, 'WestmereEX');
INSERT INTO arch_processor (id, family, model, description) VALUES (4, 6, 37, 'WestmereEP-SP');
INSERT INTO arch_processor (id, family, model, description) VALUES (5, 6, 44, 'WestmereEP-DP');
INSERT INTO arch_processor (id, family, model, description) VALUES (6, 6, 42, 'SandyBridge');
INSERT INTO arch_processor (id, family, model, description) VALUES (7, 6, 45, 'Jaketown');
INSERT INTO arch_processor (id, family, model, description) VALUES (8, 6, 62, 'IvyTown');
INSERT INTO arch_processor (id, family, model, description) VALUES (9, 6, 58, 'IvyBridge');
INSERT INTO arch_processor (id, family, model, description) VALUES (10, 6, 60, 'Haswell');
INSERT INTO arch_processor (id, family, model, description) VALUES (10, 6, 69, 'Haswell');
INSERT INTO arch_processor (id, family, model, description) VALUES (10, 6, 70, 'Haswell');
INSERT INTO arch_processor (id, family, model, description) VALUES (11, 6, 55, 'Silvermont');
INSERT INTO arch_processor (id, family, model, description) VALUES (11, 6, 77, 'Silvermont');
INSERT INTO arch_processor (id, family, model, description) VALUES (12, 6, 28, 'Bonnell');
INSERT INTO arch_processor (id, family, model, description) VALUES (12, 6, 38, 'Bonnell');
INSERT INTO arch_processor (id, family, model, description) VALUES (12, 6, 39, 'Bonnell');
INSERT INTO arch_processor (id, family, model, description) VALUES (12, 6, 54, 'Bonnell');
INSERT INTO arch_processor (id, family, model, description) VALUES (12, 6, 53, 'Bonnell');
INSERT INTO arch_processor (id, family, model, description) VALUES (13, 11, 1, 'KnightsCorner');

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.CYCLES_DIV_BUSY', 'Cycles the divider is busy', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.DIV', 'Divide Operations executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 2, 'ARITH.MUL', 'Multiply operations executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 2, 'BACLEAR.BAD_TARGET', 'BACLEAR asserted with bad target address', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEAR.CLEAR', 'BACLEAR asserted, regardless of cause', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (167, 1, 'BACLEAR_FORCE_IQ', 'Instruction queue forced BACLEAR', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 1, 'BPU_CLEARS.EARLY', 'Early Branch Prediciton Unit clears', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 2, 'BPU_CLEARS.LATE', 'Late Branch Prediction Unit clears', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (229, 1, 'BPU_MISSED_CALL_RET', 'Branch prediction unit missed call or return', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 127, 'BR_INST_EXEC.ANY', 'Branch instructions executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_EXEC.COND', 'Conditional branch instructions executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_EXEC.DIRECT', 'Unconditional branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_EXEC.DIRECT_NEAR_CALL', 'Unconditional call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_EXEC.INDIRECT_NEAR_CALL', 'Indirect call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_EXEC.INDIRECT_NON_CALL', 'Indirect non call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 48, 'BR_INST_EXEC.NEAR_CALLS', 'Call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 7, 'BR_INST_EXEC.NON_CALLS', 'All non call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_EXEC.RETURN_NEAR', 'Indirect return branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 64, 'BR_INST_EXEC.TAKEN', 'Taken branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Retired conditional branch instructions (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Retired near call instructions (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Retired near call instructions Ring 3 only(Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 127, 'BR_MISP_EXEC.ANY', 'Mispredicted branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISP_EXEC.COND', 'Mispredicted conditional branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISP_EXEC.DIRECT', 'Mispredicted unconditional branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 16, 'BR_MISP_EXEC.DIRECT_NEAR_CALL', 'Mispredicted non call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 32, 'BR_MISP_EXEC.INDIRECT_NEAR_CALL', 'Mispredicted indirect call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISP_EXEC.INDIRECT_NON_CALL', 'Mispredicted indirect non call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 48, 'BR_MISP_EXEC.NEAR_CALLS', 'Mispredicted call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 7, 'BR_MISP_EXEC.NON_CALLS', 'Mispredicted non call branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISP_EXEC.RETURN_NEAR', 'Mispredicted return branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 64, 'BR_MISP_EXEC.TAKEN', 'Mispredicted taken branches executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Mispredicted near retired calls (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'CACHE_LOCK_CYCLES.L1D', 'Cycles L1D locked', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'CACHE_LOCK_CYCLES.L1D_L2', 'Cycles L1D and L2 locked', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when thread is not halted (fixed counter)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF_P', 'Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.THREAD', 'Cycles when thread is not halted (fixed counter)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles when thread is not halted (programmable counter)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.TOTAL_CYCLES', 'Total CPU cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.ANY', 'DTLB load misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.PDE_MISS', 'DTLB load miss caused by low part of address', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'DTLB second level hit', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'DTLB load miss page walks complete', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_MISSES.ANY', 'DTLB misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_MISSES.STLB_HIT', 'DTLB first level misses but second level hit', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_MISSES.WALK_COMPLETED', 'DTLB miss page walks', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (213, 1, 'ES_REG_RENAMES', 'ES segment renames', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 1, 'FP_ASSIST.ALL', 'X87 Floating point assists (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 4, 'FP_ASSIST.INPUT', 'X87 Floating poiint assists for invalid input value (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 2, 'FP_ASSIST.OUTPUT', 'X87 Floating point assists for invalid output value (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'FP_COMP_OPS_EXE.MMX', 'MMX Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION', 'SSE* FP double precision Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 4, 'FP_COMP_OPS_EXE.SSE_FP', 'SSE and SSE2 FP Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_FP_PACKED', 'SSE FP packed Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_FP_SCALAR', 'SSE FP scalar Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION', 'SSE* FP single precision Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 8, 'FP_COMP_OPS_EXE.SSE2_INTEGER', 'SSE2 integer Uops', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Computational floating-point operations executed', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 3, 'FP_MMX_TRANS.ANY', 'All Floating Point to and from MMX transitions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 1, 'FP_MMX_TRANS.TO_FP', 'Transitions from MMX to Floating Point instructions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 2, 'FP_MMX_TRANS.TO_MMX', 'Transitions from Floating Point to MMX instructions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 15, 'ILD_STALL.ANY', 'Any Instruction Length Decoder stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Instruction Queue full stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Length Change Prefix stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'ILD_STALL.MRU', 'Stall cycles due to BPU MRU bypass', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 8, 'ILD_STALL.REGEN', 'Regen stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (24, 1, 'INST_DECODED.DEC0', 'Instructions that must be decoded by decoder 0', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (30, 1, 'INST_QUEUE_WRITE_CYCLES', 'Cycles instructions are written to the instruction queue', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INST_QUEUE_WRITES', 'Instructions written to instruction queue.', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INST_RETIRED.ANY', 'Instructions retired (fixed counter)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.ANY_P', 'Instructions retired (Programmable counter and Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 4, 'INST_RETIRED.MMX', 'Retired MMX instructions (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.TOTAL_CYCLES', 'Total cycles (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 2, 'INST_RETIRED.X87', 'Retired floating-point operations (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 1, 'IO_TRANSACTIONS', 'I/O transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB_FLUSH', 'ITLB flushes', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'ITLB_MISS_RETIRED', 'Retired instructions that missed the ITLB (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.ANY', 'ITLB miss', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'ITLB miss page walks', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.M_EVICT', 'L1D cache lines replaced in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.M_REPL', 'L1D cache lines allocated in the M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.M_SNOOP_EVICT', 'L1D snoop eviction of cache lines in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPL', 'L1 data cache lines allocated', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (67, 1, 'L1D_ALL_REF.ANY', 'All references to the L1 data cache', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (67, 2, 'L1D_ALL_REF.CACHEABLE', 'L1 data cacheable reads and writes', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 4, 'L1D_CACHE_LD.E_STATE', 'L1 data cache read in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 1, 'L1D_CACHE_LD.I_STATE', 'L1 data cache read in I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 8, 'L1D_CACHE_LD.M_STATE', 'L1 data cache read in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 15, 'L1D_CACHE_LD.MESI', 'L1 data cache reads', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 2, 'L1D_CACHE_LD.S_STATE', 'L1 data cache read in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 4, 'L1D_CACHE_LOCK.E_STATE', 'L1 data cache load locks in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 1, 'L1D_CACHE_LOCK.HIT', 'L1 data cache load lock hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 8, 'L1D_CACHE_LOCK.M_STATE', 'L1 data cache load locks in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 2, 'L1D_CACHE_LOCK.S_STATE', 'L1 data cache load locks in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (83, 1, 'L1D_CACHE_LOCK_FB_HIT', 'L1D load lock accepted in fill buffer', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (82, 1, 'L1D_CACHE_PREFETCH_LOCK_FB_HIT', 'L1D prefetch load lock accepted in fill buffer', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 4, 'L1D_CACHE_ST.E_STATE', 'L1 data cache stores in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 8, 'L1D_CACHE_ST.M_STATE', 'L1 data cache stores in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 2, 'L1D_CACHE_ST.S_STATE', 'L1 data cache stores in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'L1D_PREFETCH.MISS', 'L1D hardware prefetch misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 1, 'L1D_PREFETCH.REQUESTS', 'L1D hardware prefetch requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 4, 'L1D_PREFETCH.TRIGGERS', 'L1D hardware prefetch requests triggered', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L1D_WB_L2.E_STATE', 'L1 writebacks to L2 in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L1D_WB_L2.I_STATE', 'L1 writebacks to L2 in I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L1D_WB_L2.M_STATE', 'L1 writebacks to L2 in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L1D_WB_L2.MESI', 'All L1 writebacks to L2', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L1D_WB_L2.S_STATE', 'L1 writebacks to L2 in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'L1I.CYCLES_STALLED', 'L1I instruction fetch stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'L1I.HITS', 'L1I instruction fetch hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'L1I.MISSES', 'L1I instruction fetch misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'L1I.READS', 'L1I Instruction fetches', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 255, 'L2_DATA_RQSTS.ANY', 'All L2 data requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 4, 'L2_DATA_RQSTS.DEMAND.E_STATE', 'L2 data demand loads in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 1, 'L2_DATA_RQSTS.DEMAND.I_STATE', 'L2 data demand loads in I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 8, 'L2_DATA_RQSTS.DEMAND.M_STATE', 'L2 data demand loads in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 15, 'L2_DATA_RQSTS.DEMAND.MESI', 'L2 data demand requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 2, 'L2_DATA_RQSTS.DEMAND.S_STATE', 'L2 data demand loads in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_DATA_RQSTS.PREFETCH.E_STATE', 'L2 data prefetches in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 16, 'L2_DATA_RQSTS.PREFETCH.I_STATE', 'L2 data prefetches in the I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 128, 'L2_DATA_RQSTS.PREFETCH.M_STATE', 'L2 data prefetches in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 240, 'L2_DATA_RQSTS.PREFETCH.MESI', 'All L2 data prefetches', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 32, 'L2_DATA_RQSTS.PREFETCH.S_STATE', 'L2 data prefetches in the S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ANY', 'L2 lines alloacated', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E_STATE', 'L2 lines allocated in the E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S_STATE', 'L2 lines allocated in the S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 15, 'L2_LINES_OUT.ANY', 'L2 lines evicted', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'L2 lines evicted by a demand request', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'L2 modified lines evicted by a demand request', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PREFETCH_CLEAN', 'L2 lines evicted by a prefetch request', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PREFETCH_DIRTY', 'L2 modified lines evicted by a prefetch request', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.IFETCH_HIT', 'L2 instruction fetch hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.IFETCH_MISS', 'L2 instruction fetch misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.IFETCHES', 'L2 instruction fetches', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.LD_HIT', 'L2 load hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 2, 'L2_RQSTS.LD_MISS', 'L2 load misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.LOADS', 'L2 requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 170, 'L2_RQSTS.MISS', 'All L2 misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PREFETCH_HIT', 'L2 prefetch hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PREFETCH_MISS', 'L2 prefetch misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.PREFETCHES', 'All L2 prefetches', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'L2 RFO hits', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'L2 RFO misses', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.RFOS', 'L2 RFO requests', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANSACTIONS.ANY', 'All L2 transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANSACTIONS.FILL', 'L2 fill transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANSACTIONS.IFETCH', 'L2 instruction fetch transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANSACTIONS.L1D_WB', 'L1D writeback to L2 transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANSACTIONS.LOAD', 'L2 Load transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANSACTIONS.PREFETCH', 'L2 prefetch transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANSACTIONS.RFO', 'L2 RFO transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANSACTIONS.WB', 'L2 writeback to LLC transactions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_WRITE.LOCK.E_STATE', 'L2 demand lock RFOs in E state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 224, 'L2_WRITE.LOCK.HIT', 'All demand L2 lock RFOs that hit the cache', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 16, 'L2_WRITE.LOCK.I_STATE', 'L2 demand lock RFOs in I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 128, 'L2_WRITE.LOCK.M_STATE', 'L2 demand lock RFOs in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 240, 'L2_WRITE.LOCK.MESI', 'All demand L2 lock RFOs', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 32, 'L2_WRITE.LOCK.S_STATE', 'L2 demand lock RFOs in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 14, 'L2_WRITE.RFO.HIT', 'All L2 demand store RFOs that hit the cache', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_WRITE.RFO.I_STATE', 'L2 demand store RFOs in I state (misses)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_WRITE.RFO.M_STATE', 'L2 demand store RFOs in M state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_WRITE.RFO.MESI', 'All L2 demand store RFOs', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 2, 'L2_WRITE.RFO.S_STATE', 'L2 demand store RFOs in S state', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'LARGE_ITLB.HIT', 'Large ITLB hit', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 7, 'LOAD_DISPATCH.ANY', 'All loads dispatched', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 4, 'LOAD_DISPATCH.MOB', 'Loads dispatched from the MOB', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'LOAD_DISPATCH.RS', 'Loads dispatched that bypass the MOB', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 2, 'LOAD_DISPATCH.RS_DELAYED', 'Loads dispatched from stage 305', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE', 'Load operations conflicting with software prefetches', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Longest latency cache miss', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Longest latency cache reference', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.ACTIVE', 'Cycles when uops were delivered by the LSD', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.INACTIVE', 'Cycles no uops were delivered by the LSD', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (32, 1, 'LSD_OVERFLOW', 'Loops that can not stream from the instruction queue', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles machine clear asserted', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEM_ORDER', 'Execution pipeline restart due to Memory ordering conflicts', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 1, 'MACRO_INSTS.DECODED', 'Instructions decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (166, 1, 'MACRO_INSTS.FUSIONS_DECODED', 'Macro-fused instructions decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 1, 'MEM_INST_RETIRED.LOADS', 'Instructions retired which contains a load (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 2, 'MEM_INST_RETIRED.STORES', 'Instructions retired which contains a store (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 128, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 64, 'MEM_LOAD_RETIRED.HIT_LFB', 'Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L1D_HIT', 'Retired loads that hit the L1 data cache (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 16, 'MEM_LOAD_RETIRED.LLC_MISS', 'Retired loads that miss the LLC cache (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.LLC_UNSHARED_HIT', 'Retired loads that hit valid versions in the LLC cache (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 8, 'MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM', 'Retired loads that hit sibling core L2 in modified or unmodified states (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'MEM_STORE_RETIRED.DTLB_MISS', 'Retired stores that miss the DTLB (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 64, 'OFFCORE_REQUESTS.L1D_WRITEBACK', 'Offcore L1 data cache writebacks', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_SQ_FULL', 'Offcore requests blocked due to Super Queue full', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'PARTIAL_ADDRESS_ALIAS', 'False dependencies due to partial address aliasing', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 15, 'RAT_STALLS.ANY', 'All RAT stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'RAT_STALLS.FLAGS', 'Flag stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'RAT_STALLS.REGISTERS', 'Partial register stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'RAT_STALLS.ROB_READ_PORT', 'ROB read port stalls cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'RAT_STALLS.SCOREBOARD', 'Scoreboard stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource related stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 32, 'RESOURCE_STALLS.FPCW', 'FPU control word write stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LOAD', 'Load buffer stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 64, 'RESOURCE_STALLS.MXCSR', 'MXCSR rename stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 128, 'RESOURCE_STALLS.OTHER', 'Other Resource related stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB_FULL', 'ROB full stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS_FULL', 'Reservation Station full stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.STORE', 'Store buffer stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 7, 'SB_DRAIN.ANY', 'All Store buffer stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 1, 'SEG_RENAME_STALLS', 'Segment rename stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 4, 'SIMD_INT_128.PACK', '128 bit SIMD integer pack operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 32, 'SIMD_INT_128.PACKED_ARITH', '128 bit SIMD integer arithmetic operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 16, 'SIMD_INT_128.PACKED_LOGICAL', '128 bit SIMD integer logical operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'SIMD_INT_128.PACKED_MPY', '128 bit SIMD integer multiply operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 2, 'SIMD_INT_128.PACKED_SHIFT', '128 bit SIMD integer shift operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 64, 'SIMD_INT_128.SHUFFLE_MOVE', '128 bit SIMD integer shuffle/move operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 8, 'SIMD_INT_128.UNPACK', '128 bit SIMD integer unpack operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 4, 'SIMD_INT_64.PACK', 'SIMD integer 64 bit pack operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 32, 'SIMD_INT_64.PACKED_ARITH', 'SIMD integer 64 bit arithmetic operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 16, 'SIMD_INT_64.PACKED_LOGICAL', 'SIMD integer 64 bit logical operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 1, 'SIMD_INT_64.PACKED_MPY', 'SIMD integer 64 bit packed multiply operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 2, 'SIMD_INT_64.PACKED_SHIFT', 'SIMD integer 64 bit shift operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 64, 'SIMD_INT_64.SHUFFLE_MOVE', 'SIMD integer 64 bit shuffle/move operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 8, 'SIMD_INT_64.UNPACK', 'SIMD integer 64 bit unpack operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 1, 'SNOOP_RESPONSE.HIT', 'Thread responded HIT to snoop', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 2, 'SNOOP_RESPONSE.HITE', 'Thread responded HITE to snoop', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 4, 'SNOOP_RESPONSE.HITM', 'Thread responded HITM to snoop', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (246, 1, 'SQ_FULL_STALL_CYCLES', 'Super Queue full stall cycles', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Super Queue lock splits across a cache line', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 4, 'SSEX_UOPS_RETIRED.PACKED_DOUBLE', 'SIMD Packed-Double Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SSEX_UOPS_RETIRED.PACKED_SINGLE', 'SIMD Packed-Single Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SSEX_UOPS_RETIRED.SCALAR_DOUBLE', 'SIMD Scalar-Double Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SSEX_UOPS_RETIRED.SCALAR_SINGLE', 'SIMD Scalar-Single Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SSEX_UOPS_RETIRED.VECTOR_INTEGER', 'SIMD Vector Integer Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 4, 'STORE_BLOCKS.AT_RET', 'Loads delayed with at-Retirement block code', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 8, 'STORE_BLOCKS.L1D_BLOCK', 'Cacheable loads delayed with L1D block code', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (25, 1, 'TWO_UOP_INSTS_DECODED', 'Two Uop instructions decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (219, 1, 'UOP_UNFUSION', 'Uop unfusions due to FP exceptions', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'UOPS_DECODED.ESP_FOLDING', 'Stack pointer instructions decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'UOPS_DECODED.ESP_SYNC', 'Stack pointer sync operations', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'UOPS_DECODED.MS_CYCLES_ACTIVE', 'Uops decoded by Microcode Sequencer', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'UOPS_DECODED.STALL_CYCLES', 'Cycles no Uops are decoded', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES', 'Cycles Uops executed on any port (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5', 'Cycles Uops executed on ports 0-4 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_COUNT', 'Uops executed on any port (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5', 'Uops executed on ports 0-4 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_CYCLES', 'Cycles no Uops issued on any port (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5', 'Cycles no Uops issued on ports 0-4 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.PORT0', 'Uops executed on port 0', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015', 'Uops issued on ports 0, 1 or 5', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015_STALL_CYCLES', 'Cycles no Uops issued on ports 0, 1 or 5', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.PORT1', 'Uops executed on port 1', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 4, 'UOPS_EXECUTED.PORT2_CORE', 'Uops executed on port 2 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'UOPS_EXECUTED.PORT234_CORE', 'Uops issued on ports 2, 3 or 4', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 8, 'UOPS_EXECUTED.PORT3_CORE', 'Uops executed on port 3 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 16, 'UOPS_EXECUTED.PORT4_CORE', 'Uops executed on port 4 (core count)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 32, 'UOPS_EXECUTED.PORT5', 'Uops executed on port 5', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops issued', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles no Uops were issued on any thread', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CYCLES_ALL_THREADS', 'Cycles Uops were issued on either thread', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 2, 'UOPS_ISSUED.FUSED', 'Fused Uops issued', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles no Uops were issued', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ACTIVE_CYCLES', 'Cycles Uops are being retired', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ANY', 'Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 4, 'UOPS_RETIRED.MACRO_FUSED', 'Macro-fused Uops retired (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles Uops are not retiring (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Total cycles using precise uop retired event (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0', 'Memory instructions retired above 0 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024', 'Memory instructions retired above 1024 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128', 'Memory instructions retired above 128 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16', 'Memory instructions retired above 16 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384', 'Memory instructions retired above 16384 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048', 'Memory instructions retired above 2048 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256', 'Memory instructions retired above 256 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32', 'Memory instructions retired above 32 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768', 'Memory instructions retired above 32768 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4', 'Memory instructions retired above 4 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096', 'Memory instructions retired above 4096 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512', 'Memory instructions retired above 512 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64', 'Memory instructions retired above 64 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8', 'Memory instructions retired above 8 clocks (Precise Event)', 'core', 1);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192', 'Memory instructions retired above 8192 clocks (Precise Event)', 'core', 1);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.CYCLES_DIV_BUSY', 'Cycles the divider is busy', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.DIV', 'Divide Operations executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 2, 'ARITH.MUL', 'Multiply operations executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 2, 'BACLEAR.BAD_TARGET', 'BACLEAR asserted with bad target address', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEAR.CLEAR', 'BACLEAR asserted, regardless of cause', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (167, 1, 'BACLEAR_FORCE_IQ', 'Instruction queue forced BACLEAR', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 1, 'BPU_CLEARS.EARLY', 'Early Branch Prediciton Unit clears', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 2, 'BPU_CLEARS.LATE', 'Late Branch Prediction Unit clears', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (229, 1, 'BPU_MISSED_CALL_RET', 'Branch prediction unit missed call or return', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 127, 'BR_INST_EXEC.ANY', 'Branch instructions executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_EXEC.COND', 'Conditional branch instructions executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_EXEC.DIRECT', 'Unconditional branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_EXEC.DIRECT_NEAR_CALL', 'Unconditional call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_EXEC.INDIRECT_NEAR_CALL', 'Indirect call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_EXEC.INDIRECT_NON_CALL', 'Indirect non call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 48, 'BR_INST_EXEC.NEAR_CALLS', 'Call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 7, 'BR_INST_EXEC.NON_CALLS', 'All non call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_EXEC.RETURN_NEAR', 'Indirect return branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 64, 'BR_INST_EXEC.TAKEN', 'Taken branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Retired conditional branch instructions (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Retired near call instructions (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Retired near call instructions Ring 3 only(Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 127, 'BR_MISP_EXEC.ANY', 'Mispredicted branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISP_EXEC.COND', 'Mispredicted conditional branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISP_EXEC.DIRECT', 'Mispredicted unconditional branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 16, 'BR_MISP_EXEC.DIRECT_NEAR_CALL', 'Mispredicted non call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 32, 'BR_MISP_EXEC.INDIRECT_NEAR_CALL', 'Mispredicted indirect call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISP_EXEC.INDIRECT_NON_CALL', 'Mispredicted indirect non call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 48, 'BR_MISP_EXEC.NEAR_CALLS', 'Mispredicted call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 7, 'BR_MISP_EXEC.NON_CALLS', 'Mispredicted non call branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISP_EXEC.RETURN_NEAR', 'Mispredicted return branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 64, 'BR_MISP_EXEC.TAKEN', 'Mispredicted taken branches executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Mispredicted near retired calls (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'CACHE_LOCK_CYCLES.L1D', 'Cycles L1D locked', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'CACHE_LOCK_CYCLES.L1D_L2', 'Cycles L1D and L2 locked', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when thread is not halted (fixed counter)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF_P', 'Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.THREAD', 'Cycles when thread is not halted (fixed counter)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles when thread is not halted (programmable counter)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.TOTAL_CYCLES', 'Total CPU cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.ANY', 'DTLB load misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.PDE_MISS', 'DTLB load miss caused by low part of address', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'DTLB second level hit', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'DTLB load miss page walks complete', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_MISSES.ANY', 'DTLB misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_MISSES.STLB_HIT', 'DTLB first level misses but second level hit', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_MISSES.WALK_COMPLETED', 'DTLB miss page walks', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (213, 1, 'ES_REG_RENAMES', 'ES segment renames', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 1, 'FP_ASSIST.ALL', 'X87 Floating point assists (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 4, 'FP_ASSIST.INPUT', 'X87 Floating poiint assists for invalid input value (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 2, 'FP_ASSIST.OUTPUT', 'X87 Floating point assists for invalid output value (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'FP_COMP_OPS_EXE.MMX', 'MMX Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION', 'SSE* FP double precision Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 4, 'FP_COMP_OPS_EXE.SSE_FP', 'SSE and SSE2 FP Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_FP_PACKED', 'SSE FP packed Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_FP_SCALAR', 'SSE FP scalar Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION', 'SSE* FP single precision Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 8, 'FP_COMP_OPS_EXE.SSE2_INTEGER', 'SSE2 integer Uops', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Computational floating-point operations executed', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 3, 'FP_MMX_TRANS.ANY', 'All Floating Point to and from MMX transitions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 1, 'FP_MMX_TRANS.TO_FP', 'Transitions from MMX to Floating Point instructions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 2, 'FP_MMX_TRANS.TO_MMX', 'Transitions from Floating Point to MMX instructions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 15, 'ILD_STALL.ANY', 'Any Instruction Length Decoder stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Instruction Queue full stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Length Change Prefix stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'ILD_STALL.MRU', 'Stall cycles due to BPU MRU bypass', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 8, 'ILD_STALL.REGEN', 'Regen stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (24, 1, 'INST_DECODED.DEC0', 'Instructions that must be decoded by decoder 0', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (30, 1, 'INST_QUEUE_WRITE_CYCLES', 'Cycles instructions are written to the instruction queue', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INST_QUEUE_WRITES', 'Instructions written to instruction queue.', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INST_RETIRED.ANY', 'Instructions retired (fixed counter)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.ANY_P', 'Instructions retired (Programmable counter and Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 4, 'INST_RETIRED.MMX', 'Retired MMX instructions (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.TOTAL_CYCLES', 'Total cycles (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 2, 'INST_RETIRED.X87', 'Retired floating-point operations (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 1, 'IO_TRANSACTIONS', 'I/O transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB_FLUSH', 'ITLB flushes', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'ITLB_MISS_RETIRED', 'Retired instructions that missed the ITLB (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.ANY', 'ITLB miss', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'ITLB miss page walks', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.M_EVICT', 'L1D cache lines replaced in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.M_REPL', 'L1D cache lines allocated in the M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.M_SNOOP_EVICT', 'L1D snoop eviction of cache lines in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPL', 'L1 data cache lines allocated', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (67, 1, 'L1D_ALL_REF.ANY', 'All references to the L1 data cache', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (67, 2, 'L1D_ALL_REF.CACHEABLE', 'L1 data cacheable reads and writes', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 4, 'L1D_CACHE_LD.E_STATE', 'L1 data cache read in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 1, 'L1D_CACHE_LD.I_STATE', 'L1 data cache read in I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 8, 'L1D_CACHE_LD.M_STATE', 'L1 data cache read in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 15, 'L1D_CACHE_LD.MESI', 'L1 data cache reads', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 2, 'L1D_CACHE_LD.S_STATE', 'L1 data cache read in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 4, 'L1D_CACHE_LOCK.E_STATE', 'L1 data cache load locks in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 1, 'L1D_CACHE_LOCK.HIT', 'L1 data cache load lock hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 8, 'L1D_CACHE_LOCK.M_STATE', 'L1 data cache load locks in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (66, 2, 'L1D_CACHE_LOCK.S_STATE', 'L1 data cache load locks in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (83, 1, 'L1D_CACHE_LOCK_FB_HIT', 'L1D load lock accepted in fill buffer', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (82, 1, 'L1D_CACHE_PREFETCH_LOCK_FB_HIT', 'L1D prefetch load lock accepted in fill buffer', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 4, 'L1D_CACHE_ST.E_STATE', 'L1 data cache stores in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 8, 'L1D_CACHE_ST.M_STATE', 'L1 data cache stores in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (65, 2, 'L1D_CACHE_ST.S_STATE', 'L1 data cache stores in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'L1D_PREFETCH.MISS', 'L1D hardware prefetch misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 1, 'L1D_PREFETCH.REQUESTS', 'L1D hardware prefetch requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 4, 'L1D_PREFETCH.TRIGGERS', 'L1D hardware prefetch requests triggered', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L1D_WB_L2.E_STATE', 'L1 writebacks to L2 in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L1D_WB_L2.I_STATE', 'L1 writebacks to L2 in I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L1D_WB_L2.M_STATE', 'L1 writebacks to L2 in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L1D_WB_L2.MESI', 'All L1 writebacks to L2', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L1D_WB_L2.S_STATE', 'L1 writebacks to L2 in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'L1I.CYCLES_STALLED', 'L1I instruction fetch stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'L1I.HITS', 'L1I instruction fetch hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'L1I.MISSES', 'L1I instruction fetch misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'L1I.READS', 'L1I Instruction fetches', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 255, 'L2_DATA_RQSTS.ANY', 'All L2 data requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 4, 'L2_DATA_RQSTS.DEMAND.E_STATE', 'L2 data demand loads in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 1, 'L2_DATA_RQSTS.DEMAND.I_STATE', 'L2 data demand loads in I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 8, 'L2_DATA_RQSTS.DEMAND.M_STATE', 'L2 data demand loads in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 15, 'L2_DATA_RQSTS.DEMAND.MESI', 'L2 data demand requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 2, 'L2_DATA_RQSTS.DEMAND.S_STATE', 'L2 data demand loads in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_DATA_RQSTS.PREFETCH.E_STATE', 'L2 data prefetches in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 16, 'L2_DATA_RQSTS.PREFETCH.I_STATE', 'L2 data prefetches in the I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 128, 'L2_DATA_RQSTS.PREFETCH.M_STATE', 'L2 data prefetches in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 240, 'L2_DATA_RQSTS.PREFETCH.MESI', 'All L2 data prefetches', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 32, 'L2_DATA_RQSTS.PREFETCH.S_STATE', 'L2 data prefetches in the S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ANY', 'L2 lines alloacated', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E_STATE', 'L2 lines allocated in the E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S_STATE', 'L2 lines allocated in the S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 15, 'L2_LINES_OUT.ANY', 'L2 lines evicted', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'L2 lines evicted by a demand request', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'L2 modified lines evicted by a demand request', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PREFETCH_CLEAN', 'L2 lines evicted by a prefetch request', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PREFETCH_DIRTY', 'L2 modified lines evicted by a prefetch request', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.IFETCH_HIT', 'L2 instruction fetch hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.IFETCH_MISS', 'L2 instruction fetch misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.IFETCHES', 'L2 instruction fetches', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.LD_HIT', 'L2 load hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 2, 'L2_RQSTS.LD_MISS', 'L2 load misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.LOADS', 'L2 requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 170, 'L2_RQSTS.MISS', 'All L2 misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PREFETCH_HIT', 'L2 prefetch hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PREFETCH_MISS', 'L2 prefetch misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.PREFETCHES', 'All L2 prefetches', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'L2 RFO hits', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'L2 RFO misses', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.RFOS', 'L2 RFO requests', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANSACTIONS.ANY', 'All L2 transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANSACTIONS.FILL', 'L2 fill transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANSACTIONS.IFETCH', 'L2 instruction fetch transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANSACTIONS.L1D_WB', 'L1D writeback to L2 transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANSACTIONS.LOAD', 'L2 Load transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANSACTIONS.PREFETCH', 'L2 prefetch transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANSACTIONS.RFO', 'L2 RFO transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANSACTIONS.WB', 'L2 writeback to LLC transactions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_WRITE.LOCK.E_STATE', 'L2 demand lock RFOs in E state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 224, 'L2_WRITE.LOCK.HIT', 'All demand L2 lock RFOs that hit the cache', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 16, 'L2_WRITE.LOCK.I_STATE', 'L2 demand lock RFOs in I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 128, 'L2_WRITE.LOCK.M_STATE', 'L2 demand lock RFOs in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 240, 'L2_WRITE.LOCK.MESI', 'All demand L2 lock RFOs', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 32, 'L2_WRITE.LOCK.S_STATE', 'L2 demand lock RFOs in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 14, 'L2_WRITE.RFO.HIT', 'All L2 demand store RFOs that hit the cache', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_WRITE.RFO.I_STATE', 'L2 demand store RFOs in I state (misses)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_WRITE.RFO.M_STATE', 'L2 demand store RFOs in M state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_WRITE.RFO.MESI', 'All L2 demand store RFOs', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 2, 'L2_WRITE.RFO.S_STATE', 'L2 demand store RFOs in S state', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'LARGE_ITLB.HIT', 'Large ITLB hit', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 7, 'LOAD_DISPATCH.ANY', 'All loads dispatched', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 4, 'LOAD_DISPATCH.MOB', 'Loads dispatched from the MOB', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'LOAD_DISPATCH.RS', 'Loads dispatched that bypass the MOB', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 2, 'LOAD_DISPATCH.RS_DELAYED', 'Loads dispatched from stage 305', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE', 'Load operations conflicting with software prefetches', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Longest latency cache miss', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Longest latency cache reference', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.ACTIVE', 'Cycles when uops were delivered by the LSD', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.INACTIVE', 'Cycles no uops were delivered by the LSD', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (32, 1, 'LSD_OVERFLOW', 'Loops that can not stream from the instruction queue', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles machine clear asserted', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEM_ORDER', 'Execution pipeline restart due to Memory ordering conflicts', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 1, 'MACRO_INSTS.DECODED', 'Instructions decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (166, 1, 'MACRO_INSTS.FUSIONS_DECODED', 'Macro-fused instructions decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 1, 'MEM_INST_RETIRED.LOADS', 'Instructions retired which contains a load (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 2, 'MEM_INST_RETIRED.STORES', 'Instructions retired which contains a store (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 128, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 64, 'MEM_LOAD_RETIRED.HIT_LFB', 'Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L1D_HIT', 'Retired loads that hit the L1 data cache (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 16, 'MEM_LOAD_RETIRED.LLC_MISS', 'Retired loads that miss the LLC cache (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.LLC_UNSHARED_HIT', 'Retired loads that hit valid versions in the LLC cache (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 8, 'MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM', 'Retired loads that hit sibling core L2 in modified or unmodified states (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'MEM_STORE_RETIRED.DTLB_MISS', 'Retired stores that miss the DTLB (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 32, 'MEM_UNCORE_RETIRED.LOCAL_DRAM', 'Load instructions retired with a data source of local DRAM or locally homed remote hitm (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 2, 'MEM_UNCORE_RETIRED.OTHER_CORE_L2_HITM', 'Load instructions retired that HIT modified data in sibling core (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 8, 'MEM_UNCORE_RETIRED.REMOTE_CACHE_LOCAL_HOME_HIT', 'Load instructions retired remote cache HIT data source (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 16, 'MEM_UNCORE_RETIRED.REMOTE_DRAM', 'Load instructions retired remote DRAM and remote home-remote cache HITM (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 128, 'MEM_UNCORE_RETIRED.UNCACHEABLE', 'Load instructions retired IO (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 64, 'OFFCORE_REQUESTS.L1D_WRITEBACK', 'Offcore L1 data cache writebacks', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_SQ_FULL', 'Offcore requests blocked due to Super Queue full', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'PARTIAL_ADDRESS_ALIAS', 'False dependencies due to partial address aliasing', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 15, 'RAT_STALLS.ANY', 'All RAT stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'RAT_STALLS.FLAGS', 'Flag stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'RAT_STALLS.REGISTERS', 'Partial register stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'RAT_STALLS.ROB_READ_PORT', 'ROB read port stalls cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'RAT_STALLS.SCOREBOARD', 'Scoreboard stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource related stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 32, 'RESOURCE_STALLS.FPCW', 'FPU control word write stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LOAD', 'Load buffer stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 64, 'RESOURCE_STALLS.MXCSR', 'MXCSR rename stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 128, 'RESOURCE_STALLS.OTHER', 'Other Resource related stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB_FULL', 'ROB full stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS_FULL', 'Reservation Station full stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.STORE', 'Store buffer stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 7, 'SB_DRAIN.ANY', 'All Store buffer stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 1, 'SEG_RENAME_STALLS', 'Segment rename stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 4, 'SIMD_INT_128.PACK', '128 bit SIMD integer pack operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 32, 'SIMD_INT_128.PACKED_ARITH', '128 bit SIMD integer arithmetic operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 16, 'SIMD_INT_128.PACKED_LOGICAL', '128 bit SIMD integer logical operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'SIMD_INT_128.PACKED_MPY', '128 bit SIMD integer multiply operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 2, 'SIMD_INT_128.PACKED_SHIFT', '128 bit SIMD integer shift operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 64, 'SIMD_INT_128.SHUFFLE_MOVE', '128 bit SIMD integer shuffle/move operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 8, 'SIMD_INT_128.UNPACK', '128 bit SIMD integer unpack operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 4, 'SIMD_INT_64.PACK', 'SIMD integer 64 bit pack operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 32, 'SIMD_INT_64.PACKED_ARITH', 'SIMD integer 64 bit arithmetic operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 16, 'SIMD_INT_64.PACKED_LOGICAL', 'SIMD integer 64 bit logical operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 1, 'SIMD_INT_64.PACKED_MPY', 'SIMD integer 64 bit packed multiply operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 2, 'SIMD_INT_64.PACKED_SHIFT', 'SIMD integer 64 bit shift operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 64, 'SIMD_INT_64.SHUFFLE_MOVE', 'SIMD integer 64 bit shuffle/move operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 8, 'SIMD_INT_64.UNPACK', 'SIMD integer 64 bit unpack operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 1, 'SNOOP_RESPONSE.HIT', 'Thread responded HIT to snoop', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 2, 'SNOOP_RESPONSE.HITE', 'Thread responded HITE to snoop', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 4, 'SNOOP_RESPONSE.HITM', 'Thread responded HITM to snoop', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (246, 1, 'SQ_FULL_STALL_CYCLES', 'Super Queue full stall cycles', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Super Queue lock splits across a cache line', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 4, 'SSEX_UOPS_RETIRED.PACKED_DOUBLE', 'SIMD Packed-Double Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SSEX_UOPS_RETIRED.PACKED_SINGLE', 'SIMD Packed-Single Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SSEX_UOPS_RETIRED.SCALAR_DOUBLE', 'SIMD Scalar-Double Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SSEX_UOPS_RETIRED.SCALAR_SINGLE', 'SIMD Scalar-Single Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SSEX_UOPS_RETIRED.VECTOR_INTEGER', 'SIMD Vector Integer Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 4, 'STORE_BLOCKS.AT_RET', 'Loads delayed with at-Retirement block code', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 8, 'STORE_BLOCKS.L1D_BLOCK', 'Cacheable loads delayed with L1D block code', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (25, 1, 'TWO_UOP_INSTS_DECODED', 'Two Uop instructions decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (219, 1, 'UOP_UNFUSION', 'Uop unfusions due to FP exceptions', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'UOPS_DECODED.ESP_FOLDING', 'Stack pointer instructions decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'UOPS_DECODED.ESP_SYNC', 'Stack pointer sync operations', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'UOPS_DECODED.MS_CYCLES_ACTIVE', 'Uops decoded by Microcode Sequencer', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'UOPS_DECODED.STALL_CYCLES', 'Cycles no Uops are decoded', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES', 'Cycles Uops executed on any port (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5', 'Cycles Uops executed on ports 0-4 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_COUNT', 'Uops executed on any port (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5', 'Uops executed on ports 0-4 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_CYCLES', 'Cycles no Uops issued on any port (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5', 'Cycles no Uops issued on ports 0-4 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.PORT0', 'Uops executed on port 0', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015', 'Uops issued on ports 0, 1 or 5', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015_STALL_CYCLES', 'Cycles no Uops issued on ports 0, 1 or 5', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.PORT1', 'Uops executed on port 1', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 4, 'UOPS_EXECUTED.PORT2_CORE', 'Uops executed on port 2 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'UOPS_EXECUTED.PORT234_CORE', 'Uops issued on ports 2, 3 or 4', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 8, 'UOPS_EXECUTED.PORT3_CORE', 'Uops executed on port 3 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 16, 'UOPS_EXECUTED.PORT4_CORE', 'Uops executed on port 4 (core count)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 32, 'UOPS_EXECUTED.PORT5', 'Uops executed on port 5', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops issued', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles no Uops were issued on any thread', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CYCLES_ALL_THREADS', 'Cycles Uops were issued on either thread', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 2, 'UOPS_ISSUED.FUSED', 'Fused Uops issued', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles no Uops were issued', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ACTIVE_CYCLES', 'Cycles Uops are being retired', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ANY', 'Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 4, 'UOPS_RETIRED.MACRO_FUSED', 'Macro-fused Uops retired (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles Uops are not retiring (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Total cycles using precise uop retired event (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0', 'Memory instructions retired above 0 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024', 'Memory instructions retired above 1024 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128', 'Memory instructions retired above 128 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16', 'Memory instructions retired above 16 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384', 'Memory instructions retired above 16384 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048', 'Memory instructions retired above 2048 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256', 'Memory instructions retired above 256 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32', 'Memory instructions retired above 32 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768', 'Memory instructions retired above 32768 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4', 'Memory instructions retired above 4 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096', 'Memory instructions retired above 4096 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512', 'Memory instructions retired above 512 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64', 'Memory instructions retired above 64 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8', 'Memory instructions retired above 8 clocks (Precise Event)', 'core', 2);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192', 'Memory instructions retired above 8192 clocks (Precise Event)', 'core', 2);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.CYCLES_DIV_BUSY', 'Cycles the divider is busy', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.DIV', 'Divide Operations executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 2, 'ARITH.MUL', 'Multiply operations executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 2, 'BACLEAR.BAD_TARGET', 'BACLEAR asserted with bad target address', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEAR.CLEAR', 'BACLEAR asserted, regardless of cause', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (167, 1, 'BACLEAR_FORCE_IQ', 'Instruction queue forced BACLEAR', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 1, 'BPU_CLEARS.EARLY', 'Early Branch Prediciton Unit clears', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 2, 'BPU_CLEARS.LATE', 'Late Branch Prediction Unit clears', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (229, 1, 'BPU_MISSED_CALL_RET', 'Branch prediction unit missed call or return', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 127, 'BR_INST_EXEC.ANY', 'Branch instructions executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_EXEC.COND', 'Conditional branch instructions executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_EXEC.DIRECT', 'Unconditional branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_EXEC.DIRECT_NEAR_CALL', 'Unconditional call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_EXEC.INDIRECT_NEAR_CALL', 'Indirect call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_EXEC.INDIRECT_NON_CALL', 'Indirect non call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 48, 'BR_INST_EXEC.NEAR_CALLS', 'Call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 7, 'BR_INST_EXEC.NON_CALLS', 'All non call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_EXEC.RETURN_NEAR', 'Indirect return branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 64, 'BR_INST_EXEC.TAKEN', 'Taken branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Retired conditional branch instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Retired near call instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Retired near call instructions Ring 3 only(Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 127, 'BR_MISP_EXEC.ANY', 'Mispredicted branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISP_EXEC.COND', 'Mispredicted conditional branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISP_EXEC.DIRECT', 'Mispredicted unconditional branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 16, 'BR_MISP_EXEC.DIRECT_NEAR_CALL', 'Mispredicted non call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 32, 'BR_MISP_EXEC.INDIRECT_NEAR_CALL', 'Mispredicted indirect call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISP_EXEC.INDIRECT_NON_CALL', 'Mispredicted indirect non call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 48, 'BR_MISP_EXEC.NEAR_CALLS', 'Mispredicted call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 7, 'BR_MISP_EXEC.NON_CALLS', 'Mispredicted non call branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISP_EXEC.RETURN_NEAR', 'Mispredicted return branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 64, 'BR_MISP_EXEC.TAKEN', 'Mispredicted taken branches executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional retired branches (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Mispredicted near retired calls (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'CACHE_LOCK_CYCLES.L1D', 'Cycles L1D locked', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'CACHE_LOCK_CYCLES.L1D_L2', 'Cycles L1D and L2 locked', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when thread is not halted (fixed counter)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF_P', 'Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.THREAD', 'Cycles when thread is not halted (fixed counter)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles when thread is not halted (programmable counter)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.TOTAL_CYCLES', 'Total CPU cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.ANY', 'DTLB load misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 128, 'DTLB_LOAD_MISSES.LARGE_WALK_COMPLETED', 'DTLB load miss large page walks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.PDE_MISS', 'DTLB load miss caused by low part of address', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'DTLB second level hit', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'DTLB load miss page walks complete', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_CYCLES', 'DTLB load miss page walk cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_MISSES.ANY', 'DTLB misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 128, 'DTLB_MISSES.LARGE_WALK_COMPLETED', 'DTLB miss large page walks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 32, 'DTLB_MISSES.PDE_MISS', 'DTLB misses caused by low part of address. Count also includes 2M page references because 2M pages do not use the PDE.', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_MISSES.STLB_HIT', 'DTLB first level misses but second level hit', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_MISSES.WALK_COMPLETED', 'DTLB miss page walks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_MISSES.WALK_CYCLES', 'DTLB miss page walk cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Extended Page Table walk cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (213, 1, 'ES_REG_RENAMES', 'ES segment renames', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 1, 'FP_ASSIST.ALL', 'X87 Floating point assists (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 4, 'FP_ASSIST.INPUT', 'X87 Floating poiint assists for invalid input value (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 2, 'FP_ASSIST.OUTPUT', 'X87 Floating point assists for invalid output value (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'FP_COMP_OPS_EXE.MMX', 'MMX Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION', 'SSE* FP double precision Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 4, 'FP_COMP_OPS_EXE.SSE_FP', 'SSE and SSE2 FP Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_FP_PACKED', 'SSE FP packed Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_FP_SCALAR', 'SSE FP scalar Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION', 'SSE* FP single precision Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 8, 'FP_COMP_OPS_EXE.SSE2_INTEGER', 'SSE2 integer Uops', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Computational floating-point operations executed', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 3, 'FP_MMX_TRANS.ANY', 'All Floating Point to and from MMX transitions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 1, 'FP_MMX_TRANS.TO_FP', 'Transitions from MMX to Floating Point instructions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 2, 'FP_MMX_TRANS.TO_MMX', 'Transitions from Floating Point to MMX instructions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 15, 'ILD_STALL.ANY', 'Any Instruction Length Decoder stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Instruction Queue full stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Length Change Prefix stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'ILD_STALL.MRU', 'Stall cycles due to BPU MRU bypass', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 8, 'ILD_STALL.REGEN', 'Regen stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (24, 1, 'INST_DECODED.DEC0', 'Instructions that must be decoded by decoder 0', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (30, 1, 'INST_QUEUE_WRITE_CYCLES', 'Cycles instructions are written to the instruction queue', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INST_QUEUE_WRITES', 'Instructions written to instruction queue.', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INST_RETIRED.ANY', 'Instructions retired (fixed counter)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.ANY_P', 'Instructions retired (Programmable counter and Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 4, 'INST_RETIRED.MMX', 'Retired MMX instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.TOTAL_CYCLES', 'Total cycles (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 2, 'INST_RETIRED.X87', 'Retired floating-point operations (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 1, 'IO_TRANSACTIONS', 'I/O transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB_FLUSH', 'ITLB flushes', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'ITLB_MISS_RETIRED', 'Retired instructions that missed the ITLB (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.ANY', 'ITLB miss', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 128, 'ITLB_MISSES.LARGE_WALK_COMPLETED', 'ITLB miss large page walks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'ITLB miss page walks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_CYCLES', 'ITLB miss page walk cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.M_EVICT', 'L1D cache lines replaced in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.M_REPL', 'L1D cache lines allocated in the M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.M_SNOOP_EVICT', 'L1D snoop eviction of cache lines in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPL', 'L1 data cache lines allocated', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (82, 1, 'L1D_CACHE_PREFETCH_LOCK_FB_HIT', 'L1D prefetch load lock accepted in fill buffer', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'L1D_PREFETCH.MISS', 'L1D hardware prefetch misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 1, 'L1D_PREFETCH.REQUESTS', 'L1D hardware prefetch requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 4, 'L1D_PREFETCH.TRIGGERS', 'L1D hardware prefetch requests triggered', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L1D_WB_L2.E_STATE', 'L1 writebacks to L2 in E state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L1D_WB_L2.I_STATE', 'L1 writebacks to L2 in I state (misses)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L1D_WB_L2.M_STATE', 'L1 writebacks to L2 in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L1D_WB_L2.MESI', 'All L1 writebacks to L2', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L1D_WB_L2.S_STATE', 'L1 writebacks to L2 in S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'L1I.CYCLES_STALLED', 'L1I instruction fetch stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'L1I.HITS', 'L1I instruction fetch hits', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'L1I.MISSES', 'L1I instruction fetch misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'L1I.READS', 'L1I Instruction fetches', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 255, 'L2_DATA_RQSTS.ANY', 'All L2 data requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 4, 'L2_DATA_RQSTS.DEMAND.E_STATE', 'L2 data demand loads in E state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 1, 'L2_DATA_RQSTS.DEMAND.I_STATE', 'L2 data demand loads in I state (misses)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 8, 'L2_DATA_RQSTS.DEMAND.M_STATE', 'L2 data demand loads in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 15, 'L2_DATA_RQSTS.DEMAND.MESI', 'L2 data demand requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 2, 'L2_DATA_RQSTS.DEMAND.S_STATE', 'L2 data demand loads in S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_DATA_RQSTS.PREFETCH.E_STATE', 'L2 data prefetches in E state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 16, 'L2_DATA_RQSTS.PREFETCH.I_STATE', 'L2 data prefetches in the I state (misses)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 128, 'L2_DATA_RQSTS.PREFETCH.M_STATE', 'L2 data prefetches in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 240, 'L2_DATA_RQSTS.PREFETCH.MESI', 'All L2 data prefetches', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 32, 'L2_DATA_RQSTS.PREFETCH.S_STATE', 'L2 data prefetches in the S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ANY', 'L2 lines alloacated', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E_STATE', 'L2 lines allocated in the E state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S_STATE', 'L2 lines allocated in the S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 15, 'L2_LINES_OUT.ANY', 'L2 lines evicted', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'L2 lines evicted by a demand request', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'L2 modified lines evicted by a demand request', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PREFETCH_CLEAN', 'L2 lines evicted by a prefetch request', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PREFETCH_DIRTY', 'L2 modified lines evicted by a prefetch request', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.IFETCH_HIT', 'L2 instruction fetch hits', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.IFETCH_MISS', 'L2 instruction fetch misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.IFETCHES', 'L2 instruction fetches', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.LD_HIT', 'L2 load hits', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 2, 'L2_RQSTS.LD_MISS', 'L2 load misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.LOADS', 'L2 requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 170, 'L2_RQSTS.MISS', 'All L2 misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PREFETCH_HIT', 'L2 prefetch hits', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PREFETCH_MISS', 'L2 prefetch misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.PREFETCHES', 'All L2 prefetches', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'L2 RFO hits', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'L2 RFO misses', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.RFOS', 'L2 RFO requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANSACTIONS.ANY', 'All L2 transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANSACTIONS.FILL', 'L2 fill transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANSACTIONS.IFETCH', 'L2 instruction fetch transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANSACTIONS.L1D_WB', 'L1D writeback to L2 transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANSACTIONS.LOAD', 'L2 Load transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANSACTIONS.PREFETCH', 'L2 prefetch transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANSACTIONS.RFO', 'L2 RFO transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANSACTIONS.WB', 'L2 writeback to LLC transactions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_WRITE.LOCK.E_STATE', 'L2 demand lock RFOs in E state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 224, 'L2_WRITE.LOCK.HIT', 'All demand L2 lock RFOs that hit the cache', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 16, 'L2_WRITE.LOCK.I_STATE', 'L2 demand lock RFOs in I state (misses)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 128, 'L2_WRITE.LOCK.M_STATE', 'L2 demand lock RFOs in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 240, 'L2_WRITE.LOCK.MESI', 'All demand L2 lock RFOs', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 32, 'L2_WRITE.LOCK.S_STATE', 'L2 demand lock RFOs in S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 14, 'L2_WRITE.RFO.HIT', 'All L2 demand store RFOs that hit the cache', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_WRITE.RFO.I_STATE', 'L2 demand store RFOs in I state (misses)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_WRITE.RFO.M_STATE', 'L2 demand store RFOs in M state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_WRITE.RFO.MESI', 'All L2 demand store RFOs', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 2, 'L2_WRITE.RFO.S_STATE', 'L2 demand store RFOs in S state', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'LARGE_ITLB.HIT', 'Large ITLB hit', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LOAD_BLOCK.OVERLAP_STORE', 'Loads that partially overlap an earlier store', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 7, 'LOAD_DISPATCH.ANY', 'All loads dispatched', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 4, 'LOAD_DISPATCH.MOB', 'Loads dispatched from the MOB', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'LOAD_DISPATCH.RS', 'Loads dispatched that bypass the MOB', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 2, 'LOAD_DISPATCH.RS_DELAYED', 'Loads dispatched from stage 305', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE', 'Load operations conflicting with software prefetches', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Longest latency cache miss', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Longest latency cache reference', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.ACTIVE', 'Cycles when uops were delivered by the LSD', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.INACTIVE', 'Cycles no uops were delivered by the LSD', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (32, 1, 'LSD_OVERFLOW', 'Loops that can not stream from the instruction queue', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles machine clear asserted', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEM_ORDER', 'Execution pipeline restart due to Memory ordering conflicts', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 1, 'MACRO_INSTS.DECODED', 'Instructions decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (166, 1, 'MACRO_INSTS.FUSIONS_DECODED', 'Macro-fused instructions decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 1, 'MEM_INST_RETIRED.LOADS', 'Instructions retired which contains a load (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 2, 'MEM_INST_RETIRED.STORES', 'Instructions retired which contains a store (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 128, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 64, 'MEM_LOAD_RETIRED.HIT_LFB', 'Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L1D_HIT', 'Retired loads that hit the L1 data cache (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 16, 'MEM_LOAD_RETIRED.LLC_MISS', 'Retired loads that miss the LLC cache (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.LLC_UNSHARED_HIT', 'Retired loads that hit valid versions in the LLC cache (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 8, 'MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM', 'Retired loads that hit sibling core L2 in modified or unmodified states (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'MEM_STORE_RETIRED.DTLB_MISS', 'Retired stores that miss the DTLB (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 2, 'MEM_UNCORE_RETIRED.LOCAL_HITM', 'Load instructions retired that HIT modified data in sibling core (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 8, 'MEM_UNCORE_RETIRED.LOCAL_DRAM_AND_REMOTE_CACHE_HIT', 'Load instructions retired local dram and remote cache HIT data sources (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 32, 'MEM_UNCORE_RETIRED.REMOTE_DRAM', 'Load instructions retired remote DRAM and remote home-remote cache HITM (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 128, 'MEM_UNCORE_RETIRED.UNCACHEABLE', 'Load instructions retired IO (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 4, 'MEM_UNCORE_RETIRED.REMOTE_HITM', 'Retired loads that hit remote socket in modified state (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORE', 'Misaligned store references', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 128, 'OFFCORE_REQUESTS.ANY', 'All offcore requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ANY.READ', 'Offcore read requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 16, 'OFFCORE_REQUESTS.ANY.RFO', 'Offcore RFO requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND.READ_CODE', 'Offcore demand code read requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND.READ_DATA', 'Offcore demand data read requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND.RFO', 'Offcore demand RFO requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 64, 'OFFCORE_REQUESTS.L1D_WRITEBACK', 'Offcore L1 data cache writebacks', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ', 'Outstanding offcore reads', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ_NOT_EMPTY', 'Cycles offcore reads busy', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE', 'Outstanding offcore demand code reads', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY', 'Cycles offcore demand code read busy', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA', 'Outstanding offcore demand data reads', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA_NOT_EMPTY', 'Cycles offcore demand data read busy', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO', 'Outstanding offcore demand RFOs', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO_NOT_EMPTY', 'Cycles offcore demand RFOs busy', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_SQ_FULL', 'Offcore requests blocked due to Super Queue full', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'PARTIAL_ADDRESS_ALIAS', 'False dependencies due to partial address aliasing', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 15, 'RAT_STALLS.ANY', 'All RAT stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'RAT_STALLS.FLAGS', 'Flag stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'RAT_STALLS.REGISTERS', 'Partial register stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'RAT_STALLS.ROB_READ_PORT', 'ROB read port stalls cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'RAT_STALLS.SCOREBOARD', 'Scoreboard stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource related stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 32, 'RESOURCE_STALLS.FPCW', 'FPU control word write stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LOAD', 'Load buffer stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 64, 'RESOURCE_STALLS.MXCSR', 'MXCSR rename stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 128, 'RESOURCE_STALLS.OTHER', 'Other Resource related stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB_FULL', 'ROB full stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS_FULL', 'Reservation Station full stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.STORE', 'Store buffer stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 7, 'SB_DRAIN.ANY', 'All Store buffer stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 1, 'SEG_RENAME_STALLS', 'Segment rename stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 4, 'SIMD_INT_128.PACK', '128 bit SIMD integer pack operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 32, 'SIMD_INT_128.PACKED_ARITH', '128 bit SIMD integer arithmetic operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 16, 'SIMD_INT_128.PACKED_LOGICAL', '128 bit SIMD integer logical operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'SIMD_INT_128.PACKED_MPY', '128 bit SIMD integer multiply operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 2, 'SIMD_INT_128.PACKED_SHIFT', '128 bit SIMD integer shift operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 64, 'SIMD_INT_128.SHUFFLE_MOVE', '128 bit SIMD integer shuffle/move operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 8, 'SIMD_INT_128.UNPACK', '128 bit SIMD integer unpack operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 4, 'SIMD_INT_64.PACK', 'SIMD integer 64 bit pack operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 32, 'SIMD_INT_64.PACKED_ARITH', 'SIMD integer 64 bit arithmetic operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 16, 'SIMD_INT_64.PACKED_LOGICAL', 'SIMD integer 64 bit logical operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 1, 'SIMD_INT_64.PACKED_MPY', 'SIMD integer 64 bit packed multiply operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 2, 'SIMD_INT_64.PACKED_SHIFT', 'SIMD integer 64 bit shift operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 64, 'SIMD_INT_64.SHUFFLE_MOVE', 'SIMD integer 64 bit shuffle/move operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 8, 'SIMD_INT_64.UNPACK', 'SIMD integer 64 bit unpack operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 1, 'SNOOP_RESPONSE.HIT', 'Thread responded HIT to snoop', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 2, 'SNOOP_RESPONSE.HITE', 'Thread responded HITE to snoop', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 4, 'SNOOP_RESPONSE.HITM', 'Thread responded HITM to snoop', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 4, 'SNOOPQ_REQUESTS.CODE', 'Snoop code requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 1, 'SNOOPQ_REQUESTS.DATA', 'Snoop data requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 2, 'SNOOPQ_REQUESTS.INVALIDATE', 'Snoop invalidate requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE', 'Outstanding snoop code requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE_NOT_EMPTY', 'Cycles snoop code requests queued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA', 'Outstanding snoop data requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA_NOT_EMPTY', 'Cycles snoop data requests queued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE', 'Outstanding snoop invalidate requests', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE_NOT_EMPTY', 'Cycles snoop invalidate requests queued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (246, 1, 'SQ_FULL_STALL_CYCLES', 'Super Queue full stall cycles', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 4, 'SQ_MISC.LRU_HINTS', 'Super Queue LRU hints sent to LLC', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Super Queue lock splits across a cache line', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 4, 'SSEX_UOPS_RETIRED.PACKED_DOUBLE', 'SIMD Packed-Double Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SSEX_UOPS_RETIRED.PACKED_SINGLE', 'SIMD Packed-Single Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SSEX_UOPS_RETIRED.SCALAR_DOUBLE', 'SIMD Scalar-Double Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SSEX_UOPS_RETIRED.SCALAR_SINGLE', 'SIMD Scalar-Single Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SSEX_UOPS_RETIRED.VECTOR_INTEGER', 'SIMD Vector Integer Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 4, 'STORE_BLOCKS.AT_RET', 'Loads delayed with at-Retirement block code', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 8, 'STORE_BLOCKS.L1D_BLOCK', 'Cacheable loads delayed with L1D block code', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles thread is active', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (25, 1, 'TWO_UOP_INSTS_DECODED', 'Two Uop instructions decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (219, 1, 'UOP_UNFUSION', 'Uop unfusions due to FP exceptions', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'UOPS_DECODED.ESP_FOLDING', 'Stack pointer instructions decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'UOPS_DECODED.ESP_SYNC', 'Stack pointer sync operations', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'UOPS_DECODED.MS_CYCLES_ACTIVE', 'Uops decoded by Microcode Sequencer', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'UOPS_DECODED.STALL_CYCLES', 'Cycles no Uops are decoded', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES', 'Cycles Uops executed on any port (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5', 'Cycles Uops executed on ports 0-4 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_COUNT', 'Uops executed on any port (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5', 'Uops executed on ports 0-4 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_CYCLES', 'Cycles no Uops issued on any port (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5', 'Cycles no Uops issued on ports 0-4 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.PORT0', 'Uops executed on port 0', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015', 'Uops issued on ports 0, 1 or 5', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015_STALL_CYCLES', 'Cycles no Uops issued on ports 0, 1 or 5', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.PORT1', 'Uops executed on port 1', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 4, 'UOPS_EXECUTED.PORT2_CORE', 'Uops executed on port 2 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'UOPS_EXECUTED.PORT234_CORE', 'Uops issued on ports 2, 3 or 4', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 8, 'UOPS_EXECUTED.PORT3_CORE', 'Uops executed on port 3 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 16, 'UOPS_EXECUTED.PORT4_CORE', 'Uops executed on port 4 (core count)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 32, 'UOPS_EXECUTED.PORT5', 'Uops executed on port 5', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops issued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles no Uops were issued on any thread', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CYCLES_ALL_THREADS', 'Cycles Uops were issued on either thread', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 2, 'UOPS_ISSUED.FUSED', 'Fused Uops issued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles no Uops were issued', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ACTIVE_CYCLES', 'Cycles Uops are being retired', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ANY', 'Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 4, 'UOPS_RETIRED.MACRO_FUSED', 'Macro-fused Uops retired (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles Uops are not retiring (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Total cycles using precise uop retired event (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0', 'Memory instructions retired above 0 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024', 'Memory instructions retired above 1024 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128', 'Memory instructions retired above 128 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16', 'Memory instructions retired above 16 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384', 'Memory instructions retired above 16384 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048', 'Memory instructions retired above 2048 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256', 'Memory instructions retired above 256 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32', 'Memory instructions retired above 32 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768', 'Memory instructions retired above 32768 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4', 'Memory instructions retired above 4 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096', 'Memory instructions retired above 4096 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512', 'Memory instructions retired above 512 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64', 'Memory instructions retired above 64 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8', 'Memory instructions retired above 8 clocks (Precise Event)', 'core', 3);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192', 'Memory instructions retired above 8192 clocks (Precise Event)', 'core', 3);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.CYCLES_DIV_BUSY', 'Cycles the divider is busy', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.DIV', 'Divide Operations executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 2, 'ARITH.MUL', 'Multiply operations executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 2, 'BACLEAR.BAD_TARGET', 'BACLEAR asserted with bad target address', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEAR.CLEAR', 'BACLEAR asserted, regardless of cause', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (167, 1, 'BACLEAR_FORCE_IQ', 'Instruction queue forced BACLEAR', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 1, 'BPU_CLEARS.EARLY', 'Early Branch Prediciton Unit clears', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 2, 'BPU_CLEARS.LATE', 'Late Branch Prediction Unit clears', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (229, 1, 'BPU_MISSED_CALL_RET', 'Branch prediction unit missed call or return', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 127, 'BR_INST_EXEC.ANY', 'Branch instructions executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_EXEC.COND', 'Conditional branch instructions executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_EXEC.DIRECT', 'Unconditional branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_EXEC.DIRECT_NEAR_CALL', 'Unconditional call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_EXEC.INDIRECT_NEAR_CALL', 'Indirect call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_EXEC.INDIRECT_NON_CALL', 'Indirect non call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 48, 'BR_INST_EXEC.NEAR_CALLS', 'Call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 7, 'BR_INST_EXEC.NON_CALLS', 'All non call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_EXEC.RETURN_NEAR', 'Indirect return branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 64, 'BR_INST_EXEC.TAKEN', 'Taken branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Retired conditional branch instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Retired near call instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Retired near call instructions Ring 3 only(Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 127, 'BR_MISP_EXEC.ANY', 'Mispredicted branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISP_EXEC.COND', 'Mispredicted conditional branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISP_EXEC.DIRECT', 'Mispredicted unconditional branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 16, 'BR_MISP_EXEC.DIRECT_NEAR_CALL', 'Mispredicted non call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 32, 'BR_MISP_EXEC.INDIRECT_NEAR_CALL', 'Mispredicted indirect call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISP_EXEC.INDIRECT_NON_CALL', 'Mispredicted indirect non call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 48, 'BR_MISP_EXEC.NEAR_CALLS', 'Mispredicted call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 7, 'BR_MISP_EXEC.NON_CALLS', 'Mispredicted non call branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISP_EXEC.RETURN_NEAR', 'Mispredicted return branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 64, 'BR_MISP_EXEC.TAKEN', 'Mispredicted taken branches executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional retired branches (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Mispredicted near retired calls (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'CACHE_LOCK_CYCLES.L1D', 'Cycles L1D locked', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'CACHE_LOCK_CYCLES.L1D_L2', 'Cycles L1D and L2 locked', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when thread is not halted (fixed counter)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF_P', 'Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.THREAD', 'Cycles when thread is not halted (fixed counter)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles when thread is not halted (programmable counter)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.TOTAL_CYCLES', 'Total CPU cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.ANY', 'DTLB load misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.PDE_MISS', 'DTLB load miss caused by low part of address', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'DTLB second level hit', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'DTLB load miss page walks complete', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_CYCLES', 'DTLB load miss page walk cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_MISSES.ANY', 'DTLB misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 128, 'DTLB_MISSES.LARGE_WALK_COMPLETED', 'DTLB miss large page walks', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_MISSES.STLB_HIT', 'DTLB first level misses but second level hit', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_MISSES.WALK_COMPLETED', 'DTLB miss page walks', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_MISSES.WALK_CYCLES', 'DTLB miss page walk cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Extended Page Table walk cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (213, 1, 'ES_REG_RENAMES', 'ES segment renames', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 1, 'FP_ASSIST.ALL', 'X87 Floating point assists (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 4, 'FP_ASSIST.INPUT', 'X87 Floating poiint assists for invalid input value (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 2, 'FP_ASSIST.OUTPUT', 'X87 Floating point assists for invalid output value (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'FP_COMP_OPS_EXE.MMX', 'MMX Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION', 'SSE* FP double precision Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 4, 'FP_COMP_OPS_EXE.SSE_FP', 'SSE and SSE2 FP Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_FP_PACKED', 'SSE FP packed Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_FP_SCALAR', 'SSE FP scalar Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION', 'SSE* FP single precision Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 8, 'FP_COMP_OPS_EXE.SSE2_INTEGER', 'SSE2 integer Uops', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Computational floating-point operations executed', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 3, 'FP_MMX_TRANS.ANY', 'All Floating Point to and from MMX transitions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 1, 'FP_MMX_TRANS.TO_FP', 'Transitions from MMX to Floating Point instructions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 2, 'FP_MMX_TRANS.TO_MMX', 'Transitions from Floating Point to MMX instructions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 15, 'ILD_STALL.ANY', 'Any Instruction Length Decoder stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Instruction Queue full stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Length Change Prefix stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'ILD_STALL.MRU', 'Stall cycles due to BPU MRU bypass', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 8, 'ILD_STALL.REGEN', 'Regen stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (24, 1, 'INST_DECODED.DEC0', 'Instructions that must be decoded by decoder 0', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (30, 1, 'INST_QUEUE_WRITE_CYCLES', 'Cycles instructions are written to the instruction queue', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INST_QUEUE_WRITES', 'Instructions written to instruction queue.', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INST_RETIRED.ANY', 'Instructions retired (fixed counter)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.ANY_P', 'Instructions retired (Programmable counter and Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 4, 'INST_RETIRED.MMX', 'Retired MMX instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.TOTAL_CYCLES', 'Total cycles (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 2, 'INST_RETIRED.X87', 'Retired floating-point operations (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 1, 'IO_TRANSACTIONS', 'I/O transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB_FLUSH', 'ITLB flushes', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'ITLB_MISS_RETIRED', 'Retired instructions that missed the ITLB (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.ANY', 'ITLB miss', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'ITLB miss page walks', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_CYCLES', 'ITLB miss page walk cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.M_EVICT', 'L1D cache lines replaced in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.M_REPL', 'L1D cache lines allocated in the M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.M_SNOOP_EVICT', 'L1D snoop eviction of cache lines in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPL', 'L1 data cache lines allocated', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (82, 1, 'L1D_CACHE_PREFETCH_LOCK_FB_HIT', 'L1D prefetch load lock accepted in fill buffer', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'L1D_PREFETCH.MISS', 'L1D hardware prefetch misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 1, 'L1D_PREFETCH.REQUESTS', 'L1D hardware prefetch requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 4, 'L1D_PREFETCH.TRIGGERS', 'L1D hardware prefetch requests triggered', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L1D_WB_L2.E_STATE', 'L1 writebacks to L2 in E state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L1D_WB_L2.I_STATE', 'L1 writebacks to L2 in I state (misses)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L1D_WB_L2.M_STATE', 'L1 writebacks to L2 in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L1D_WB_L2.MESI', 'All L1 writebacks to L2', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L1D_WB_L2.S_STATE', 'L1 writebacks to L2 in S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'L1I.CYCLES_STALLED', 'L1I instruction fetch stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'L1I.HITS', 'L1I instruction fetch hits', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'L1I.MISSES', 'L1I instruction fetch misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'L1I.READS', 'L1I Instruction fetches', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 255, 'L2_DATA_RQSTS.ANY', 'All L2 data requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 4, 'L2_DATA_RQSTS.DEMAND.E_STATE', 'L2 data demand loads in E state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 1, 'L2_DATA_RQSTS.DEMAND.I_STATE', 'L2 data demand loads in I state (misses)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 8, 'L2_DATA_RQSTS.DEMAND.M_STATE', 'L2 data demand loads in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 15, 'L2_DATA_RQSTS.DEMAND.MESI', 'L2 data demand requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 2, 'L2_DATA_RQSTS.DEMAND.S_STATE', 'L2 data demand loads in S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_DATA_RQSTS.PREFETCH.E_STATE', 'L2 data prefetches in E state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 16, 'L2_DATA_RQSTS.PREFETCH.I_STATE', 'L2 data prefetches in the I state (misses)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 128, 'L2_DATA_RQSTS.PREFETCH.M_STATE', 'L2 data prefetches in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 240, 'L2_DATA_RQSTS.PREFETCH.MESI', 'All L2 data prefetches', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 32, 'L2_DATA_RQSTS.PREFETCH.S_STATE', 'L2 data prefetches in the S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ANY', 'L2 lines alloacated', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E_STATE', 'L2 lines allocated in the E state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S_STATE', 'L2 lines allocated in the S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 15, 'L2_LINES_OUT.ANY', 'L2 lines evicted', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'L2 lines evicted by a demand request', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'L2 modified lines evicted by a demand request', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PREFETCH_CLEAN', 'L2 lines evicted by a prefetch request', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PREFETCH_DIRTY', 'L2 modified lines evicted by a prefetch request', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.IFETCH_HIT', 'L2 instruction fetch hits', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.IFETCH_MISS', 'L2 instruction fetch misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.IFETCHES', 'L2 instruction fetches', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.LD_HIT', 'L2 load hits', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 2, 'L2_RQSTS.LD_MISS', 'L2 load misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.LOADS', 'L2 requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 170, 'L2_RQSTS.MISS', 'All L2 misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PREFETCH_HIT', 'L2 prefetch hits', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PREFETCH_MISS', 'L2 prefetch misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.PREFETCHES', 'All L2 prefetches', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'L2 RFO hits', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'L2 RFO misses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.RFOS', 'L2 RFO requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANSACTIONS.ANY', 'All L2 transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANSACTIONS.FILL', 'L2 fill transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANSACTIONS.IFETCH', 'L2 instruction fetch transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANSACTIONS.L1D_WB', 'L1D writeback to L2 transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANSACTIONS.LOAD', 'L2 Load transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANSACTIONS.PREFETCH', 'L2 prefetch transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANSACTIONS.RFO', 'L2 RFO transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANSACTIONS.WB', 'L2 writeback to LLC transactions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_WRITE.LOCK.E_STATE', 'L2 demand lock RFOs in E state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 224, 'L2_WRITE.LOCK.HIT', 'All demand L2 lock RFOs that hit the cache', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 16, 'L2_WRITE.LOCK.I_STATE', 'L2 demand lock RFOs in I state (misses)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 128, 'L2_WRITE.LOCK.M_STATE', 'L2 demand lock RFOs in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 240, 'L2_WRITE.LOCK.MESI', 'All demand L2 lock RFOs', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 32, 'L2_WRITE.LOCK.S_STATE', 'L2 demand lock RFOs in S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 14, 'L2_WRITE.RFO.HIT', 'All L2 demand store RFOs that hit the cache', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_WRITE.RFO.I_STATE', 'L2 demand store RFOs in I state (misses)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_WRITE.RFO.M_STATE', 'L2 demand store RFOs in M state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_WRITE.RFO.MESI', 'All L2 demand store RFOs', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 2, 'L2_WRITE.RFO.S_STATE', 'L2 demand store RFOs in S state', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'LARGE_ITLB.HIT', 'Large ITLB hit', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LOAD_BLOCK.OVERLAP_STORE', 'Loads that partially overlap an earlier store', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 7, 'LOAD_DISPATCH.ANY', 'All loads dispatched', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 4, 'LOAD_DISPATCH.MOB', 'Loads dispatched from the MOB', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'LOAD_DISPATCH.RS', 'Loads dispatched that bypass the MOB', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 2, 'LOAD_DISPATCH.RS_DELAYED', 'Loads dispatched from stage 305', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE', 'Load operations conflicting with software prefetches', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Longest latency cache miss', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Longest latency cache reference', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.ACTIVE', 'Cycles when uops were delivered by the LSD', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.INACTIVE', 'Cycles no uops were delivered by the LSD', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (32, 1, 'LSD_OVERFLOW', 'Loops that can not stream from the instruction queue', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles machine clear asserted', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEM_ORDER', 'Execution pipeline restart due to Memory ordering conflicts', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 1, 'MACRO_INSTS.DECODED', 'Instructions decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (166, 1, 'MACRO_INSTS.FUSIONS_DECODED', 'Macro-fused instructions decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 1, 'MEM_INST_RETIRED.LOADS', 'Instructions retired which contains a load (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 2, 'MEM_INST_RETIRED.STORES', 'Instructions retired which contains a store (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 128, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 64, 'MEM_LOAD_RETIRED.HIT_LFB', 'Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L1D_HIT', 'Retired loads that hit the L1 data cache (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 16, 'MEM_LOAD_RETIRED.LLC_MISS', 'Retired loads that miss the LLC cache (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.LLC_UNSHARED_HIT', 'Retired loads that hit valid versions in the LLC cache (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 8, 'MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM', 'Retired loads that hit sibling core L2 in modified or unmodified states (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'MEM_STORE_RETIRED.DTLB_MISS', 'Retired stores that miss the DTLB (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 16, 'MEM_UNCORE_RETIRED.LOCAL_DRAM', 'Load instructions retired with a data source of local DRAM or locally homed remote hitm (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 2, 'MEM_UNCORE_RETIRED.OTHER_CORE_L2_HITM', 'Load instructions retired that HIT modified data in sibling core (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 8, 'MEM_UNCORE_RETIRED.REMOTE_CACHE_LOCAL_HOME_HIT', 'Load instructions retired remote cache HIT data source (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 32, 'MEM_UNCORE_RETIRED.REMOTE_DRAM', 'Load instructions retired remote DRAM and remote home-remote cache HITM (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (15, 128, 'MEM_UNCORE_RETIRED.UNCACHEABLE', 'Load instructions retired IO (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 128, 'OFFCORE_REQUESTS.ANY', 'All offcore requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ANY.READ', 'Offcore read requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 16, 'OFFCORE_REQUESTS.ANY.RFO', 'Offcore RFO requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND.READ_CODE', 'Offcore demand code read requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND.READ_DATA', 'Offcore demand data read requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND.RFO', 'Offcore demand RFO requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 64, 'OFFCORE_REQUESTS.L1D_WRITEBACK', 'Offcore L1 data cache writebacks', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 32, 'OFFCORE_REQUESTS.UNCACHED_MEM', 'Offcore uncached memory accesses', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ', 'Outstanding offcore reads', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ_NOT_EMPTY', 'Cycles offcore reads busy', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE', 'Outstanding offcore demand code reads', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY', 'Cycles offcore demand code read busy', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA', 'Outstanding offcore demand data reads', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA_NOT_EMPTY', 'Cycles offcore demand data read busy', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO', 'Outstanding offcore demand RFOs', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO_NOT_EMPTY', 'Cycles offcore demand RFOs busy', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_SQ_FULL', 'Offcore requests blocked due to Super Queue full', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'PARTIAL_ADDRESS_ALIAS', 'False dependencies due to partial address aliasing', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 15, 'RAT_STALLS.ANY', 'All RAT stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'RAT_STALLS.FLAGS', 'Flag stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'RAT_STALLS.REGISTERS', 'Partial register stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'RAT_STALLS.ROB_READ_PORT', 'ROB read port stalls cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'RAT_STALLS.SCOREBOARD', 'Scoreboard stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource related stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 32, 'RESOURCE_STALLS.FPCW', 'FPU control word write stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LOAD', 'Load buffer stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 64, 'RESOURCE_STALLS.MXCSR', 'MXCSR rename stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 128, 'RESOURCE_STALLS.OTHER', 'Other Resource related stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB_FULL', 'ROB full stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS_FULL', 'Reservation Station full stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.STORE', 'Store buffer stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 7, 'SB_DRAIN.ANY', 'All Store buffer stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 1, 'SEG_RENAME_STALLS', 'Segment rename stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 4, 'SIMD_INT_128.PACK', '128 bit SIMD integer pack operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 32, 'SIMD_INT_128.PACKED_ARITH', '128 bit SIMD integer arithmetic operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 16, 'SIMD_INT_128.PACKED_LOGICAL', '128 bit SIMD integer logical operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'SIMD_INT_128.PACKED_MPY', '128 bit SIMD integer multiply operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 2, 'SIMD_INT_128.PACKED_SHIFT', '128 bit SIMD integer shift operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 64, 'SIMD_INT_128.SHUFFLE_MOVE', '128 bit SIMD integer shuffle/move operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 8, 'SIMD_INT_128.UNPACK', '128 bit SIMD integer unpack operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 4, 'SIMD_INT_64.PACK', 'SIMD integer 64 bit pack operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 32, 'SIMD_INT_64.PACKED_ARITH', 'SIMD integer 64 bit arithmetic operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 16, 'SIMD_INT_64.PACKED_LOGICAL', 'SIMD integer 64 bit logical operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 1, 'SIMD_INT_64.PACKED_MPY', 'SIMD integer 64 bit packed multiply operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 2, 'SIMD_INT_64.PACKED_SHIFT', 'SIMD integer 64 bit shift operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 64, 'SIMD_INT_64.SHUFFLE_MOVE', 'SIMD integer 64 bit shuffle/move operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 8, 'SIMD_INT_64.UNPACK', 'SIMD integer 64 bit unpack operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 1, 'SNOOP_RESPONSE.HIT', 'Thread responded HIT to snoop', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 2, 'SNOOP_RESPONSE.HITE', 'Thread responded HITE to snoop', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 4, 'SNOOP_RESPONSE.HITM', 'Thread responded HITM to snoop', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 4, 'SNOOPQ_REQUESTS.CODE', 'Snoop code requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 1, 'SNOOPQ_REQUESTS.DATA', 'Snoop data requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 2, 'SNOOPQ_REQUESTS.INVALIDATE', 'Snoop invalidate requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE', 'Outstanding snoop code requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE_NOT_EMPTY', 'Cycles snoop code requests queued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA', 'Outstanding snoop data requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA_NOT_EMPTY', 'Cycles snoop data requests queued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE', 'Outstanding snoop invalidate requests', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE_NOT_EMPTY', 'Cycles snoop invalidate requests queued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (246, 1, 'SQ_FULL_STALL_CYCLES', 'Super Queue full stall cycles', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 4, 'SQ_MISC.LRU_HINTS', 'Super Queue LRU hints sent to LLC', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Super Queue lock splits across a cache line', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 4, 'SSEX_UOPS_RETIRED.PACKED_DOUBLE', 'SIMD Packed-Double Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SSEX_UOPS_RETIRED.PACKED_SINGLE', 'SIMD Packed-Single Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SSEX_UOPS_RETIRED.SCALAR_DOUBLE', 'SIMD Scalar-Double Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SSEX_UOPS_RETIRED.SCALAR_SINGLE', 'SIMD Scalar-Single Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SSEX_UOPS_RETIRED.VECTOR_INTEGER', 'SIMD Vector Integer Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 4, 'STORE_BLOCKS.AT_RET', 'Loads delayed with at-Retirement block code', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 8, 'STORE_BLOCKS.L1D_BLOCK', 'Cacheable loads delayed with L1D block code', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (25, 1, 'TWO_UOP_INSTS_DECODED', 'Two Uop instructions decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (219, 1, 'UOP_UNFUSION', 'Uop unfusions due to FP exceptions', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'UOPS_DECODED.ESP_FOLDING', 'Stack pointer instructions decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'UOPS_DECODED.ESP_SYNC', 'Stack pointer sync operations', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'UOPS_DECODED.MS_CYCLES_ACTIVE', 'Uops decoded by Microcode Sequencer', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'UOPS_DECODED.STALL_CYCLES', 'Cycles no Uops are decoded', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES', 'Cycles Uops executed on any port (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5', 'Cycles Uops executed on ports 0-4 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_COUNT', 'Uops executed on any port (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5', 'Uops executed on ports 0-4 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_CYCLES', 'Cycles no Uops issued on any port (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5', 'Cycles no Uops issued on ports 0-4 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.PORT0', 'Uops executed on port 0', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015', 'Uops issued on ports 0, 1 or 5', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015_STALL_CYCLES', 'Cycles no Uops issued on ports 0, 1 or 5', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.PORT1', 'Uops executed on port 1', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 4, 'UOPS_EXECUTED.PORT2_CORE', 'Uops executed on port 2 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'UOPS_EXECUTED.PORT234_CORE', 'Uops issued on ports 2, 3 or 4', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 8, 'UOPS_EXECUTED.PORT3_CORE', 'Uops executed on port 3 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 16, 'UOPS_EXECUTED.PORT4_CORE', 'Uops executed on port 4 (core count)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 32, 'UOPS_EXECUTED.PORT5', 'Uops executed on port 5', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops issued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles no Uops were issued on any thread', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CYCLES_ALL_THREADS', 'Cycles Uops were issued on either thread', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 2, 'UOPS_ISSUED.FUSED', 'Fused Uops issued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles no Uops were issued', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ACTIVE_CYCLES', 'Cycles Uops are being retired', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ANY', 'Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 4, 'UOPS_RETIRED.MACRO_FUSED', 'Macro-fused Uops retired (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles Uops are not retiring (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Total cycles using precise uop retired event (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0', 'Memory instructions retired above 0 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024', 'Memory instructions retired above 1024 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128', 'Memory instructions retired above 128 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16', 'Memory instructions retired above 16 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384', 'Memory instructions retired above 16384 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048', 'Memory instructions retired above 2048 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256', 'Memory instructions retired above 256 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32', 'Memory instructions retired above 32 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768', 'Memory instructions retired above 32768 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4', 'Memory instructions retired above 4 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096', 'Memory instructions retired above 4096 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512', 'Memory instructions retired above 512 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64', 'Memory instructions retired above 64 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8', 'Memory instructions retired above 8 clocks (Precise Event)', 'core', 4);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192', 'Memory instructions retired above 8192 clocks (Precise Event)', 'core', 4);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.CYCLES_DIV_BUSY', 'Cycles the divider is busy', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.DIV', 'Divide Operations executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 2, 'ARITH.MUL', 'Multiply operations executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 2, 'BACLEAR.BAD_TARGET', 'BACLEAR asserted with bad target address', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEAR.CLEAR', 'BACLEAR asserted, regardless of cause', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (167, 1, 'BACLEAR_FORCE_IQ', 'Instruction queue forced BACLEAR', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 1, 'BPU_CLEARS.EARLY', 'Early Branch Prediciton Unit clears', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (232, 2, 'BPU_CLEARS.LATE', 'Late Branch Prediction Unit clears', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (229, 1, 'BPU_MISSED_CALL_RET', 'Branch prediction unit missed call or return', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 127, 'BR_INST_EXEC.ANY', 'Branch instructions executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_EXEC.COND', 'Conditional branch instructions executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_EXEC.DIRECT', 'Unconditional branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_EXEC.DIRECT_NEAR_CALL', 'Unconditional call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_EXEC.INDIRECT_NEAR_CALL', 'Indirect call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_EXEC.INDIRECT_NON_CALL', 'Indirect non call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 48, 'BR_INST_EXEC.NEAR_CALLS', 'Call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 7, 'BR_INST_EXEC.NON_CALLS', 'All non call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_EXEC.RETURN_NEAR', 'Indirect return branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 64, 'BR_INST_EXEC.TAKEN', 'Taken branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Retired conditional branch instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Retired near call instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Retired near call instructions Ring 3 only(Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 127, 'BR_MISP_EXEC.ANY', 'Mispredicted branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISP_EXEC.COND', 'Mispredicted conditional branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISP_EXEC.DIRECT', 'Mispredicted unconditional branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 16, 'BR_MISP_EXEC.DIRECT_NEAR_CALL', 'Mispredicted non call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 32, 'BR_MISP_EXEC.INDIRECT_NEAR_CALL', 'Mispredicted indirect call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISP_EXEC.INDIRECT_NON_CALL', 'Mispredicted indirect non call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 48, 'BR_MISP_EXEC.NEAR_CALLS', 'Mispredicted call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 7, 'BR_MISP_EXEC.NON_CALLS', 'Mispredicted non call branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISP_EXEC.RETURN_NEAR', 'Mispredicted return branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 64, 'BR_MISP_EXEC.TAKEN', 'Mispredicted taken branches executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional retired branches (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Mispredicted near retired calls (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'CACHE_LOCK_CYCLES.L1D', 'Cycles L1D locked', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'CACHE_LOCK_CYCLES.L1D_L2', 'Cycles L1D and L2 locked', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when thread is not halted (fixed counter)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF_P', 'Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED.THREAD', 'Cycles when thread is not halted (fixed counter)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Cycles when thread is not halted (programmable counter)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.TOTAL_CYCLES', 'Total CPU cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.ANY', 'DTLB load misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 128, 'DTLB_LOAD_MISSES.LARGE_WALK_COMPLETED', 'DTLB load miss large page walks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.PDE_MISS', 'DTLB load miss caused by low part of address', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'DTLB second level hit', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'DTLB load miss page walks complete', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_CYCLES', 'DTLB load miss page walk cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_MISSES.ANY', 'DTLB misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 128, 'DTLB_MISSES.LARGE_WALK_COMPLETED', 'DTLB miss large page walks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 32, 'DTLB_MISSES.PDE_MISS', 'DTLB misses casued by low part of address', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_MISSES.STLB_HIT', 'DTLB first level misses but second level hit', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_MISSES.WALK_COMPLETED', 'DTLB miss page walks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_MISSES.WALK_CYCLES', 'DTLB miss page walk cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Extended Page Table walk cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (213, 1, 'ES_REG_RENAMES', 'ES segment renames', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 1, 'FP_ASSIST.ALL', 'X87 Floating point assists (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 4, 'FP_ASSIST.INPUT', 'X87 Floating poiint assists for invalid input value (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (247, 2, 'FP_ASSIST.OUTPUT', 'X87 Floating point assists for invalid output value (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'FP_COMP_OPS_EXE.MMX', 'MMX Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION', 'SSE* FP double precision Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 4, 'FP_COMP_OPS_EXE.SSE_FP', 'SSE and SSE2 FP Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_FP_PACKED', 'SSE FP packed Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_FP_SCALAR', 'SSE FP scalar Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION', 'SSE* FP single precision Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 8, 'FP_COMP_OPS_EXE.SSE2_INTEGER', 'SSE2 integer Uops', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Computational floating-point operations executed', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 3, 'FP_MMX_TRANS.ANY', 'All Floating Point to and from MMX transitions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 1, 'FP_MMX_TRANS.TO_FP', 'Transitions from MMX to Floating Point instructions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 2, 'FP_MMX_TRANS.TO_MMX', 'Transitions from Floating Point to MMX instructions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 15, 'ILD_STALL.ANY', 'Any Instruction Length Decoder stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Instruction Queue full stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Length Change Prefix stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'ILD_STALL.MRU', 'Stall cycles due to BPU MRU bypass', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 8, 'ILD_STALL.REGEN', 'Regen stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (24, 1, 'INST_DECODED.DEC0', 'Instructions that must be decoded by decoder 0', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (30, 1, 'INST_QUEUE_WRITE_CYCLES', 'Cycles instructions are written to the instruction queue', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INST_QUEUE_WRITES', 'Instructions written to instruction queue.', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INST_RETIRED.ANY', 'Instructions retired (fixed counter)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.ANY_P', 'Instructions retired (Programmable counter and Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 4, 'INST_RETIRED.MMX', 'Retired MMX instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.TOTAL_CYCLES', 'Total cycles (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 2, 'INST_RETIRED.X87', 'Retired floating-point operations (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 1, 'IO_TRANSACTIONS', 'I/O transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB_FLUSH', 'ITLB flushes', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'ITLB_MISS_RETIRED', 'Retired instructions that missed the ITLB (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.ANY', 'ITLB miss', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 128, 'ITLB_MISSES.LARGE_WALK_COMPLETED', 'ITLB miss large page walks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'ITLB miss page walks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_CYCLES', 'ITLB miss page walk cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.M_EVICT', 'L1D cache lines replaced in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.M_REPL', 'L1D cache lines allocated in the M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.M_SNOOP_EVICT', 'L1D snoop eviction of cache lines in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPL', 'L1 data cache lines allocated', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (82, 1, 'L1D_CACHE_PREFETCH_LOCK_FB_HIT', 'L1D prefetch load lock accepted in fill buffer', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'L1D_PREFETCH.MISS', 'L1D hardware prefetch misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 1, 'L1D_PREFETCH.REQUESTS', 'L1D hardware prefetch requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 4, 'L1D_PREFETCH.TRIGGERS', 'L1D hardware prefetch requests triggered', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L1D_WB_L2.E_STATE', 'L1 writebacks to L2 in E state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L1D_WB_L2.I_STATE', 'L1 writebacks to L2 in I state (misses)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L1D_WB_L2.M_STATE', 'L1 writebacks to L2 in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L1D_WB_L2.MESI', 'All L1 writebacks to L2', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L1D_WB_L2.S_STATE', 'L1 writebacks to L2 in S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'L1I.CYCLES_STALLED', 'L1I instruction fetch stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'L1I.HITS', 'L1I instruction fetch hits', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'L1I.MISSES', 'L1I instruction fetch misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'L1I.READS', 'L1I Instruction fetches', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 255, 'L2_DATA_RQSTS.ANY', 'All L2 data requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 4, 'L2_DATA_RQSTS.DEMAND.E_STATE', 'L2 data demand loads in E state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 1, 'L2_DATA_RQSTS.DEMAND.I_STATE', 'L2 data demand loads in I state (misses)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 8, 'L2_DATA_RQSTS.DEMAND.M_STATE', 'L2 data demand loads in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 15, 'L2_DATA_RQSTS.DEMAND.MESI', 'L2 data demand requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 2, 'L2_DATA_RQSTS.DEMAND.S_STATE', 'L2 data demand loads in S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_DATA_RQSTS.PREFETCH.E_STATE', 'L2 data prefetches in E state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 16, 'L2_DATA_RQSTS.PREFETCH.I_STATE', 'L2 data prefetches in the I state (misses)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 128, 'L2_DATA_RQSTS.PREFETCH.M_STATE', 'L2 data prefetches in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 240, 'L2_DATA_RQSTS.PREFETCH.MESI', 'All L2 data prefetches', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 32, 'L2_DATA_RQSTS.PREFETCH.S_STATE', 'L2 data prefetches in the S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ANY', 'L2 lines alloacated', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E_STATE', 'L2 lines allocated in the E state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S_STATE', 'L2 lines allocated in the S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 15, 'L2_LINES_OUT.ANY', 'L2 lines evicted', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'L2 lines evicted by a demand request', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'L2 modified lines evicted by a demand request', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PREFETCH_CLEAN', 'L2 lines evicted by a prefetch request', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PREFETCH_DIRTY', 'L2 modified lines evicted by a prefetch request', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.IFETCH_HIT', 'L2 instruction fetch hits', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.IFETCH_MISS', 'L2 instruction fetch misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.IFETCHES', 'L2 instruction fetches', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.LD_HIT', 'L2 load hits', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 2, 'L2_RQSTS.LD_MISS', 'L2 load misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.LOADS', 'L2 requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 170, 'L2_RQSTS.MISS', 'All L2 misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PREFETCH_HIT', 'L2 prefetch hits', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PREFETCH_MISS', 'L2 prefetch misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.PREFETCHES', 'All L2 prefetches', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'L2 RFO hits', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'L2 RFO misses', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.RFOS', 'L2 RFO requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANSACTIONS.ANY', 'All L2 transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANSACTIONS.FILL', 'L2 fill transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANSACTIONS.IFETCH', 'L2 instruction fetch transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANSACTIONS.L1D_WB', 'L1D writeback to L2 transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANSACTIONS.LOAD', 'L2 Load transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANSACTIONS.PREFETCH', 'L2 prefetch transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANSACTIONS.RFO', 'L2 RFO transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANSACTIONS.WB', 'L2 writeback to LLC transactions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_WRITE.LOCK.E_STATE', 'L2 demand lock RFOs in E state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 224, 'L2_WRITE.LOCK.HIT', 'All demand L2 lock RFOs that hit the cache', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 16, 'L2_WRITE.LOCK.I_STATE', 'L2 demand lock RFOs in I state (misses)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 128, 'L2_WRITE.LOCK.M_STATE', 'L2 demand lock RFOs in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 240, 'L2_WRITE.LOCK.MESI', 'All demand L2 lock RFOs', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 32, 'L2_WRITE.LOCK.S_STATE', 'L2 demand lock RFOs in S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 14, 'L2_WRITE.RFO.HIT', 'All L2 demand store RFOs that hit the cache', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_WRITE.RFO.I_STATE', 'L2 demand store RFOs in I state (misses)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_WRITE.RFO.M_STATE', 'L2 demand store RFOs in M state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_WRITE.RFO.MESI', 'All L2 demand store RFOs', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 2, 'L2_WRITE.RFO.S_STATE', 'L2 demand store RFOs in S state', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'LARGE_ITLB.HIT', 'Large ITLB hit', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LOAD_BLOCK.OVERLAP_STORE', 'Loads that partially overlap an earlier store', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 7, 'LOAD_DISPATCH.ANY', 'All loads dispatched', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 4, 'LOAD_DISPATCH.MOB', 'Loads dispatched from the MOB', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'LOAD_DISPATCH.RS', 'Loads dispatched that bypass the MOB', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 2, 'LOAD_DISPATCH.RS_DELAYED', 'Loads dispatched from stage 305', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE', 'Load operations conflicting with software prefetches', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Longest latency cache miss', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Longest latency cache reference', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.ACTIVE', 'Cycles when uops were delivered by the LSD', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.INACTIVE', 'Cycles no uops were delivered by the LSD', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (32, 1, 'LSD_OVERFLOW', 'Loops that can not stream from the instruction queue', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles machine clear asserted', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEM_ORDER', 'Execution pipeline restart due to Memory ordering conflicts', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 1, 'MACRO_INSTS.DECODED', 'Instructions decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (166, 1, 'MACRO_INSTS.FUSIONS_DECODED', 'Macro-fused instructions decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 1, 'MEM_INST_RETIRED.LOADS', 'Instructions retired which contains a load (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 2, 'MEM_INST_RETIRED.STORES', 'Instructions retired which contains a store (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 128, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 64, 'MEM_LOAD_RETIRED.HIT_LFB', 'Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L1D_HIT', 'Retired loads that hit the L1 data cache (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 16, 'MEM_LOAD_RETIRED.LLC_MISS', 'Retired loads that miss the LLC cache (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.LLC_UNSHARED_HIT', 'Retired loads that hit valid versions in the LLC cache (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 8, 'MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM', 'Retired loads that hit sibling core L2 in modified or unmodified states (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'MEM_STORE_RETIRED.DTLB_MISS', 'Retired stores that miss the DTLB (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORE', 'Misaligned store references', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 128, 'OFFCORE_REQUESTS.ANY', 'All offcore requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ANY.READ', 'Offcore read requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 16, 'OFFCORE_REQUESTS.ANY.RFO', 'Offcore RFO requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND.READ_CODE', 'Offcore demand code read requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND.READ_DATA', 'Offcore demand data read requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND.RFO', 'Offcore demand RFO requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 64, 'OFFCORE_REQUESTS.L1D_WRITEBACK', 'Offcore L1 data cache writebacks', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ', 'Outstanding offcore reads', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ANY.READ_NOT_EMPTY', 'Cycles offcore reads busy', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE', 'Outstanding offcore demand code reads', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY', 'Cycles offcore demand code read busy', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA', 'Outstanding offcore demand data reads', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA_NOT_EMPTY', 'Cycles offcore demand data read busy', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO', 'Outstanding offcore demand RFOs', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO_NOT_EMPTY', 'Cycles offcore demand RFOs busy', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_SQ_FULL', 'Offcore requests blocked due to Super Queue full', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'PARTIAL_ADDRESS_ALIAS', 'False dependencies due to partial address aliasing', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 15, 'RAT_STALLS.ANY', 'All RAT stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'RAT_STALLS.FLAGS', 'Flag stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'RAT_STALLS.REGISTERS', 'Partial register stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'RAT_STALLS.ROB_READ_PORT', 'ROB read port stalls cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'RAT_STALLS.SCOREBOARD', 'Scoreboard stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource related stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 32, 'RESOURCE_STALLS.FPCW', 'FPU control word write stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LOAD', 'Load buffer stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 64, 'RESOURCE_STALLS.MXCSR', 'MXCSR rename stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 128, 'RESOURCE_STALLS.OTHER', 'Other Resource related stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB_FULL', 'ROB full stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS_FULL', 'Reservation Station full stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.STORE', 'Store buffer stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 7, 'SB_DRAIN.ANY', 'All Store buffer stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 1, 'SEG_RENAME_STALLS', 'Segment rename stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 4, 'SIMD_INT_128.PACK', '128 bit SIMD integer pack operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 32, 'SIMD_INT_128.PACKED_ARITH', '128 bit SIMD integer arithmetic operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 16, 'SIMD_INT_128.PACKED_LOGICAL', '128 bit SIMD integer logical operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'SIMD_INT_128.PACKED_MPY', '128 bit SIMD integer multiply operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 2, 'SIMD_INT_128.PACKED_SHIFT', '128 bit SIMD integer shift operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 64, 'SIMD_INT_128.SHUFFLE_MOVE', '128 bit SIMD integer shuffle/move operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 8, 'SIMD_INT_128.UNPACK', '128 bit SIMD integer unpack operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 4, 'SIMD_INT_64.PACK', 'SIMD integer 64 bit pack operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 32, 'SIMD_INT_64.PACKED_ARITH', 'SIMD integer 64 bit arithmetic operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 16, 'SIMD_INT_64.PACKED_LOGICAL', 'SIMD integer 64 bit logical operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 1, 'SIMD_INT_64.PACKED_MPY', 'SIMD integer 64 bit packed multiply operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 2, 'SIMD_INT_64.PACKED_SHIFT', 'SIMD integer 64 bit shift operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 64, 'SIMD_INT_64.SHUFFLE_MOVE', 'SIMD integer 64 bit shuffle/move operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (253, 8, 'SIMD_INT_64.UNPACK', 'SIMD integer 64 bit unpack operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 1, 'SNOOP_RESPONSE.HIT', 'Thread responded HIT to snoop', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 2, 'SNOOP_RESPONSE.HITE', 'Thread responded HITE to snoop', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (184, 4, 'SNOOP_RESPONSE.HITM', 'Thread responded HITM to snoop', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 4, 'SNOOPQ_REQUESTS.CODE', 'Snoop code requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 1, 'SNOOPQ_REQUESTS.DATA', 'Snoop data requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (180, 2, 'SNOOPQ_REQUESTS.INVALIDATE', 'Snoop invalidate requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE', 'Outstanding snoop code requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SNOOPQ_REQUESTS_OUTSTANDING.CODE_NOT_EMPTY', 'Cycles snoop code requests queued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA', 'Outstanding snoop data requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SNOOPQ_REQUESTS_OUTSTANDING.DATA_NOT_EMPTY', 'Cycles snoop data requests queued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE', 'Outstanding snoop invalidate requests', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE_NOT_EMPTY', 'Cycles snoop invalidate requests queued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (246, 1, 'SQ_FULL_STALL_CYCLES', 'Super Queue full stall cycles', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 4, 'SQ_MISC.LRU_HINTS', 'Super Queue LRU hints sent to LLC', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Super Queue lock splits across a cache line', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 4, 'SSEX_UOPS_RETIRED.PACKED_DOUBLE', 'SIMD Packed-Double Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SSEX_UOPS_RETIRED.PACKED_SINGLE', 'SIMD Packed-Single Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SSEX_UOPS_RETIRED.SCALAR_DOUBLE', 'SIMD Scalar-Double Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SSEX_UOPS_RETIRED.SCALAR_SINGLE', 'SIMD Scalar-Single Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SSEX_UOPS_RETIRED.VECTOR_INTEGER', 'SIMD Vector Integer Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 4, 'STORE_BLOCKS.AT_RET', 'Loads delayed with at-Retirement block code', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 8, 'STORE_BLOCKS.L1D_BLOCK', 'Cacheable loads delayed with L1D block code', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (25, 1, 'TWO_UOP_INSTS_DECODED', 'Two Uop instructions decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (219, 1, 'UOP_UNFUSION', 'Uop unfusions due to FP exceptions', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'UOPS_DECODED.ESP_FOLDING', 'Stack pointer instructions decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'UOPS_DECODED.ESP_SYNC', 'Stack pointer sync operations', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'UOPS_DECODED.MS_CYCLES_ACTIVE', 'Uops decoded by Microcode Sequencer', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'UOPS_DECODED.STALL_CYCLES', 'Cycles no Uops are decoded', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES', 'Cycles Uops executed on any port (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5', 'Cycles Uops executed on ports 0-4 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_COUNT', 'Uops executed on any port (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5', 'Uops executed on ports 0-4 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 63, 'UOPS_EXECUTED.CORE_STALL_CYCLES', 'Cycles no Uops issued on any port (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 31, 'UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5', 'Cycles no Uops issued on ports 0-4 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.PORT0', 'Uops executed on port 0', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015', 'Uops issued on ports 0, 1 or 5', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 64, 'UOPS_EXECUTED.PORT015_STALL_CYCLES', 'Cycles no Uops issued on ports 0, 1 or 5', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.PORT1', 'Uops executed on port 1', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 4, 'UOPS_EXECUTED.PORT2_CORE', 'Uops executed on port 2 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'UOPS_EXECUTED.PORT234_CORE', 'Uops issued on ports 2, 3 or 4', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 8, 'UOPS_EXECUTED.PORT3_CORE', 'Uops executed on port 3 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 16, 'UOPS_EXECUTED.PORT4_CORE', 'Uops executed on port 4 (core count)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 32, 'UOPS_EXECUTED.PORT5', 'Uops executed on port 5', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops issued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles no Uops were issued on any thread', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CYCLES_ALL_THREADS', 'Cycles Uops were issued on either thread', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 2, 'UOPS_ISSUED.FUSED', 'Fused Uops issued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles no Uops were issued', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ACTIVE_CYCLES', 'Cycles Uops are being retired', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ANY', 'Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 4, 'UOPS_RETIRED.MACRO_FUSED', 'Macro-fused Uops retired (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles Uops are not retiring (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Total cycles using precise uop retired event (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES', 'Retired branch instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Mispredicted retired branch instructions (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0', 'Memory instructions retired above 0 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024', 'Memory instructions retired above 1024 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128', 'Memory instructions retired above 128 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16', 'Memory instructions retired above 16 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384', 'Memory instructions retired above 16384 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048', 'Memory instructions retired above 2048 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256', 'Memory instructions retired above 256 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32', 'Memory instructions retired above 32 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768', 'Memory instructions retired above 32768 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4', 'Memory instructions retired above 4 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096', 'Memory instructions retired above 4096 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512', 'Memory instructions retired above 512 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64', 'Memory instructions retired above 64 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8', 'Memory instructions retired above 8 clocks (Precise Event)', 'core', 5);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (11, 16, 'MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192', 'Memory instructions retired above 8192 clocks (Precise Event)', 'core', 5);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.THREAD', 'Core cycles when the thread is not in halt state.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Reference cycles when the core is not in halt state.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_EXEC.NONTAKEN_CONDITIONAL', 'Not taken macro-conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 129, 'BR_INST_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired macro-conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 130, 'BR_INST_EXEC.TAKEN_DIRECT_JUMP', 'Taken speculative and retired macro-conditional branch instructions excluding calls and indirects', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 132, 'BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired indirect branches excluding calls and returns', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 136, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN', 'Taken speculative and retired indirect branches with return mnemonic', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 144, 'BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired direct near calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 160, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired indirect calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 193, 'BR_INST_EXEC.ALL_CONDITIONAL', 'Speculative and retired macro-conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 194, 'BR_INST_EXEC.ALL_DIRECT_JMP', 'Speculative and retired macro-unconditional branches excluding calls and indirects', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 196, 'BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Speculative and retired indirect branches excluding calls and returns', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 200, 'BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN', 'Speculative and retired indirect return branches.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 208, 'BR_INST_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired direct near calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 65, 'BR_MISP_EXEC.NONTAKEN_CONDITIONAL', 'Not taken speculative and retired mispredicted macro conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 129, 'BR_MISP_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired mispredicted macro conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 132, 'BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired mispredicted indirect branches excluding calls and returns', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 136, 'BR_MISP_EXEC.TAKEN_RETURN_NEAR', 'Taken speculative and retired mispredicted indirect branches with return mnemonic', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 144, 'BR_MISP_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted direct near calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 160, 'BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted indirect calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 193, 'BR_MISP_EXEC.ALL_CONDITIONAL', 'Speculative and retired mispredicted macro conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 196, 'BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Mispredicted indirect branches excluding calls and returns', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 208, 'BR_MISP_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired mispredicted direct near calls', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Thread cycles when thread is not in halt state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB.ITLB_FLUSH', 'Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Instruction cache, streaming buffer and victim cache misses', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.UOPS', 'Number of Uops delivered by the LSD.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_ACTIVE', 'Cycles Uops delivered by the LSD, but did not come from the decoder', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Stalls caused by changing prefix length of the instruction.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Stall cycles because IQ is full', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INSTS_WRITTEN_TO_IQ.INSTS', 'Valid instructions written to IQ per cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 2, 'IDQ.EMPTY', 'Instruction Decode Queue (IDQ) empty cycles', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_UOPS', 'Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 32, 'IDQ.MS_MITE_UOPS', 'Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CORE', 'Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE', 'Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE', 'Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 1, 'DSB2MITE_SWITCHES.COUNT', 'Decode Stream Buffer (DSB)-to-MITE switches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 2, 'DSB2MITE_SWITCHES.PENALTY_CYCLES', 'Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 2, 'DSB_FILL.OTHER_CANCEL', 'Cases of cancelling valid DSB fill not because of exceeding way limit', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 8, 'DSB_FILL.EXCEED_DSB_LINES', 'Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 64, 'INT_MISC.RAT_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the thread', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 32, 'PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP', 'Increments the number of flags-merge uops in flight each cycle.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 64, 'PARTIAL_RAT_STALLS.SLOW_LEA_WINDOW', 'Cycles with at least one slow LEA uop being allocated', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 128, 'PARTIAL_RAT_STALLS.MUL_SINGLE_UOP', 'Multiply packed/scalar single precision uops allocated', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource-related stall cycles', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LB', 'Counts the cycles of stall due to lack of load buffers.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS', 'Cycles stalled due to no eligible RS entry available.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.SB', 'Cycles stalled due to no store buffers available. (not including draining form sync).', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB', 'Cycles stalled due to re-order buffer full.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 64, 'RESOURCE_STALLS2.BOB_FULL', 'Cycles when Allocator is stalled if BOB is full and new branch needs it', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_CYCLES', 'Cycles when Reservation Station (RS) is empty for the thread', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0', 'Unhalted core cycles when the thread is in ring 0', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0_TRANS', 'Number of intervals between processor halts while thread is in ring 0', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 2, 'CPL_CYCLES.RING123', 'Unhalted core cycles when thread is in rings 1, 2, or 3', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 32, 'ROB_MISC_EVENTS.LBR_INSERTS', 'Count cases of saving new LBR', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Counts the number of machine clears due to memory order conflicts.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-modifying code (SMC) detected.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 32, 'MACHINE_CLEARS.MASKMOV', 'This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Number of instructions retired. General Counter - architectural event', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ALL', 'Actually retired uops.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Cycles with less than 10 actually retired uops.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Conditional branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Direct and indirect near call instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'All (macro) branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.NEAR_RETURN', 'Return instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 16, 'BR_INST_RETIRED.NOT_TAKEN', 'Not taken branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 32, 'BR_INST_RETIRED.NEAR_TAKEN', 'Taken branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 64, 'BR_INST_RETIRED.FAR_BRANCH', 'Far branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES_PEBS', 'All (macro) branch instructions retired. (Precise Event - PEBS)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Direct and indirect mispredicted near call instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'All mispredicted macro branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 16, 'BR_MISP_RETIRED.NOT_TAKEN', 'Mispredicted not taken branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 32, 'BR_MISP_RETIRED.TAKEN', 'Mispredicted taken branch instructions retired.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES_PEBS', 'Mispredicted macro branch instructions retired. (Precise Event - PEBS)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 2, 'OTHER_ASSISTS.ITLB_MISS_RETIRED', 'Retired instructions experiencing ITLB misses.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 8, 'OTHER_ASSISTS.AVX_STORE', 'Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 16, 'OTHER_ASSISTS.AVX_TO_SSE', 'Number of transitions from AVX-256 to legacy SSE when penalty applicable.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 32, 'OTHER_ASSISTS.SSE_TO_AVX', 'Number of transitions from SSE to AVX-256 when penalty applicable.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'FP_ASSIST.X87_OUTPUT', 'Number of X87 assists due to output value.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 4, 'FP_ASSIST.X87_INPUT', 'Number of X87 assists due to input value.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'FP_ASSIST.SIMD_OUTPUT', 'Number of SIMD FP assists due to Output values', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 16, 'FP_ASSIST.SIMD_INPUT', 'Number of SIMD FP assists due to input values', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4', 'Loads with latency value being above 4', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8', 'Loads with latency value being above 8', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16', 'Loads with latency value being above 16', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32', 'Loads with latency value being above 32', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64', 'Loads with latency value being above 64', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128', 'Loads with latency value being above 128', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256', 'Loads with latency value being above 256', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512', 'Loads with latency value being above 512', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 2, 'MEM_TRANS_RETIRED.PRECISE_STORE', 'Sample stores and collect precise store operation via PEBS record. PMC3 only. (Precise Event - PEBS)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 17, 'MEM_UOPS_RETIRED.STLB_MISS_LOADS', 'Load uops with true STLB miss retired to architected path.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 18, 'MEM_UOPS_RETIRED.STLB_MISS_STORES', 'Store uops with true STLB miss retired to architected path.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 33, 'MEM_UOPS_RETIRED.LOCK_LOADS', 'Load uops with locked access retired to architected path.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 65, 'MEM_UOPS_RETIRED.SPLIT_LOADS', 'Line-splitted load uops retired to architected path.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 66, 'MEM_UOPS_RETIRED.SPLIT_STORES', 'Line-splitted store uops retired to architected path.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 129, 'MEM_UOPS_RETIRED.ALL_LOADS', 'Load uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 130, 'MEM_UOPS_RETIRED.ALL_STORES', 'Store uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'MEM_LOAD_UOPS_RETIRED.L1_HIT', 'Retired load uops with L1 cache hits as data sources.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'MEM_LOAD_UOPS_RETIRED.L2_HIT', 'Retired load uops with L2 cache hits as data sources.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'MEM_LOAD_UOPS_RETIRED.LLC_HIT', 'Retired load uops which data sources were data hits in LLC without snoops required.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 64, 'MEM_LOAD_UOPS_RETIRED.HIT_LFB', 'Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS', 'Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT', 'Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM', 'Retired load uops which data sources were HitM responses from shared LLC.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE', 'Retired load uops which data sources were hits in LLC without snoops required.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (212, 2, 'MEM_LOAD_UOPS_MISC_RETIRED.LLC_MISS', 'Retired load uops with unknown information as data source in cache serviced the load.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV_ACTIVE', 'Cycles when divider is busy executing divide operations', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV', 'Divide operations executed', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE', 'Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE', 'Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_PACKED_SINGLE', 'Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE', 'Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 1, 'SIMD_FP_256.PACKED_SINGLE', 'number of GSSE-256 Computational FP single precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 2, 'SIMD_FP_256.PACKED_DOUBLE', 'number of AVX-256 Computational FP double precision uops issued this cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_DISPATCHED.THREAD', 'Uops dispatched per thread', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_DISPATCHED.CORE', 'Uops dispatched from any thread', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0', 'Cycles per thread when uops are dispatched to port 0', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1', 'Cycles per thread when uops are dispatched to port 1', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4', 'Cycles per thread when uops are dispatched to port 4', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5', 'Cycles per thread when uops are dispatched to port 5', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 4, 'CYCLE_ACTIVITY.CYCLES_NO_DISPATCH', 'Each cycle there was no dispatch for this thread, increment by 1. Note this is connect to Umask 2. No dispatch can be deduced from the UOPS_EXECUTED event.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 2, 'CYCLE_ACTIVITY.CYCLES_L1D_PENDING', 'Each cycle there was a miss-pending demand load this thread, increment by 1. Note this is in DCU and connected to Umask 1. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 1, 'CYCLE_ACTIVITY.CYCLES_L2_PENDING', 'Each cycle there was a MLC-miss pending demand load this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 6, 'CYCLE_ACTIVITY.STALLS_L1D_PENDING', 'Each cycle there was a miss-pending demand load this thread and no uops dispatched, increment by 1. Note this is in DCU and connected to Umask 1 and 2. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 5, 'CYCLE_ACTIVITY.STALLS_L2_PENDING', 'Each cycle there was a MLC-miss pending demand load and no uops dispatched on this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0 and 2.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Cycle count for an Extended Page table walk. The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.MISS_CAUSES_A_WALK', 'Misses at all ITLB levels that cause page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'Misses in all ITLB levels that cause completed page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 16, 'ITLB_MISSES.STLB_HIT', 'Operations that miss the first ITLB level but hit the second and do not cause any page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK', 'Load misses in all DTLB levels that cause page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'Load misses at all DTLB levels that cause completed page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'Load operations that miss the first DTLB level but hit the second and do not cause page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_STORE_MISSES.MISS_CAUSES_A_WALK', 'Store misses in all DTLB levels that cause page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_STORE_MISSES.WALK_COMPLETED', 'Store misses in all DTLB levels that cause completed page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_STORE_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_STORE_MISSES.STLB_HIT', 'Store operations that miss the first TLB level but hit the second and do not cause page walks', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 1, 'TLB_FLUSH.DTLB_THREAD', 'DTLB flush attempts of the thread-specific entries', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 32, 'TLB_FLUSH.STLB_ANY', 'STLB flush attempts', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (190, 1, 'PAGE_WALKS.LLC_MISS', 'Number of any page walk that had a miss in LLC. Does not necessary cause a SUSPEND', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPLACEMENT', 'L1D data line replacements', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.ALLOCATED_IN_M', 'Allocated L1D data cache lines in M state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.EVICTION', 'L1D data cache lines in M state evicted due to replacement', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.ALL_M_REPLACEMENT', 'Cache lines in M state evicted out of L1D due to Snoop HitM or dirty line replacement', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING', 'L1D miss oustandings duration in cycles', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING_CYCLES', 'Cycles with L1D load Misses outstanding.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE.SW_PF', 'Not software-prefetch load dispatches that hit FB allocated for software prefetch', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 2, 'LOAD_HIT_PRE.HW_PF', 'Not software-prefetch load dispatches that hit FB allocated for hardware prefetch', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'HW_PRE_REQ.DL1_MISS', 'Hardware Prefetch requests that miss the L1D cache. This accounts for both L1 streamer and IP-based (IPP) HW prefetchers. A request is being counted each time it access the cache & miss it, including if a block is applicable or if hit the Fill Buffer for', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION', 'Cycles when L1 and L2 are locked due to UC or split lock', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'LOCK_CYCLES.CACHE_LOCK_DURATION', 'Cycles when L1D is locked', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 1, 'LD_BLOCKS.DATA_UNKNOWN', 'Loads delayed due to SB blocks, preceding store operations with known addresses but unknown data', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LD_BLOCKS.STORE_FORWARD', 'Cases when loads get true Block-on-Store blocking code preventing store forwarding', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'LD_BLOCKS.NO_SR', 'This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 16, 'LD_BLOCKS.ALL_BLOCK', 'Number of cases where any load ends up with a valid block-code written to the load buffer (including blocks due to Memory Order Buffer (MOB), Data Cache Unit (DCU), TLB, but load has no DCU miss)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'LD_BLOCKS_PARTIAL.ADDRESS_ALIAS', 'False dependencies in MOB due to partial compare', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 8, 'LD_BLOCKS_PARTIAL.ALL_STA_BLOCK', 'This event counts the number of times that load operations are temporarily blocked because of older stores, with addresses that are not yet known. A load operation may incur more than one block of this type.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'MISALIGN_MEM_REF.LOADS', 'Speculative cache line split load uops dispatched to L1 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORES', 'Speculative cache line split STA uops dispatched to L1 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (182, 1, 'AGU_BYPASS_CANCEL.COUNT', 'This event counts executed load operations with all the following traits: 1. addressing of the format [base + offset], 2. the offset is between 1 and 2047, 3. the address specified in the base register is in one page and the address [base+offset] is in an', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD', 'Offcore outstanding Demand Data Read transactions in uncore queue.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD', 'Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO', 'Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD', 'Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD', 'Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND_DATA_RD', 'Demand Data Read requests sent to uncore', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND_CODE_RD', 'Cacheable and noncachaeble code read requests', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND_RFO', 'Demand RFO requests including regular RFOs, locks, ItoM', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ALL_DATA_RD', 'Demand and prefetch data reads', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_BUFFER.SQ_FULL', 'Cases when offcore requests buffer cannot take more entries for core', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.DEMAND_DATA_RD_HIT', 'Demand Data Read requests that hit L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'RFO requests that hit L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'RFO requests that miss L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.CODE_RD_HIT', 'L2 cache hits when fetching instructions, code reads.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.CODE_RD_MISS', 'L2 cache misses when fetching instructions', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PF_HIT', 'Requests from the L2 hardware prefetchers that hit L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PF_MISS', 'Requests from the L2 hardware prefetchers that miss L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_STORE_LOCK_RQSTS.MISS', 'RFOs that miss cache lines', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 4, 'L2_STORE_LOCK_RQSTS.HIT_E', 'RFOs that hit cache lines in E state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_STORE_LOCK_RQSTS.HIT_M', 'RFOs that hit cache lines in M state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_STORE_LOCK_RQSTS.ALL', 'RFOs that access cache lines in any state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L2_L1D_WB_RQSTS.MISS', 'Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L2_L1D_WB_RQSTS.HIT_S', 'Not rejected writebacks from L1D to L2 cache lines in S state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L2_L1D_WB_RQSTS.HIT_E', 'Not rejected writebacks from L1D to L2 cache lines in E state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L2_L1D_WB_RQSTS.HIT_M', 'Not rejected writebacks from L1D to L2 cache lines in M state', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L2_L1D_WB_RQSTS.ALL', 'Not rejected writebacks from L1D to L2 cache lines in any state.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANS.DEMAND_DATA_RD', 'Demand Data Read requests that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANS.RFO', 'RFO requests that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANS.CODE_RD', 'L2 cache accesses when fetching instructions', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANS.ALL_PF', 'L2 or LLC HW prefetches that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANS.L1D_WB', 'L1D writebacks that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANS.L2_FILL', 'L2 fill requests that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANS.L2_WB', 'L2 writebacks that access L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANS.ALL_REQUESTS', 'Transactions accessing L2 pipe', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 1, 'L2_LINES_IN.I', 'L2 cache lines in I state filling L2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S', 'L2 cache lines in S state filling L2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E', 'L2 cache lines in E state filling L2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ALL', 'L2 cache lines filling L2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'Clean L2 cache lines evicted by demand', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'Dirty L2 cache lines evicted by demand', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PF_CLEAN', 'Clean L2 cache lines evicted by L2 prefetch', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PF_DIRTY', 'Dirty L2 cache lines evicted by L2 prefetch', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 10, 'L2_LINES_OUT.DIRTY_ALL', 'Dirty L2 cache lines filling the L2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Core-originated cacheable demand requests missed LLC', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Core-originated cacheable demand requests that refer to LLC', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Split locks in SQ', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_THREAD_UNHALTED.REF_XCLK', 'Cases when the core is unhalted at 100 Mhz', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Direct and indirect macro near call instructions retired (captured in ring 3).', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0_CORE', 'Cycles per core when uops are dispatched to port 0', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1_CORE', 'Cycles per core when uops are dispatched to port 1', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4_CORE', 'Cycles per core when uops are dispatched to port 4', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5_CORE', 'Cycles per core when uops are dispatched to port 5', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2', 'Cycles per thread when load or STA uops are dispatched to port 2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3', 'Cycles per thread when load or STA uops are dispatched to port 3', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_CYCLES', 'Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_OCCUR', 'Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2_CORE', 'Cycles per core when load or STA uops are dispatched to port 2', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3_CORE', 'Cycles per core when load or STA uops are dispatched to port 3', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.PREC_DIST', 'Instructions retired. (Precise Event - PEBS)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.ALL_DEMAND_DATA_RD', 'Demand Data Read requests', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.ALL_RFO', 'RFO requests to L2 cache', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.ALL_CODE_RD', 'L2 code requests', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.ALL_PF', 'Requests from L2 hardware prefetchers', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (191, 5, 'L1D_BLOCKS.BANK_CONFLICT_CYCLES', 'Cycles when dispatched loads are cancelled due to L1D bank conflicts with other load ports', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 15, 'RESOURCE_STALLS2.ALL_PRF_CONTROL', 'Resource stalls2 control structures full for physical registers', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE', 'Cycles with less than 2 uops delivered by the front end', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE', 'Cycles with less than 3 uops delivered by the front end', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 12, 'RESOURCE_STALLS2.ALL_FL_EMPTY', 'Cycles with either free list is empty', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 14, 'RESOURCE_STALLS.MEM_RS', 'Resource stalls due to memory buffers or Reservation Station (RS) being fully utilized', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 240, 'RESOURCE_STALLS.OOO_RSRC', 'Resource stalls due to Rob being full, FCSW, MXCSR and OTHER', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 79, 'RESOURCE_STALLS2.OOO_RSRC', 'Resource stalls out of order resources full', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 10, 'RESOURCE_STALLS.LB_SB', 'Resource stalls due to load or store buffers all being in use', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_CYCLES', 'Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 32, 'PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP_CYCLES', 'Performance sensitive flags-merging uops added by Sandy Bridge u-arch', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_GE_1_UOP_DELIV.CORE', 'Cycles when 1 or more uops were delivered to the by the front end.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_STALLS_COUNT', 'Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_4_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering 4 Uops', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_ANY_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering any Uop', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_4_UOPS', 'Cycles MITE is delivering 4 Uops', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_ANY_UOPS', 'Cycles MITE is delivering any Uop', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 10, 'DSB_FILL.ALL_CANCEL', 'Cases of cancelling valid Decode Stream Buffer (DSB) fill not because of exceeding way limit', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 30, 'FP_ASSIST.ANY', 'Cycles with any input/output SSE or FP assist', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 31, 'BACLEARS.ANY', 'Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO', 'Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK', 'Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 255, 'BR_INST_EXEC.ALL_BRANCHES', 'Speculative and retired branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 255, 'BR_MISP_EXEC.ALL_BRANCHES', 'Speculative and retired mispredicted macro conditional branches', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 60, 'IDQ.MITE_ALL_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.CORE_STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_4_UOPS', 'Cycles 4 Uops delivered by the LSD, but did not come from the decoder', 'core', 6);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_SWITCHES', 'Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer', 'core', 6);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.THREAD', 'Core cycles when the thread is not in halt state.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Reference cycles when the core is not in halt state.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_EXEC.NONTAKEN_CONDITIONAL', 'Not taken macro-conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 129, 'BR_INST_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired macro-conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 130, 'BR_INST_EXEC.TAKEN_DIRECT_JUMP', 'Taken speculative and retired macro-conditional branch instructions excluding calls and indirects', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 132, 'BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired indirect branches excluding calls and returns', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 136, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN', 'Taken speculative and retired indirect branches with return mnemonic', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 144, 'BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired direct near calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 160, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired indirect calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 193, 'BR_INST_EXEC.ALL_CONDITIONAL', 'Speculative and retired macro-conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 194, 'BR_INST_EXEC.ALL_DIRECT_JMP', 'Speculative and retired macro-unconditional branches excluding calls and indirects', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 196, 'BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Speculative and retired indirect branches excluding calls and returns', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 200, 'BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN', 'Speculative and retired indirect return branches.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 208, 'BR_INST_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired direct near calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 65, 'BR_MISP_EXEC.NONTAKEN_CONDITIONAL', 'Not taken speculative and retired mispredicted macro conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 129, 'BR_MISP_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired mispredicted macro conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 132, 'BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired mispredicted indirect branches excluding calls and returns', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 136, 'BR_MISP_EXEC.TAKEN_RETURN_NEAR', 'Taken speculative and retired mispredicted indirect branches with return mnemonic', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 144, 'BR_MISP_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted direct near calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 160, 'BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted indirect calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 193, 'BR_MISP_EXEC.ALL_CONDITIONAL', 'Speculative and retired mispredicted macro conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 196, 'BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Mispredicted indirect branches excluding calls and returns', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 208, 'BR_MISP_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired mispredicted direct near calls', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Thread cycles when thread is not in halt state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB.ITLB_FLUSH', 'Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Instruction cache, streaming buffer and victim cache misses', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.UOPS', 'Number of Uops delivered by the LSD.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_ACTIVE', 'Cycles Uops delivered by the LSD, but did not come from the decoder', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Stalls caused by changing prefix length of the instruction.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Stall cycles because IQ is full', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (23, 1, 'INSTS_WRITTEN_TO_IQ.INSTS', 'Valid instructions written to IQ per cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 2, 'IDQ.EMPTY', 'Instruction Decode Queue (IDQ) empty cycles', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_UOPS', 'Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 32, 'IDQ.MS_MITE_UOPS', 'Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CORE', 'Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE', 'Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE', 'Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 1, 'DSB2MITE_SWITCHES.COUNT', 'Decode Stream Buffer (DSB)-to-MITE switches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 2, 'DSB2MITE_SWITCHES.PENALTY_CYCLES', 'Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 2, 'DSB_FILL.OTHER_CANCEL', 'Cases of cancelling valid DSB fill not because of exceeding way limit', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 8, 'DSB_FILL.EXCEED_DSB_LINES', 'Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 64, 'INT_MISC.RAT_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the thread', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 32, 'PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP', 'Increments the number of flags-merge uops in flight each cycle.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 64, 'PARTIAL_RAT_STALLS.SLOW_LEA_WINDOW', 'Cycles with at least one slow LEA uop being allocated', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 128, 'PARTIAL_RAT_STALLS.MUL_SINGLE_UOP', 'Multiply packed/scalar single precision uops allocated', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource-related stall cycles', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 2, 'RESOURCE_STALLS.LB', 'Counts the cycles of stall due to lack of load buffers.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS', 'Cycles stalled due to no eligible RS entry available.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.SB', 'Cycles stalled due to no store buffers available. (not including draining form sync).', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB', 'Cycles stalled due to re-order buffer full.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 64, 'RESOURCE_STALLS2.BOB_FULL', 'Cycles when Allocator is stalled if BOB is full and new branch needs it', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_CYCLES', 'Cycles when Reservation Station (RS) is empty for the thread', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0', 'Unhalted core cycles when the thread is in ring 0', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0_TRANS', 'Number of intervals between processor halts while thread is in ring 0', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 2, 'CPL_CYCLES.RING123', 'Unhalted core cycles when thread is in rings 1, 2, or 3', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 32, 'ROB_MISC_EVENTS.LBR_INSERTS', 'Count cases of saving new LBR', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Counts the number of machine clears due to memory order conflicts.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-modifying code (SMC) detected.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 32, 'MACHINE_CLEARS.MASKMOV', 'This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Number of instructions retired. General Counter - architectural event', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ALL', 'Actually retired uops.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Cycles with less than 10 actually retired uops.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Conditional branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Direct and indirect near call instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'All (macro) branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.NEAR_RETURN', 'Return instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 16, 'BR_INST_RETIRED.NOT_TAKEN', 'Not taken branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 32, 'BR_INST_RETIRED.NEAR_TAKEN', 'Taken branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 64, 'BR_INST_RETIRED.FAR_BRANCH', 'Far branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES_PEBS', 'All (macro) branch instructions retired. (Precise Event - PEBS)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 2, 'BR_MISP_RETIRED.NEAR_CALL', 'Direct and indirect mispredicted near call instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'All mispredicted macro branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 16, 'BR_MISP_RETIRED.NOT_TAKEN', 'Mispredicted not taken branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 32, 'BR_MISP_RETIRED.TAKEN', 'Mispredicted taken branch instructions retired.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES_PEBS', 'Mispredicted macro branch instructions retired. (Precise Event - PEBS)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 2, 'OTHER_ASSISTS.ITLB_MISS_RETIRED', 'Retired instructions experiencing ITLB misses.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 8, 'OTHER_ASSISTS.AVX_STORE', 'Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 16, 'OTHER_ASSISTS.AVX_TO_SSE', 'Number of transitions from AVX-256 to legacy SSE when penalty applicable.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 32, 'OTHER_ASSISTS.SSE_TO_AVX', 'Number of transitions from SSE to AVX-256 when penalty applicable.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'FP_ASSIST.X87_OUTPUT', 'Number of X87 assists due to output value.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 4, 'FP_ASSIST.X87_INPUT', 'Number of X87 assists due to input value.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'FP_ASSIST.SIMD_OUTPUT', 'Number of SIMD FP assists due to Output values', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 16, 'FP_ASSIST.SIMD_INPUT', 'Number of SIMD FP assists due to input values', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4', 'Loads with latency value being above 4', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8', 'Loads with latency value being above 8', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16', 'Loads with latency value being above 16', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32', 'Loads with latency value being above 32', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64', 'Loads with latency value being above 64', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128', 'Loads with latency value being above 128', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256', 'Loads with latency value being above 256', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512', 'Loads with latency value being above 512', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 2, 'MEM_TRANS_RETIRED.PRECISE_STORE', 'Sample stores and collect precise store operation via PEBS record. PMC3 only. (Precise Event - PEBS)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 17, 'MEM_UOPS_RETIRED.STLB_MISS_LOADS', 'Load uops with true STLB miss retired to architected path.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 18, 'MEM_UOPS_RETIRED.STLB_MISS_STORES', 'Store uops with true STLB miss retired to architected path.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 33, 'MEM_UOPS_RETIRED.LOCK_LOADS', 'Load uops with locked access retired to architected path.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 65, 'MEM_UOPS_RETIRED.SPLIT_LOADS', 'Line-splitted load uops retired to architected path.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 66, 'MEM_UOPS_RETIRED.SPLIT_STORES', 'Line-splitted store uops retired to architected path.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 129, 'MEM_UOPS_RETIRED.ALL_LOADS', 'Load uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 130, 'MEM_UOPS_RETIRED.ALL_STORES', 'Store uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'MEM_LOAD_UOPS_RETIRED.L1_HIT', 'Retired load uops with L1 cache hits as data sources.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'MEM_LOAD_UOPS_RETIRED.L2_HIT', 'Retired load uops with L2 cache hits as data sources.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'MEM_LOAD_UOPS_RETIRED.LLC_HIT', 'Retired load uops which data sources were data hits in LLC without snoops required.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 32, 'MEM_LOAD_UOPS_RETIRED.LLC_MISS', 'Miss in last-level (L3) cache. Excludes Unknown data-source.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 64, 'MEM_LOAD_UOPS_RETIRED.HIT_LFB', 'Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS', 'Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT', 'Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM', 'Retired load uops which data sources were HitM responses from shared LLC.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE', 'Retired load uops which data sources were hits in LLC without snoops required.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 1, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM', 'Data from local DRAM either Snoop not needed or Snoop Miss (RspI)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 4, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM', 'Data from remote DRAM either Snoop not needed or Snoop Miss (RspI)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV_ACTIVE', 'Cycles when divider is busy executing divide operations', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV', 'Divide operations executed', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE', 'Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE', 'Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_PACKED_SINGLE', 'Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE', 'Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 1, 'SIMD_FP_256.PACKED_SINGLE', 'number of GSSE-256 Computational FP single precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 2, 'SIMD_FP_256.PACKED_DOUBLE', 'number of AVX-256 Computational FP double precision uops issued this cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_DISPATCHED.THREAD', 'Uops dispatched per thread', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_DISPATCHED.CORE', 'Uops dispatched from any thread', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0', 'Cycles per thread when uops are dispatched to port 0', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1', 'Cycles per thread when uops are dispatched to port 1', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4', 'Cycles per thread when uops are dispatched to port 4', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5', 'Cycles per thread when uops are dispatched to port 5', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 4, 'CYCLE_ACTIVITY.CYCLES_NO_DISPATCH', 'Each cycle there was no dispatch for this thread, increment by 1. Note this is connect to Umask 2. No dispatch can be deduced from the UOPS_EXECUTED event.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 2, 'CYCLE_ACTIVITY.CYCLES_L1D_PENDING', 'Each cycle there was a miss-pending demand load this thread, increment by 1. Note this is in DCU and connected to Umask 1. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 1, 'CYCLE_ACTIVITY.CYCLES_L2_PENDING', 'Each cycle there was a MLC-miss pending demand load this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 6, 'CYCLE_ACTIVITY.STALLS_L1D_PENDING', 'Each cycle there was a miss-pending demand load this thread and no uops dispatched, increment by 1. Note this is in DCU and connected to Umask 1 and 2. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 5, 'CYCLE_ACTIVITY.STALLS_L2_PENDING', 'Each cycle there was a MLC-miss pending demand load and no uops dispatched on this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0 and 2.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Cycle count for an Extended Page table walk. The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.MISS_CAUSES_A_WALK', 'Misses at all ITLB levels that cause page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'Misses in all ITLB levels that cause completed page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 16, 'ITLB_MISSES.STLB_HIT', 'Operations that miss the first ITLB level but hit the second and do not cause any page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK', 'Load misses in all DTLB levels that cause page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'Load misses at all DTLB levels that cause completed page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.STLB_HIT', 'Load operations that miss the first DTLB level but hit the second and do not cause page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_STORE_MISSES.MISS_CAUSES_A_WALK', 'Store misses in all DTLB levels that cause page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_STORE_MISSES.WALK_COMPLETED', 'Store misses in all DTLB levels that cause completed page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_STORE_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_STORE_MISSES.STLB_HIT', 'Store operations that miss the first TLB level but hit the second and do not cause page walks', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 1, 'TLB_FLUSH.DTLB_THREAD', 'DTLB flush attempts of the thread-specific entries', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 32, 'TLB_FLUSH.STLB_ANY', 'STLB flush attempts', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPLACEMENT', 'L1D data line replacements', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 2, 'L1D.ALLOCATED_IN_M', 'Allocated L1D data cache lines in M state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 4, 'L1D.EVICTION', 'L1D data cache lines in M state evicted due to replacement', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 8, 'L1D.ALL_M_REPLACEMENT', 'Cache lines in M state evicted out of L1D due to Snoop HitM or dirty line replacement', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING', 'L1D miss oustandings duration in cycles', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING_CYCLES', 'Cycles with L1D load Misses outstanding.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE.SW_PF', 'Not software-prefetch load dispatches that hit FB allocated for software prefetch', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 2, 'LOAD_HIT_PRE.HW_PF', 'Not software-prefetch load dispatches that hit FB allocated for hardware prefetch', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (78, 2, 'HW_PRE_REQ.DL1_MISS', 'Hardware Prefetch requests that miss the L1D cache. This accounts for both L1 streamer and IP-based (IPP) HW prefetchers. A request is being counted each time it access the cache & miss it, including if a block is applicable or if hit the Fill Buffer for', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION', 'Cycles when L1 and L2 are locked due to UC or split lock', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'LOCK_CYCLES.CACHE_LOCK_DURATION', 'Cycles when L1D is locked', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 1, 'LD_BLOCKS.DATA_UNKNOWN', 'Loads delayed due to SB blocks, preceding store operations with known addresses but unknown data', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LD_BLOCKS.STORE_FORWARD', 'Cases when loads get true Block-on-Store blocking code preventing store forwarding', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'LD_BLOCKS.NO_SR', 'This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 16, 'LD_BLOCKS.ALL_BLOCK', 'Number of cases where any load ends up with a valid block-code written to the load buffer (including blocks due to Memory Order Buffer (MOB), Data Cache Unit (DCU), TLB, but load has no DCU miss)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'LD_BLOCKS_PARTIAL.ADDRESS_ALIAS', 'False dependencies in MOB due to partial compare', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 8, 'LD_BLOCKS_PARTIAL.ALL_STA_BLOCK', 'This event counts the number of times that load operations are temporarily blocked because of older stores, with addresses that are not yet known. A load operation may incur more than one block of this type.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'MISALIGN_MEM_REF.LOADS', 'Speculative cache line split load uops dispatched to L1 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORES', 'Speculative cache line split STA uops dispatched to L1 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (182, 1, 'AGU_BYPASS_CANCEL.COUNT', 'This event counts executed load operations with all the following traits: 1. addressing of the format [base + offset], 2. the offset is between 1 and 2047, 3. the address specified in the base register is in one page and the address [base+offset] is in an', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD', 'Offcore outstanding Demand Data Read transactions in uncore queue.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD', 'Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO', 'Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD', 'Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD', 'Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND_DATA_RD', 'Demand Data Read requests sent to uncore', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND_CODE_RD', 'Cacheable and noncachaeble code read requests', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND_RFO', 'Demand RFO requests including regular RFOs, locks, ItoM', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ALL_DATA_RD', 'Demand and prefetch data reads', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (178, 1, 'OFFCORE_REQUESTS_BUFFER.SQ_FULL', 'Cases when offcore requests buffer cannot take more entries for core', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.DEMAND_DATA_RD_HIT', 'Demand Data Read requests that hit L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'RFO requests that hit L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'RFO requests that miss L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.CODE_RD_HIT', 'L2 cache hits when fetching instructions, code reads.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.CODE_RD_MISS', 'L2 cache misses when fetching instructions', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PF_HIT', 'Requests from the L2 hardware prefetchers that hit L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PF_MISS', 'Requests from the L2 hardware prefetchers that miss L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_STORE_LOCK_RQSTS.MISS', 'RFOs that miss cache lines', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 4, 'L2_STORE_LOCK_RQSTS.HIT_E', 'RFOs that hit cache lines in E state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_STORE_LOCK_RQSTS.HIT_M', 'RFOs that hit cache lines in M state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_STORE_LOCK_RQSTS.ALL', 'RFOs that access cache lines in any state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L2_L1D_WB_RQSTS.MISS', 'Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 2, 'L2_L1D_WB_RQSTS.HIT_S', 'Not rejected writebacks from L1D to L2 cache lines in S state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L2_L1D_WB_RQSTS.HIT_E', 'Not rejected writebacks from L1D to L2 cache lines in E state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L2_L1D_WB_RQSTS.HIT_M', 'Not rejected writebacks from L1D to L2 cache lines in M state', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L2_L1D_WB_RQSTS.ALL', 'Not rejected writebacks from L1D to L2 cache lines in any state.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANS.DEMAND_DATA_RD', 'Demand Data Read requests that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANS.RFO', 'RFO requests that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANS.CODE_RD', 'L2 cache accesses when fetching instructions', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANS.ALL_PF', 'L2 or LLC HW prefetches that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANS.L1D_WB', 'L1D writebacks that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANS.L2_FILL', 'L2 fill requests that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANS.L2_WB', 'L2 writebacks that access L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANS.ALL_REQUESTS', 'Transactions accessing L2 pipe', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 1, 'L2_LINES_IN.I', 'L2 cache lines in I state filling L2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S', 'L2 cache lines in S state filling L2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E', 'L2 cache lines in E state filling L2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ALL', 'L2 cache lines filling L2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'Clean L2 cache lines evicted by demand', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'Dirty L2 cache lines evicted by demand', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PF_CLEAN', 'Clean L2 cache lines evicted by L2 prefetch', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PF_DIRTY', 'Dirty L2 cache lines evicted by L2 prefetch', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 10, 'L2_LINES_OUT.DIRTY_ALL', 'Dirty L2 cache lines filling the L2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Core-originated cacheable demand requests missed LLC', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Core-originated cacheable demand requests that refer to LLC', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (244, 16, 'SQ_MISC.SPLIT_LOCK', 'Split locks in SQ', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_THREAD_UNHALTED.REF_XCLK', 'Cases when the core is unhalted at 100 Mhz', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Direct and indirect macro near call instructions retired (captured in ring 3).', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0_CORE', 'Cycles per core when uops are dispatched to port 0', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1_CORE', 'Cycles per core when uops are dispatched to port 1', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4_CORE', 'Cycles per core when uops are dispatched to port 4', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5_CORE', 'Cycles per core when uops are dispatched to port 5', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2', 'Cycles per thread when load or STA uops are dispatched to port 2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3', 'Cycles per thread when load or STA uops are dispatched to port 3', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_CYCLES', 'Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_OCCUR', 'Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2_CORE', 'Cycles per core when load or STA uops are dispatched to port 2', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3_CORE', 'Cycles per core when load or STA uops are dispatched to port 3', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.PREC_DIST', 'Instructions retired. (Precise Event - PEBS)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.ALL_DEMAND_DATA_RD', 'Demand Data Read requests', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.ALL_RFO', 'RFO requests to L2 cache', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.ALL_CODE_RD', 'L2 code requests', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.ALL_PF', 'Requests from L2 hardware prefetchers', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (191, 5, 'L1D_BLOCKS.BANK_CONFLICT_CYCLES', 'Cycles when dispatched loads are cancelled due to L1D bank conflicts with other load ports', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 15, 'RESOURCE_STALLS2.ALL_PRF_CONTROL', 'Resource stalls2 control structures full for physical registers', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE', 'Cycles with less than 2 uops delivered by the front end', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE', 'Cycles with less than 3 uops delivered by the front end', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 12, 'RESOURCE_STALLS2.ALL_FL_EMPTY', 'Cycles with either free list is empty', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 14, 'RESOURCE_STALLS.MEM_RS', 'Resource stalls due to memory buffers or Reservation Station (RS) being fully utilized', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 240, 'RESOURCE_STALLS.OOO_RSRC', 'Resource stalls due to Rob being full, FCSW, MXCSR and OTHER', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (91, 79, 'RESOURCE_STALLS2.OOO_RSRC', 'Resource stalls out of order resources full', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 10, 'RESOURCE_STALLS.LB_SB', 'Resource stalls due to load or store buffers all being in use', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_CYCLES', 'Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (89, 32, 'PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP_CYCLES', 'Performance sensitive flags-merging uops added by Sandy Bridge u-arch', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_GE_1_UOP_DELIV.CORE', 'Cycles when 1 or more uops were delivered to the by the front end.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_STALLS_COUNT', 'Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_4_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering 4 Uops', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_ANY_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering any Uop', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_4_UOPS', 'Cycles MITE is delivering 4 Uops', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_ANY_UOPS', 'Cycles MITE is delivering any Uop', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 10, 'DSB_FILL.ALL_CANCEL', 'Cases of cancelling valid Decode Stream Buffer (DSB) fill not because of exceeding way limit', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 30, 'FP_ASSIST.ANY', 'Cycles with any input/output SSE or FP assist', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 31, 'BACLEARS.ANY', 'Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO', 'Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK', 'Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 255, 'BR_INST_EXEC.ALL_BRANCHES', 'Speculative and retired branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 255, 'BR_MISP_EXEC.ALL_BRANCHES', 'Speculative and retired mispredicted macro conditional branches', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 60, 'IDQ.MITE_ALL_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.CORE_STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_4_UOPS', 'Cycles 4 Uops delivered by the LSD, but did not come from the decoder', 'core', 7);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_SWITCHES', 'Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer', 'core', 7);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.THREAD', 'Core cycles when the core is not in halt state.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Reference cycles when the core is not in halt state.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LD_BLOCKS.STORE_FORWARD', 'Cases when loads get true Block-on-Store blocking code preventing store forwarding', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'LD_BLOCKS.NO_SR', 'This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'MISALIGN_MEM_REF.LOADS', 'Speculative cache line split load uops dispatched to L1 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORES', 'Speculative cache line split STA uops dispatched to L1 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'LD_BLOCKS_PARTIAL.ADDRESS_ALIAS', 'False dependencies in MOB due to partial compare on address', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 130, 'DTLB_LOAD_MISSES.DEMAND_LD_WALK_COMPLETED', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 132, 'DTLB_LOAD_MISSES.DEMAND_LD_WALK_DURATION', 'Demand load cycles page miss handler (PMH) is busy with this walk.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 136, 'DTLB_LOAD_MISSES.LARGE_PAGE_WALK_COMPLETED', 'Page walk for a large page completed for Demand load', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_CYCLES', 'Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_STALLS_COUNT', 'Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 16, 'UOPS_ISSUED.FLAGS_MERGE', 'Number of flags-merge uops being allocated.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 32, 'UOPS_ISSUED.SLOW_LEA', 'Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 64, 'UOPS_ISSUED.SINGLE_MUL', 'Number of Multiply packed/scalar single precision uops allocated', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE', 'Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE', 'Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_PACKED_SINGLE', 'Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE', 'Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 1, 'SIMD_FP_256.PACKED_SINGLE', 'number of GSSE-256 Computational FP single precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 2, 'SIMD_FP_256.PACKED_DOUBLE', 'number of AVX-256 Computational FP double precision uops issued this cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV_ACTIVE', 'Cycles when divider is busy executing divide operations', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 4, 'ARITH.FPU_DIV', 'Divide operations executed', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.DEMAND_DATA_RD_HIT', 'Demand Data Read requests that hit L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'RFO requests that hit L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'RFO requests that miss L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.CODE_RD_HIT', 'L2 cache hits when fetching instructions, code reads.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.CODE_RD_MISS', 'L2 cache misses when fetching instructions', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PF_HIT', 'Requests from the L2 hardware prefetchers that hit L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PF_MISS', 'Requests from the L2 hardware prefetchers that miss L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.ALL_DEMAND_DATA_RD', 'Demand Data Read requests', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.ALL_RFO', 'RFO requests to L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.ALL_CODE_RD', 'L2 code requests', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.ALL_PF', 'Requests from L2 hardware prefetchers', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_STORE_LOCK_RQSTS.MISS', 'RFOs that miss cache lines', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_STORE_LOCK_RQSTS.HIT_M', 'RFOs that hit cache lines in M state', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_STORE_LOCK_RQSTS.ALL', 'RFOs that access cache lines in any state', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L2_L1D_WB_RQSTS.MISS', 'Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L2_L1D_WB_RQSTS.HIT_E', 'Not rejected writebacks from L1D to L2 cache lines in E state', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L2_L1D_WB_RQSTS.HIT_M', 'Not rejected writebacks from L1D to L2 cache lines in M state', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L2_L1D_WB_RQSTS.ALL', 'Not rejected writebacks from L1D to L2 cache lines in any state.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Core-originated cacheable demand requests missed LLC', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Core-originated cacheable demand requests that refer to LLC', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Thread cycles when thread is not in halt state', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_THREAD_UNHALTED.REF_XCLK', 'Cases when the core is unhalted at 100 Mhz', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING', 'L1D miss oustandings duration in cycles', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING_CYCLES', 'Cycles with L1D load Misses outstanding.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_STORE_MISSES.MISS_CAUSES_A_WALK', 'Store misses in all DTLB levels that cause page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_STORE_MISSES.WALK_COMPLETED', 'Store misses in all DTLB levels that cause completed page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_STORE_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_STORE_MISSES.STLB_HIT', 'Store operations that miss the first TLB level but hit the second and do not cause page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE.SW_PF', 'Not software-prefetch load dispatches that hit FB allocated for software prefetch', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 2, 'LOAD_HIT_PRE.HW_PF', 'Not software-prefetch load dispatches that hit FB allocated for hardware prefetch', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Cycle count for an Extended Page table walk. The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPLACEMENT', 'L1D data line replacements', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 4, 'MOVE_ELIMINATION.INT_NOT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were not eliminated.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 8, 'MOVE_ELIMINATION.SIMD_NOT_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were not eliminated.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 1, 'MOVE_ELIMINATION.INT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were eliminated.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 2, 'MOVE_ELIMINATION.SIMD_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were eliminated.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0', 'Unhalted core cycles when the thread is in ring 0', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 2, 'CPL_CYCLES.RING123', 'Unhalted core cycles when thread is in rings 1, 2, or 3', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0_TRANS', 'Number of intervals between processor halts while thread is in ring 0', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_CYCLES', 'Cycles when Reservation Station (RS) is empty for the thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (95, 4, 'DTLB_LOAD_MISSES.STLB_HIT', 'Load operations that miss the first DTLB level but hit the second and do not cause page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD', 'Offcore outstanding Demand Data Read transactions in uncore queue.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD', 'Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO', 'Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD', 'Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD', 'Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD', 'Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO', 'Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION', 'Cycles when L1 and L2 are locked due to UC or split lock', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'LOCK_CYCLES.CACHE_LOCK_DURATION', 'Cycles when L1D is locked', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 2, 'IDQ.EMPTY', 'Instruction Decode Queue (IDQ) empty cycles', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_UOPS', 'Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 32, 'IDQ.MS_MITE_UOPS', 'Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_CYCLES', 'Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_OCCUR', 'Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_4_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering 4 Uops', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_ANY_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering any Uop', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_4_UOPS', 'Cycles MITE is delivering 4 Uops', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_ANY_UOPS', 'Cycles MITE is delivering any Uop', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 60, 'IDQ.MITE_ALL_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Instruction cache, streaming buffer and victim cache misses', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'ICACHE.IFETCH_STALL', 'Cycles where a code-fetch stalled due to L1 instruction-cache miss or an iTLB miss', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.MISS_CAUSES_A_WALK', 'Misses at all ITLB levels that cause page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'Misses in all ITLB levels that cause completed page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 16, 'ITLB_MISSES.STLB_HIT', 'Operations that miss the first ITLB level but hit the second and do not cause any page walks', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 128, 'ITLB_MISSES.LARGE_PAGE_WALK_COMPLETED', 'Completed page walks in ITLB due to STLB load misses for large pages', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Stalls caused by changing prefix length of the instruction.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Stall cycles because IQ is full', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_EXEC.NONTAKEN_CONDITIONAL', 'Not taken macro-conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 129, 'BR_INST_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired macro-conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 130, 'BR_INST_EXEC.TAKEN_DIRECT_JUMP', 'Taken speculative and retired macro-conditional branch instructions excluding calls and indirects', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 132, 'BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired indirect branches excluding calls and returns', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 136, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN', 'Taken speculative and retired indirect branches with return mnemonic', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 144, 'BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired direct near calls', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 160, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired indirect calls', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 193, 'BR_INST_EXEC.ALL_CONDITIONAL', 'Speculative and retired macro-conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 194, 'BR_INST_EXEC.ALL_DIRECT_JMP', 'Speculative and retired macro-unconditional branches excluding calls and indirects', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 196, 'BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Speculative and retired indirect branches excluding calls and returns', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 200, 'BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN', 'Speculative and retired indirect return branches.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 208, 'BR_INST_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired direct near calls', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 255, 'BR_INST_EXEC.ALL_BRANCHES', 'Speculative and retired branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 65, 'BR_MISP_EXEC.NONTAKEN_CONDITIONAL', 'Not taken speculative and retired mispredicted macro conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 129, 'BR_MISP_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired mispredicted macro conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 132, 'BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired mispredicted indirect branches excluding calls and returns', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 136, 'BR_MISP_EXEC.TAKEN_RETURN_NEAR', 'Taken speculative and retired mispredicted indirect branches with return mnemonic', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 160, 'BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted indirect calls', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 193, 'BR_MISP_EXEC.ALL_CONDITIONAL', 'Speculative and retired mispredicted macro conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 196, 'BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Mispredicted indirect branches excluding calls and returns', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 255, 'BR_MISP_EXEC.ALL_BRANCHES', 'Speculative and retired mispredicted macro conditional branches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CORE', 'Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE', 'Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE', 'Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE', 'Cycles with less than 2 uops delivered by the front end.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE', 'Cycles with less than 3 uops delivered by the front end.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK', 'Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0', 'Cycles per thread when uops are dispatched to port 0', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1', 'Cycles per thread when uops are dispatched to port 1', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4', 'Cycles per thread when uops are dispatched to port 4', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5', 'Cycles per thread when uops are dispatched to port 5', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0_CORE', 'Cycles per core when uops are dispatched to port 0', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1_CORE', 'Cycles per core when uops are dispatched to port 1', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4_CORE', 'Cycles per core when uops are dispatched to port 4', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5_CORE', 'Cycles per core when uops are dispatched to port 5', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2', 'Cycles per thread when load or STA uops are dispatched to port 2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3', 'Cycles per thread when load or STA uops are dispatched to port 3', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2_CORE', 'Uops dispatched to port 2, loads and stores per core (speculative and retired)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3_CORE', 'Cycles per core when load or STA uops are dispatched to port 3', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource-related stall cycles', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS', 'Cycles stalled due to no eligible RS entry available.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.SB', 'Cycles stalled due to no store buffers available. (not including draining form sync).', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB', 'Cycles stalled due to re-order buffer full.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 1, 'CYCLE_ACTIVITY.CYCLES_L2_PENDING', 'Cycles with pending L2 cache miss loads.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 8, 'CYCLE_ACTIVITY.CYCLES_L1D_PENDING', 'Cycles with pending L1 cache miss loads.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 2, 'CYCLE_ACTIVITY.CYCLES_LDM_PENDING', 'Cycles with pending memory loads.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 4, 'CYCLE_ACTIVITY.CYCLES_NO_EXECUTE', 'Total execution stalls', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 5, 'CYCLE_ACTIVITY.STALLS_L2_PENDING', 'Execution stalls due to L2 cache misses.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 6, 'CYCLE_ACTIVITY.STALLS_LDM_PENDING', 'Execution stalls due to memory subsystem.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 12, 'CYCLE_ACTIVITY.STALLS_L1D_PENDING', 'Execution stalls due to L1 data cache misses', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.UOPS', 'Number of Uops delivered by the LSD.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_ACTIVE', 'Cycles Uops delivered by the LSD, but did not come from the decoder', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 1, 'DSB2MITE_SWITCHES.COUNT', 'Decode Stream Buffer (DSB)-to-MITE switches', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 2, 'DSB2MITE_SWITCHES.PENALTY_CYCLES', 'Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 8, 'DSB_FILL.EXCEED_DSB_LINES', 'Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB.ITLB_FLUSH', 'Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND_DATA_RD', 'Demand Data Read requests sent to uncore', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND_CODE_RD', 'Cacheable and noncachaeble code read requests', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND_RFO', 'Demand RFO requests including regular RFOs, locks, ItoM', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ALL_DATA_RD', 'Demand and prefetch data reads', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.THREAD', 'Counts the number of uops to be executed per-thread each cycle.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.CORE', 'Number of uops executed on the core.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.STALL_CYCLES', 'Counts number of cycles no uops were dispatched to be executed on this thread.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 1, 'TLB_FLUSH.DTLB_THREAD', 'DTLB flush attempts of the thread-specific entries', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 32, 'TLB_FLUSH.STLB_ANY', 'STLB flush attempts', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Number of instructions retired. General Counter - architectural event', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.PREC_DIST', 'Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 8, 'OTHER_ASSISTS.AVX_STORE', 'Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 16, 'OTHER_ASSISTS.AVX_TO_SSE', 'Number of transitions from AVX-256 to legacy SSE when penalty applicable.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 32, 'OTHER_ASSISTS.SSE_TO_AVX', 'Number of transitions from SSE to AVX-256 when penalty applicable.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 128, 'OTHER_ASSISTS.ANY_WB_ASSIST', 'Number of times any microcode assist is invoked by HW upon uop writeback.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ALL', 'Actually retired uops.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Cycles with less than 10 actually retired uops.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.CORE_STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Counts the number of machine clears due to memory order conflicts.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-modifying code (SMC) detected.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 32, 'MACHINE_CLEARS.MASKMOV', 'This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Conditional branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Direct and indirect near call instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'All (macro) branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.NEAR_RETURN', 'Return instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 16, 'BR_INST_RETIRED.NOT_TAKEN', 'Not taken branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 32, 'BR_INST_RETIRED.NEAR_TAKEN', 'Taken branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 64, 'BR_INST_RETIRED.FAR_BRANCH', 'Far branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES_PEBS', 'All (macro) branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Direct and indirect macro near call instructions retired (captured in ring 3).', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'All mispredicted macro branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 32, 'BR_MISP_RETIRED.NEAR_TAKEN', 'number of near branch instructions retired that were mispredicted and taken.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES_PEBS', 'Mispredicted macro branch instructions retired.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'FP_ASSIST.X87_OUTPUT', 'Number of X87 assists due to output value.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 4, 'FP_ASSIST.X87_INPUT', 'Number of X87 assists due to input value.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'FP_ASSIST.SIMD_OUTPUT', 'Number of SIMD FP assists due to Output values', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 16, 'FP_ASSIST.SIMD_INPUT', 'Number of SIMD FP assists due to input values', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 30, 'FP_ASSIST.ANY', 'Cycles with any input/output SSE or FP assist', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 32, 'ROB_MISC_EVENTS.LBR_INSERTS', 'Count cases of saving new LBR', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 2, 'MEM_TRANS_RETIRED.PRECISE_STORE', 'Sample stores and collect precise store operation via PEBS record. PMC3 only.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4', 'Loads with latency value being above 4', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8', 'Loads with latency value being above 8', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16', 'Loads with latency value being above 16', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32', 'Loads with latency value being above 32', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64', 'Loads with latency value being above 64', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128', 'Loads with latency value being above 128', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256', 'Loads with latency value being above 256', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512', 'Loads with latency value being above 512', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 17, 'MEM_UOPS_RETIRED.STLB_MISS_LOADS', 'Load uops with true STLB miss retired to architected path.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 18, 'MEM_UOPS_RETIRED.STLB_MISS_STORES', 'Store uops with true STLB miss retired to architected path.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 33, 'MEM_UOPS_RETIRED.LOCK_LOADS', 'Load uops with locked access retired to architected path.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 65, 'MEM_UOPS_RETIRED.SPLIT_LOADS', 'Line-splitted load uops retired to architected path.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 66, 'MEM_UOPS_RETIRED.SPLIT_STORES', 'Line-splitted store uops retired to architected path.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 129, 'MEM_UOPS_RETIRED.ALL_LOADS', 'Load uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 130, 'MEM_UOPS_RETIRED.ALL_STORES', 'Store uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'MEM_LOAD_UOPS_RETIRED.L1_HIT', 'Retired load uops with L1 cache hits as data sources.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'MEM_LOAD_UOPS_RETIRED.L2_HIT', 'Retired load uops with L2 cache hits as data sources.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'MEM_LOAD_UOPS_RETIRED.LLC_HIT', 'Retired load uops which data sources were data hits in LLC without snoops required.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'MEM_LOAD_UOPS_RETIRED.L1_MISS', 'Retired load uops which data sources following L1 data-cache miss', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 16, 'MEM_LOAD_UOPS_RETIRED.L2_MISS', 'Miss in mid-level (L2) cache. Excludes Unknown data-source.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 32, 'MEM_LOAD_UOPS_RETIRED.LLC_MISS', 'Miss in last-level (L3) cache. Excludes Unknown data-source.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 64, 'MEM_LOAD_UOPS_RETIRED.HIT_LFB', 'Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS', 'Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT', 'Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM', 'Retired load uops which data sources were HitM responses from shared LLC.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE', 'Retired load uops which data sources were hits in LLC without snoops required.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 3, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM', 'Retired load uops whose data source was local DRAM (Snoop not needed, Snoop Miss, or Snoop Hit data not forwarded)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 12, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM', 'Retired load uops whose data source was remote DRAM (Snoop not needed, Snoop Miss, or Snoop Hit data not forwarded)', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 16, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_HITM', 'Remote cache HITM', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 32, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_FWD', 'Data forwarded from remote cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 31, 'BACLEARS.ANY', 'Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANS.DEMAND_DATA_RD', 'Demand Data Read requests that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANS.RFO', 'RFO requests that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANS.CODE_RD', 'L2 cache accesses when fetching instructions', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANS.ALL_PF', 'L2 or LLC HW prefetches that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANS.L1D_WB', 'L1D writebacks that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANS.L2_FILL', 'L2 fill requests that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANS.L2_WB', 'L2 writebacks that access L2 cache', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANS.ALL_REQUESTS', 'Transactions accessing L2 pipe', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 1, 'L2_LINES_IN.I', 'L2 cache lines in I state filling L2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S', 'L2 cache lines in S state filling L2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E', 'L2 cache lines in E state filling L2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ALL', 'L2 cache lines filling L2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'Clean L2 cache lines evicted by demand', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'Dirty L2 cache lines evicted by demand', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PF_CLEAN', 'Clean L2 cache lines evicted by L2 prefetch', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PF_DIRTY', 'Dirty L2 cache lines evicted by L2 prefetch', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 10, 'L2_LINES_OUT.DIRTY_ALL', 'Dirty L2 cache lines filling the L2', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC', 'Cycles where at least 1 uop was executed per-thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC', 'Cycles where at least 2 uops were executed per-thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC', 'Cycles where at least 3 uops were executed per-thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC', 'Cycles where at least 4 uops were executed per-thread', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 129, 'DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes an page walk of any page size.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 130, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 132, 'DTLB_LOAD_MISSES.WALK_DURATION', 'Demand load cycles page miss handler (PMH) is busy with this walk.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_END', 'Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.COUNT', 'Number of machine clears (nukes) of any type.', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_4_UOPS', 'Cycles 4 Uops delivered by the LSD, but did not come from the decoder', 'core', 8);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_SWITCHES', 'Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer', 'core', 8);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.THREAD', 'Core cycles when the core is not in halt state.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Reference cycles when the core is not in halt state.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LD_BLOCKS.STORE_FORWARD', 'Cases when loads get true Block-on-Store blocking code preventing store forwarding', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'LD_BLOCKS.NO_SR', 'This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'MISALIGN_MEM_REF.LOADS', 'Speculative cache line split load uops dispatched to L1 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORES', 'Speculative cache line split STA uops dispatched to L1 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'LD_BLOCKS_PARTIAL.ADDRESS_ALIAS', 'False dependencies in MOB due to partial compare on address', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 136, 'DTLB_LOAD_MISSES.LARGE_PAGE_WALK_COMPLETED', 'Page walk for a large page completed for Demand load', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_CYCLES', 'Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_STALLS_COUNT', 'Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 16, 'UOPS_ISSUED.FLAGS_MERGE', 'Number of flags-merge uops being allocated.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 32, 'UOPS_ISSUED.SLOW_LEA', 'Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 64, 'UOPS_ISSUED.SINGLE_MUL', 'Number of Multiply packed/scalar single precision uops allocated', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'FP_COMP_OPS_EXE.X87', 'Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 16, 'FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE', 'Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 32, 'FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE', 'Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 64, 'FP_COMP_OPS_EXE.SSE_PACKED_SINGLE', 'Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 128, 'FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE', 'Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 1, 'SIMD_FP_256.PACKED_SINGLE', 'number of GSSE-256 Computational FP single precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 2, 'SIMD_FP_256.PACKED_DOUBLE', 'number of AVX-256 Computational FP double precision uops issued this cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'ARITH.FPU_DIV_ACTIVE', 'Cycles when divider is busy executing divide operations', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 4, 'ARITH.FPU_DIV', 'Divide operations executed', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 1, 'L2_RQSTS.DEMAND_DATA_RD_HIT', 'Demand Data Read requests that hit L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 4, 'L2_RQSTS.RFO_HIT', 'RFO requests that hit L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 8, 'L2_RQSTS.RFO_MISS', 'RFO requests that miss L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 16, 'L2_RQSTS.CODE_RD_HIT', 'L2 cache hits when fetching instructions, code reads.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 32, 'L2_RQSTS.CODE_RD_MISS', 'L2 cache misses when fetching instructions', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_RQSTS.PF_HIT', 'Requests from the L2 hardware prefetchers that hit L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 128, 'L2_RQSTS.PF_MISS', 'Requests from the L2 hardware prefetchers that miss L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 3, 'L2_RQSTS.ALL_DEMAND_DATA_RD', 'Demand Data Read requests', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 12, 'L2_RQSTS.ALL_RFO', 'RFO requests to L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.ALL_CODE_RD', 'L2 code requests', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 192, 'L2_RQSTS.ALL_PF', 'Requests from L2 hardware prefetchers', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 1, 'L2_STORE_LOCK_RQSTS.MISS', 'RFOs that miss cache lines', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 8, 'L2_STORE_LOCK_RQSTS.HIT_M', 'RFOs that hit cache lines in M state', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 15, 'L2_STORE_LOCK_RQSTS.ALL', 'RFOs that access cache lines in any state', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 1, 'L2_L1D_WB_RQSTS.MISS', 'Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 4, 'L2_L1D_WB_RQSTS.HIT_E', 'Not rejected writebacks from L1D to L2 cache lines in E state', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 8, 'L2_L1D_WB_RQSTS.HIT_M', 'Not rejected writebacks from L1D to L2 cache lines in M state', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 15, 'L2_L1D_WB_RQSTS.ALL', 'Not rejected writebacks from L1D to L2 cache lines in any state.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Core-originated cacheable demand requests missed LLC', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Core-originated cacheable demand requests that refer to LLC', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Thread cycles when thread is not in halt state', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_THREAD_UNHALTED.REF_XCLK', 'Cases when the core is unhalted at 100 Mhz', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING', 'L1D miss oustandings duration in cycles', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING_CYCLES', 'Cycles with L1D load Misses outstanding.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_STORE_MISSES.MISS_CAUSES_A_WALK', 'Store misses in all DTLB levels that cause page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_STORE_MISSES.WALK_COMPLETED', 'Store misses in all DTLB levels that cause completed page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_STORE_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_STORE_MISSES.STLB_HIT', 'Store operations that miss the first TLB level but hit the second and do not cause page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE.SW_PF', 'Not software-prefetch load dispatches that hit FB allocated for software prefetch', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 2, 'LOAD_HIT_PRE.HW_PF', 'Not software-prefetch load dispatches that hit FB allocated for hardware prefetch', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Cycle count for an Extended Page table walk. The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPLACEMENT', 'L1D data line replacements', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 4, 'MOVE_ELIMINATION.INT_NOT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were not eliminated.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 8, 'MOVE_ELIMINATION.SIMD_NOT_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were not eliminated.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 1, 'MOVE_ELIMINATION.INT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were eliminated.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 2, 'MOVE_ELIMINATION.SIMD_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were eliminated.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0', 'Unhalted core cycles when the thread is in ring 0', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 2, 'CPL_CYCLES.RING123', 'Unhalted core cycles when thread is in rings 1, 2, or 3', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0_TRANS', 'Number of intervals between processor halts while thread is in ring 0', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_CYCLES', 'Cycles when Reservation Station (RS) is empty for the thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (95, 4, 'DTLB_LOAD_MISSES.STLB_HIT', 'Load operations that miss the first DTLB level but hit the second and do not cause page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD', 'Offcore outstanding Demand Data Read transactions in uncore queue.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD', 'Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO', 'Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD', 'Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD', 'Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD', 'Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO', 'Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION', 'Cycles when L1 and L2 are locked due to UC or split lock', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'LOCK_CYCLES.CACHE_LOCK_DURATION', 'Cycles when L1D is locked', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 2, 'IDQ.EMPTY', 'Instruction Decode Queue (IDQ) empty cycles', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_UOPS', 'Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 32, 'IDQ.MS_MITE_UOPS', 'Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_CYCLES', 'Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_OCCUR', 'Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_4_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering 4 Uops', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_ANY_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering any Uop', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_4_UOPS', 'Cycles MITE is delivering 4 Uops', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_ANY_UOPS', 'Cycles MITE is delivering any Uop', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 60, 'IDQ.MITE_ALL_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Instruction cache, streaming buffer and victim cache misses', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'ICACHE.IFETCH_STALL', 'Cycles where a code-fetch stalled due to L1 instruction-cache miss or an iTLB miss', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.MISS_CAUSES_A_WALK', 'Misses at all ITLB levels that cause page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED', 'Misses in all ITLB levels that cause completed page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 16, 'ITLB_MISSES.STLB_HIT', 'Operations that miss the first ITLB level but hit the second and do not cause any page walks', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 128, 'ITLB_MISSES.LARGE_PAGE_WALK_COMPLETED', 'Completed page walks in ITLB due to STLB load misses for large pages', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Stalls caused by changing prefix length of the instruction.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Stall cycles because IQ is full', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_EXEC.NONTAKEN_CONDITIONAL', 'Not taken macro-conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 129, 'BR_INST_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired macro-conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 130, 'BR_INST_EXEC.TAKEN_DIRECT_JUMP', 'Taken speculative and retired macro-conditional branch instructions excluding calls and indirects', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 132, 'BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired indirect branches excluding calls and returns', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 136, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN', 'Taken speculative and retired indirect branches with return mnemonic', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 144, 'BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired direct near calls', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 160, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired indirect calls', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 193, 'BR_INST_EXEC.ALL_CONDITIONAL', 'Speculative and retired macro-conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 194, 'BR_INST_EXEC.ALL_DIRECT_JMP', 'Speculative and retired macro-unconditional branches excluding calls and indirects', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 196, 'BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Speculative and retired indirect branches excluding calls and returns', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 200, 'BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN', 'Speculative and retired indirect return branches.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 208, 'BR_INST_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired direct near calls', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 255, 'BR_INST_EXEC.ALL_BRANCHES', 'Speculative and retired branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 65, 'BR_MISP_EXEC.NONTAKEN_CONDITIONAL', 'Not taken speculative and retired mispredicted macro conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 129, 'BR_MISP_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired mispredicted macro conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 132, 'BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired mispredicted indirect branches excluding calls and returns', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 136, 'BR_MISP_EXEC.TAKEN_RETURN_NEAR', 'Taken speculative and retired mispredicted indirect branches with return mnemonic', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 160, 'BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted indirect calls', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 193, 'BR_MISP_EXEC.ALL_CONDITIONAL', 'Speculative and retired mispredicted macro conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 196, 'BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Mispredicted indirect branches excluding calls and returns', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 255, 'BR_MISP_EXEC.ALL_BRANCHES', 'Speculative and retired mispredicted macro conditional branches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CORE', 'Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE', 'Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE', 'Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE', 'Cycles with less than 2 uops delivered by the front end.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE', 'Cycles with less than 3 uops delivered by the front end.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK', 'Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0', 'Cycles per thread when uops are dispatched to port 0', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1', 'Cycles per thread when uops are dispatched to port 1', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4', 'Cycles per thread when uops are dispatched to port 4', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5', 'Cycles per thread when uops are dispatched to port 5', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_DISPATCHED_PORT.PORT_0_CORE', 'Cycles per core when uops are dispatched to port 0', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_DISPATCHED_PORT.PORT_1_CORE', 'Cycles per core when uops are dispatched to port 1', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_DISPATCHED_PORT.PORT_4_CORE', 'Cycles per core when uops are dispatched to port 4', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_DISPATCHED_PORT.PORT_5_CORE', 'Cycles per core when uops are dispatched to port 5', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2', 'Cycles per thread when load or STA uops are dispatched to port 2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3', 'Cycles per thread when load or STA uops are dispatched to port 3', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 12, 'UOPS_DISPATCHED_PORT.PORT_2_CORE', 'Uops dispatched to port 2, loads and stores per core (speculative and retired)', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 48, 'UOPS_DISPATCHED_PORT.PORT_3_CORE', 'Cycles per core when load or STA uops are dispatched to port 3', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource-related stall cycles', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS', 'Cycles stalled due to no eligible RS entry available.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.SB', 'Cycles stalled due to no store buffers available. (not including draining form sync).', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB', 'Cycles stalled due to re-order buffer full.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 1, 'CYCLE_ACTIVITY.CYCLES_L2_PENDING', 'Cycles with pending L2 cache miss loads.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 8, 'CYCLE_ACTIVITY.CYCLES_L1D_PENDING', 'Cycles with pending L1 cache miss loads.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 2, 'CYCLE_ACTIVITY.CYCLES_LDM_PENDING', 'Cycles with pending memory loads.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 4, 'CYCLE_ACTIVITY.CYCLES_NO_EXECUTE', 'Total execution stalls', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 5, 'CYCLE_ACTIVITY.STALLS_L2_PENDING', 'Execution stalls due to L2 cache misses.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 6, 'CYCLE_ACTIVITY.STALLS_LDM_PENDING', 'Execution stalls due to memory subsystem.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 12, 'CYCLE_ACTIVITY.STALLS_L1D_PENDING', 'Execution stalls due to L1 data cache misses', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.UOPS', 'Number of Uops delivered by the LSD.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_ACTIVE', 'Cycles Uops delivered by the LSD, but did not come from the decoder', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 1, 'DSB2MITE_SWITCHES.COUNT', 'Decode Stream Buffer (DSB)-to-MITE switches', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 2, 'DSB2MITE_SWITCHES.PENALTY_CYCLES', 'Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (172, 8, 'DSB_FILL.EXCEED_DSB_LINES', 'Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB.ITLB_FLUSH', 'Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND_DATA_RD', 'Demand Data Read requests sent to uncore', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND_CODE_RD', 'Cacheable and noncachaeble code read requests', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND_RFO', 'Demand RFO requests including regular RFOs, locks, ItoM', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ALL_DATA_RD', 'Demand and prefetch data reads', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.THREAD', 'Counts the number of uops to be executed per-thread each cycle.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.CORE', 'Number of uops executed on the core.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.STALL_CYCLES', 'Counts number of cycles no uops were dispatched to be executed on this thread.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 1, 'TLB_FLUSH.DTLB_THREAD', 'DTLB flush attempts of the thread-specific entries', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 32, 'TLB_FLUSH.STLB_ANY', 'STLB flush attempts', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (190, 1, 'PAGE_WALKS.LLC_MISS', 'Number of any page walk that had a miss in LLC.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Number of instructions retired. General Counter - architectural event', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.PREC_DIST', 'Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 8, 'OTHER_ASSISTS.AVX_STORE', 'Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 16, 'OTHER_ASSISTS.AVX_TO_SSE', 'Number of transitions from AVX-256 to legacy SSE when penalty applicable.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 32, 'OTHER_ASSISTS.SSE_TO_AVX', 'Number of transitions from SSE to AVX-256 when penalty applicable.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 128, 'OTHER_ASSISTS.ANY_WB_ASSIST', 'Number of times any microcode assist is invoked by HW upon uop writeback.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ALL', 'Actually retired uops.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Cycles with less than 10 actually retired uops.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.CORE_STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Counts the number of machine clears due to memory order conflicts.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-modifying code (SMC) detected.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 32, 'MACHINE_CLEARS.MASKMOV', 'This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Conditional branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Direct and indirect near call instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'All (macro) branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.NEAR_RETURN', 'Return instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 16, 'BR_INST_RETIRED.NOT_TAKEN', 'Not taken branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 32, 'BR_INST_RETIRED.NEAR_TAKEN', 'Taken branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 64, 'BR_INST_RETIRED.FAR_BRANCH', 'Far branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES_PEBS', 'All (macro) branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Direct and indirect macro near call instructions retired (captured in ring 3).', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'All mispredicted macro branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 32, 'BR_MISP_RETIRED.NEAR_TAKEN', 'number of near branch instructions retired that were mispredicted and taken.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES_PEBS', 'Mispredicted macro branch instructions retired.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'FP_ASSIST.X87_OUTPUT', 'Number of X87 assists due to output value.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 4, 'FP_ASSIST.X87_INPUT', 'Number of X87 assists due to input value.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'FP_ASSIST.SIMD_OUTPUT', 'Number of SIMD FP assists due to Output values', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 16, 'FP_ASSIST.SIMD_INPUT', 'Number of SIMD FP assists due to input values', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 30, 'FP_ASSIST.ANY', 'Cycles with any input/output SSE or FP assist', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 32, 'ROB_MISC_EVENTS.LBR_INSERTS', 'Count cases of saving new LBR', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 2, 'MEM_TRANS_RETIRED.PRECISE_STORE', 'Sample stores and collect precise store operation via PEBS record. PMC3 only.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4', 'Loads with latency value being above 4', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8', 'Loads with latency value being above 8', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16', 'Loads with latency value being above 16', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32', 'Loads with latency value being above 32', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64', 'Loads with latency value being above 64', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128', 'Loads with latency value being above 128', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256', 'Loads with latency value being above 256', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512', 'Loads with latency value being above 512', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 17, 'MEM_UOPS_RETIRED.STLB_MISS_LOADS', 'Load uops with true STLB miss retired to architected path.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 18, 'MEM_UOPS_RETIRED.STLB_MISS_STORES', 'Store uops with true STLB miss retired to architected path.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 33, 'MEM_UOPS_RETIRED.LOCK_LOADS', 'Load uops with locked access retired to architected path.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 65, 'MEM_UOPS_RETIRED.SPLIT_LOADS', 'Line-splitted load uops retired to architected path.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 66, 'MEM_UOPS_RETIRED.SPLIT_STORES', 'Line-splitted store uops retired to architected path.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 129, 'MEM_UOPS_RETIRED.ALL_LOADS', 'Load uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 130, 'MEM_UOPS_RETIRED.ALL_STORES', 'Store uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'MEM_LOAD_UOPS_RETIRED.L1_HIT', 'Retired load uops with L1 cache hits as data sources.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'MEM_LOAD_UOPS_RETIRED.L2_HIT', 'Retired load uops with L2 cache hits as data sources.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'MEM_LOAD_UOPS_RETIRED.LLC_HIT', 'Retired load uops which data sources were data hits in LLC without snoops required.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'MEM_LOAD_UOPS_RETIRED.L1_MISS', 'Retired load uops which data sources following L1 data-cache miss', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 16, 'MEM_LOAD_UOPS_RETIRED.L2_MISS', 'Miss in mid-level (L2) cache. Excludes Unknown data-source.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 32, 'MEM_LOAD_UOPS_RETIRED.LLC_MISS', 'Miss in last-level (L3) cache. Excludes Unknown data-source.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 64, 'MEM_LOAD_UOPS_RETIRED.HIT_LFB', 'Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS', 'Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT', 'Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM', 'Retired load uops which data sources were HitM responses from shared LLC.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE', 'Retired load uops which data sources were hits in LLC without snoops required.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 1, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM', 'Retired load uops which data sources missed LLC but serviced from local dram.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 31, 'BACLEARS.ANY', 'Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANS.DEMAND_DATA_RD', 'Demand Data Read requests that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANS.RFO', 'RFO requests that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANS.CODE_RD', 'L2 cache accesses when fetching instructions', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANS.ALL_PF', 'L2 or LLC HW prefetches that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANS.L1D_WB', 'L1D writebacks that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANS.L2_FILL', 'L2 fill requests that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANS.L2_WB', 'L2 writebacks that access L2 cache', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANS.ALL_REQUESTS', 'Transactions accessing L2 pipe', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 1, 'L2_LINES_IN.I', 'L2 cache lines in I state filling L2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S', 'L2 cache lines in S state filling L2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E', 'L2 cache lines in E state filling L2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ALL', 'L2 cache lines filling L2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 1, 'L2_LINES_OUT.DEMAND_CLEAN', 'Clean L2 cache lines evicted by demand', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 2, 'L2_LINES_OUT.DEMAND_DIRTY', 'Dirty L2 cache lines evicted by demand', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 4, 'L2_LINES_OUT.PF_CLEAN', 'Clean L2 cache lines evicted by L2 prefetch', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 8, 'L2_LINES_OUT.PF_DIRTY', 'Dirty L2 cache lines evicted by L2 prefetch', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 10, 'L2_LINES_OUT.DIRTY_ALL', 'Dirty L2 cache lines filling the L2', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC', 'Cycles where at least 1 uop was executed per-thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC', 'Cycles where at least 2 uops were executed per-thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC', 'Cycles where at least 3 uops were executed per-thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC', 'Cycles where at least 4 uops were executed per-thread', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 129, 'DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes an page walk of any page size.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 130, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 132, 'DTLB_LOAD_MISSES.WALK_DURATION', 'Demand load cycles page miss handler (PMH) is busy with this walk.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_END', 'Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.COUNT', 'Number of machine clears (nukes) of any type.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.CYCLES_4_UOPS', 'Cycles 4 Uops delivered by the LSD, but did not come from the decoder', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 1, 'MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM', 'Retired load uops which data sources missed LLC but serviced from local dram.', 'core', 9);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_SWITCHES', 'Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer', 'core', 9);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.THREAD', 'Core cycles when the core is not in halt state.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Reference cycles when the core is not in halt state.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'LD_BLOCKS.STORE_FORWARD', 'loads blocked by overlapping with store buffer that cannot be forwarded', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'LD_BLOCKS.NO_SR', 'The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'MISALIGN_MEM_REF.LOADS', 'Speculative cache line split load uops dispatched to L1 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'MISALIGN_MEM_REF.STORES', 'Speculative cache line split STA uops dispatched to L1 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 1, 'LD_BLOCKS_PARTIAL.ADDRESS_ALIAS', 'False dependencies in MOB due to partial compare on address.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 1, 'DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK', 'Load misses in all DTLB levels that cause page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 2, 'DTLB_LOAD_MISSES.WALK_COMPLETED_4K', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (4K).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 4, 'DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (2M/4M).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 16, 'DTLB_LOAD_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 32, 'DTLB_LOAD_MISSES.STLB_HIT_4K', 'Load misses that miss the DTLB and hit the STLB (4K)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 64, 'DTLB_LOAD_MISSES.STLB_HIT_2M', 'Load misses that miss the DTLB and hit the STLB (2M)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 128, 'DTLB_LOAD_MISSES.PDE_CACHE_MISS', 'DTLB demand load misses with low part of linear-to-physical address translation missed', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (13, 3, 'INT_MISC.RECOVERY_CYCLES', 'Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.ANY', 'Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 16, 'UOPS_ISSUED.FLAGS_MERGE', 'Number of flags-merge uops being allocated. Such uops considered perf sensitive; added by GSR u-arch.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 32, 'UOPS_ISSUED.SLOW_LEA', 'Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 64, 'UOPS_ISSUED.SINGLE_MUL', 'Number of Multiply packed/scalar single precision uops allocated', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (14, 1, 'UOPS_ISSUED.CORE_STALL_CYCLES', 'Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 33, 'L2_RQSTS.DEMAND_DATA_RD_MISS', 'Demand Data Read miss L2, no rejects', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 65, 'L2_RQSTS.DEMAND_DATA_RD_HIT', 'Demand Data Read requests that hit L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 48, 'L2_RQSTS.L2_PF_MISS', 'L2 prefetch requests that miss L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 80, 'L2_RQSTS.L2_PF_HIT', 'L2 prefetch requests that hit L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 225, 'L2_RQSTS.ALL_DEMAND_DATA_RD', 'Demand Data Read requests', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 226, 'L2_RQSTS.ALL_RFO', 'RFO requests to L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 228, 'L2_RQSTS.ALL_CODE_RD', 'L2 code requests', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 248, 'L2_RQSTS.ALL_PF', 'Requests from L2 hardware prefetchers', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 80, 'L2_DEMAND_RQSTS.WB_HIT', 'Not rejected writebacks that hit L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'Core-originated cacheable demand requests missed L3', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'Core-originated cacheable demand requests that refer to L3', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_THREAD_UNHALTED.REF_XCLK', 'Cases when the core is unhalted at 100 Mhz', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING', 'L1D miss oustandings duration in cycles', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (72, 1, 'L1D_PEND_MISS.PENDING_CYCLES', 'Cycles with L1D load Misses outstanding.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 1, 'DTLB_STORE_MISSES.MISS_CAUSES_A_WALK', 'Store misses in all DTLB levels that cause page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 2, 'DTLB_STORE_MISSES.WALK_COMPLETED_4K', 'Store miss in all TLB levels causes a page walk that completes. (4K)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 4, 'DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M', 'Store misses in all DTLB levels that cause completed page walks (2M/4M)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 16, 'DTLB_STORE_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 32, 'DTLB_STORE_MISSES.STLB_HIT_4K', 'Store misses that miss the DTLB and hit the STLB (4K)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 64, 'DTLB_STORE_MISSES.STLB_HIT_2M', 'Store misses that miss the DTLB and hit the STLB (2M)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 128, 'DTLB_STORE_MISSES.PDE_CACHE_MISS', 'DTLB store misses with low part of linear-to-physical address translation missed', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 1, 'LOAD_HIT_PRE.SW_PF', 'Not software-prefetch load dispatches that hit FB allocated for software prefetch', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (76, 2, 'LOAD_HIT_PRE.HW_PF', 'Not software-prefetch load dispatches that hit FB allocated for hardware prefetch', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (79, 16, 'EPT.WALK_CYCLES', 'Cycle count for an Extended Page table walk.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (81, 1, 'L1D.REPLACEMENT', 'L1D data line replacements', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 1, 'TX_MEM.ABORT_CONFLICT', 'Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 2, 'TX_MEM.ABORT_CAPACITY_WRITE', 'Number of times a transactional abort was signaled due to a data capacity limitation for transactional writes.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 4, 'TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK', 'Number of times a HLE transactional region aborted due to a non XRELEASE prefixed instruction writing to an elided lock in the elision buffer', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 8, 'TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY', 'Number of times an HLE transactional execution aborted due to NoAllocatedElisionBuffer being non-zero.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 16, 'TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH', 'Number of times an HLE transactional execution aborted due to XRELEASE lock not satisfying the address and value requirements in the elision buffer', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 32, 'TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT', 'Number of times an HLE transactional execution aborted due to an unsupported read alignment from the elision buffer.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (84, 64, 'TX_MEM.HLE_ELISION_BUFFER_FULL', 'Number of times HLE lock could not be elided due to ElisionBufferAvailable being zero.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 1, 'MOVE_ELIMINATION.INT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were eliminated.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 2, 'MOVE_ELIMINATION.SIMD_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were eliminated.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 4, 'MOVE_ELIMINATION.INT_NOT_ELIMINATED', 'Number of integer Move Elimination candidate uops that were not eliminated.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (88, 8, 'MOVE_ELIMINATION.SIMD_NOT_ELIMINATED', 'Number of SIMD Move Elimination candidate uops that were not eliminated.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0', 'Unhalted core cycles when the thread is in ring 0', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 2, 'CPL_CYCLES.RING123', 'Unhalted core cycles when thread is in rings 1, 2, or 3', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (92, 1, 'CPL_CYCLES.RING0_TRANS', 'Number of intervals between processor halts while thread is in ring 0', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (93, 1, 'TX_EXEC.MISC1', 'Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (93, 2, 'TX_EXEC.MISC2', 'Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (93, 4, 'TX_EXEC.MISC3', 'Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (93, 8, 'TX_EXEC.MISC4', 'Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (93, 16, 'TX_EXEC.MISC5', 'Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_CYCLES', 'Cycles when Reservation Station (RS) is empty for the thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD', 'Offcore outstanding Demand Data Read transactions in uncore queue.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 2, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD', 'Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 4, 'OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO', 'Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD', 'Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 1, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD', 'Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 8, 'OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD', 'Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 1, 'LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION', 'Cycles when L1 and L2 are locked due to UC or split lock', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 2, 'LOCK_CYCLES.CACHE_LOCK_DURATION', 'Cycles when L1D is locked', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 2, 'IDQ.EMPTY', 'Instruction Decode Queue (IDQ) empty cycles', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_UOPS', 'Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 32, 'IDQ.MS_MITE_UOPS', 'Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 4, 'IDQ.MITE_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 8, 'IDQ.DSB_CYCLES', 'Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_CYCLES', 'Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 16, 'IDQ.MS_DSB_OCCUR', 'Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_4_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering 4 Uops', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 24, 'IDQ.ALL_DSB_CYCLES_ANY_UOPS', 'Cycles Decode Stream Buffer (DSB) is delivering any Uop', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_4_UOPS', 'Cycles MITE is delivering 4 Uops', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 36, 'IDQ.ALL_MITE_CYCLES_ANY_UOPS', 'Cycles MITE is delivering any Uop', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 60, 'IDQ.MITE_ALL_UOPS', 'Uops delivered to Instruction Decode Queue (IDQ) from MITE path', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Number of Instruction Cache, Streaming Buffer and Victim Cache Misses. Includes Uncacheable accesses.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 4, 'ICACHE.IFETCH_STALL', 'Cycles where a code-fetch stalled due to L1 instruction-cache miss or an iTLB miss', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 1, 'ITLB_MISSES.MISS_CAUSES_A_WALK', 'Misses at all ITLB levels that cause page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 2, 'ITLB_MISSES.WALK_COMPLETED_4K', 'Code miss in all TLB levels causes a page walk that completes. (4K)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 4, 'ITLB_MISSES.WALK_COMPLETED_2M_4M', 'Code miss in all TLB levels causes a page walk that completes. (2M/4M)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 16, 'ITLB_MISSES.WALK_DURATION', 'Cycles when PMH is busy with page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 32, 'ITLB_MISSES.STLB_HIT_4K', 'Core misses that miss the DTLB and hit the STLB (4K)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 64, 'ITLB_MISSES.STLB_HIT_2M', 'Code misses that miss the DTLB and hit the STLB (2M)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'ILD_STALL.LCP', 'Stalls caused by changing prefix length of the instruction.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 4, 'ILD_STALL.IQ_FULL', 'Stall cycles because IQ is full', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_EXEC.NONTAKEN_CONDITIONAL', 'Not taken macro-conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 129, 'BR_INST_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired macro-conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 130, 'BR_INST_EXEC.TAKEN_DIRECT_JUMP', 'Taken speculative and retired macro-conditional branch instructions excluding calls and indirects', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 132, 'BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired indirect branches excluding calls and returns', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 136, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN', 'Taken speculative and retired indirect branches with return mnemonic', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 144, 'BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL', 'Taken speculative and retired direct near calls', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 160, 'BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired indirect calls', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 193, 'BR_INST_EXEC.ALL_CONDITIONAL', 'Speculative and retired macro-conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 194, 'BR_INST_EXEC.ALL_DIRECT_JMP', 'Speculative and retired macro-unconditional branches excluding calls and indirects', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 196, 'BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Speculative and retired indirect branches excluding calls and returns', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 200, 'BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN', 'Speculative and retired indirect return branches.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 208, 'BR_INST_EXEC.ALL_DIRECT_NEAR_CALL', 'Speculative and retired direct near calls', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 255, 'BR_INST_EXEC.ALL_BRANCHES', 'Speculative and retired branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 65, 'BR_MISP_EXEC.NONTAKEN_CONDITIONAL', 'Not taken speculative and retired mispredicted macro conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 129, 'BR_MISP_EXEC.TAKEN_CONDITIONAL', 'Taken speculative and retired mispredicted macro conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 132, 'BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET', 'Taken speculative and retired mispredicted indirect branches excluding calls and returns', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 136, 'BR_MISP_EXEC.TAKEN_RETURN_NEAR', 'Taken speculative and retired mispredicted indirect branches with return mnemonic', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 193, 'BR_MISP_EXEC.ALL_CONDITIONAL', 'Speculative and retired mispredicted macro conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 196, 'BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET', 'Mispredicted indirect branches excluding calls and returns', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 255, 'BR_MISP_EXEC.ALL_BRANCHES', 'Speculative and retired mispredicted macro conditional branches', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CORE', 'Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE', 'Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE', 'Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE', 'Cycles with less than 2 uops delivered by the front end.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE', 'Cycles with less than 3 uops delivered by the front end.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (156, 1, 'IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK', 'Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_EXECUTED_PORT.PORT_0', 'Cycles per thread when uops are executed in port 0', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_EXECUTED_PORT.PORT_1', 'Cycles per thread when uops are executed in port 1', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 4, 'UOPS_EXECUTED_PORT.PORT_2', 'Cycles per thread when uops are executed in port 2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 8, 'UOPS_EXECUTED_PORT.PORT_3', 'Cycles per thread when uops are executed in port 3', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 16, 'UOPS_EXECUTED_PORT.PORT_4', 'Cycles per thread when uops are executed in port 4', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 32, 'UOPS_EXECUTED_PORT.PORT_5', 'Cycles per thread when uops are executed in port 5', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_EXECUTED_PORT.PORT_6', 'Cycles per thread when uops are executed in port 6', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_EXECUTED_PORT.PORT_7', 'Cycles per thread when uops are executed in port 7', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 1, 'RESOURCE_STALLS.ANY', 'Resource-related stall cycles', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 4, 'RESOURCE_STALLS.RS', 'Cycles stalled due to no eligible RS entry available.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 8, 'RESOURCE_STALLS.SB', 'Cycles stalled due to no store buffers available. (not including draining form sync).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (162, 16, 'RESOURCE_STALLS.ROB', 'Cycles stalled due to re-order buffer full.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 1, 'CYCLE_ACTIVITY.CYCLES_L2_PENDING', 'Cycles with pending L2 cache miss loads.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 8, 'CYCLE_ACTIVITY.CYCLES_L1D_PENDING', 'Cycles with pending L1 cache miss loads.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 2, 'CYCLE_ACTIVITY.CYCLES_LDM_PENDING', 'Cycles with pending memory loads.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 4, 'CYCLE_ACTIVITY.CYCLES_NO_EXECUTE', 'Total execution stalls', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 5, 'CYCLE_ACTIVITY.STALLS_L2_PENDING', 'Execution stalls due to L2 cache misses.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 6, 'CYCLE_ACTIVITY.STALLS_LDM_PENDING', 'Execution stalls due to memory subsystem.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (163, 12, 'CYCLE_ACTIVITY.STALLS_L1D_PENDING', 'Execution stalls due to L1 data cache misses', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (168, 1, 'LSD.UOPS', 'Number of Uops delivered by the LSD.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (171, 2, 'DSB2MITE_SWITCHES.PENALTY_CYCLES', 'Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (174, 1, 'ITLB.ITLB_FLUSH', 'Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 1, 'OFFCORE_REQUESTS.DEMAND_DATA_RD', 'Demand Data Read requests sent to uncore', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 2, 'OFFCORE_REQUESTS.DEMAND_CODE_RD', 'Cacheable and noncachaeble code read requests', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 4, 'OFFCORE_REQUESTS.DEMAND_RFO', 'Demand RFO requests including regular RFOs, locks, ItoM', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 8, 'OFFCORE_REQUESTS.ALL_DATA_RD', 'Demand and prefetch data reads', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 2, 'UOPS_EXECUTED.CORE', 'Number of uops executed on the core.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.STALL_CYCLES', 'Counts number of cycles no uops were dispatched to be executed on this thread.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 17, 'PAGE_WALKER_LOADS.DTLB_L1', 'Number of DTLB page walker hits in the L1+FB', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 33, 'PAGE_WALKER_LOADS.ITLB_L1', 'Number of ITLB page walker hits in the L1+FB', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 65, 'PAGE_WALKER_LOADS.EPT_DTLB_L1', 'Counts the number of Extended Page Table walks from the DTLB that hit in the L1 and FB.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 129, 'PAGE_WALKER_LOADS.EPT_ITLB_L1', 'Counts the number of Extended Page Table walks from the ITLB that hit in the L1 and FB.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 18, 'PAGE_WALKER_LOADS.DTLB_L2', 'Number of DTLB page walker hits in the L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 34, 'PAGE_WALKER_LOADS.ITLB_L2', 'Number of ITLB page walker hits in the L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 66, 'PAGE_WALKER_LOADS.EPT_DTLB_L2', 'Counts the number of Extended Page Table walks from the DTLB that hit in the L2.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 130, 'PAGE_WALKER_LOADS.EPT_ITLB_L2', 'Counts the number of Extended Page Table walks from the ITLB that hit in the L2.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 20, 'PAGE_WALKER_LOADS.DTLB_L3', 'Number of DTLB page walker hits in the L3 + XSNP', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 36, 'PAGE_WALKER_LOADS.ITLB_L3', 'Number of ITLB page walker hits in the L3 + XSNP', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 68, 'PAGE_WALKER_LOADS.EPT_DTLB_L3', 'Counts the number of Extended Page Table walks from the DTLB that hit in the L3.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 132, 'PAGE_WALKER_LOADS.EPT_ITLB_L3', 'Counts the number of Extended Page Table walks from the ITLB that hit in the L2.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 24, 'PAGE_WALKER_LOADS.DTLB_MEMORY', 'Number of DTLB page walker hits in Memory', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 72, 'PAGE_WALKER_LOADS.EPT_DTLB_MEMORY', 'Counts the number of Extended Page Table walks from the DTLB that hit in memory.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (188, 136, 'PAGE_WALKER_LOADS.EPT_ITLB_MEMORY', 'Counts the number of Extended Page Table walks from the ITLB that hit in memory.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 1, 'TLB_FLUSH.DTLB_THREAD', 'DTLB flush attempts of the thread-specific entries', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (189, 32, 'TLB_FLUSH.STLB_ANY', 'STLB flush attempts', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Number of instructions retired. General Counter - architectural event', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 1, 'INST_RETIRED.PREC_DIST', 'Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 8, 'OTHER_ASSISTS.AVX_TO_SSE', 'Number of transitions from AVX-256 to legacy SSE when penalty applicable.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 16, 'OTHER_ASSISTS.SSE_TO_AVX', 'Number of transitions from SSE to AVX-256 when penalty applicable.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (193, 64, 'OTHER_ASSISTS.ANY_WB_ASSIST', 'Number of times any microcode assist is invoked by HW upon uop writeback.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.ALL', 'Actually retired uops.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 2, 'UOPS_RETIRED.RETIRE_SLOTS', 'Retirement slots used.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.TOTAL_CYCLES', 'Cycles with less than 10 actually retired uops.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.CORE_STALL_CYCLES', 'Cycles without actually retired uops.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.CYCLES', 'Cycles there was a Nuke. Account for both thread-specific and All Thread Nukes.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Counts the number of machine clears due to memory order conflicts.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.SMC', 'Self-modifying code (SMC) detected.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 32, 'MACHINE_CLEARS.MASKMOV', 'This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.CONDITIONAL', 'Conditional branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL', 'Direct and indirect near call instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'All (macro) branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.NEAR_RETURN', 'Return instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 16, 'BR_INST_RETIRED.NOT_TAKEN', 'Not taken branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 32, 'BR_INST_RETIRED.NEAR_TAKEN', 'Taken branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 64, 'BR_INST_RETIRED.FAR_BRANCH', 'Far branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.ALL_BRANCHES_PEBS', 'All (macro) branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.NEAR_CALL_R3', 'Direct and indirect macro near call instructions retired (captured in ring 3).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 1, 'BR_MISP_RETIRED.CONDITIONAL', 'Mispredicted conditional branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'All mispredicted macro branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 4, 'BR_MISP_RETIRED.ALL_BRANCHES_PEBS', 'Mispredicted macro branch instructions retired.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 1, 'HLE_RETIRED.START', 'Number of times an HLE execution started.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 2, 'HLE_RETIRED.COMMIT', 'Number of times an HLE execution successfully committed', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 4, 'HLE_RETIRED.ABORTED', 'Number of times an HLE execution aborted due to any reasons (multiple categories may count as one).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 8, 'HLE_RETIRED.ABORTED_MISC1', 'Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 16, 'HLE_RETIRED.ABORTED_MISC2', 'Number of times an HLE execution aborted due to uncommon conditions', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 32, 'HLE_RETIRED.ABORTED_MISC3', 'Number of times an HLE execution aborted due to HLE-unfriendly instructions', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 64, 'HLE_RETIRED.ABORTED_MISC4', 'Number of times an HLE execution aborted due to incompatible memory type', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 128, 'HLE_RETIRED.ABORTED_MISC5', 'Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 1, 'RTM_RETIRED.START', 'Number of times an RTM execution started.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 2, 'RTM_RETIRED.COMMIT', 'Number of times an RTM execution successfully committed', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 4, 'RTM_RETIRED.ABORTED', 'Number of times an RTM execution aborted due to any reasons (multiple categories may count as one).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 8, 'RTM_RETIRED.ABORTED_MISC1', 'Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 16, 'RTM_RETIRED.ABORTED_MISC2', 'Number of times an RTM execution aborted due to various memory events (e.g., read/write capacity and conflicts).', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 32, 'RTM_RETIRED.ABORTED_MISC3', 'Number of times an RTM execution aborted due to HLE-unfriendly instructions', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 64, 'RTM_RETIRED.ABORTED_MISC4', 'Number of times an RTM execution aborted due to incompatible memory type', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (201, 128, 'RTM_RETIRED.ABORTED_MISC5', 'Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'FP_ASSIST.X87_OUTPUT', 'Number of X87 assists due to output value.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 4, 'FP_ASSIST.X87_INPUT', 'Number of X87 assists due to input value.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'FP_ASSIST.SIMD_OUTPUT', 'Number of SIMD FP assists due to Output values', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 16, 'FP_ASSIST.SIMD_INPUT', 'Number of SIMD FP assists due to input values', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 30, 'FP_ASSIST.ANY', 'Cycles with any input/output SSE or FP assist', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (204, 32, 'ROB_MISC_EVENTS.LBR_INSERTS', 'Count cases of saving new LBR', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4', 'Loads with latency value being above 4', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8', 'Loads with latency value being above 8', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16', 'Loads with latency value being above 16', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32', 'Loads with latency value being above 32', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64', 'Loads with latency value being above 64', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128', 'Loads with latency value being above 128', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256', 'Loads with latency value being above 256', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512', 'Loads with latency value being above 512', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 17, 'MEM_UOPS_RETIRED.STLB_MISS_LOADS', 'Load uops with true STLB miss retired to architected path.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 18, 'MEM_UOPS_RETIRED.STLB_MISS_STORES', 'Store uops with true STLB miss retired to architected path.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 33, 'MEM_UOPS_RETIRED.LOCK_LOADS', 'Load uops with locked access retired to architected path.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 65, 'MEM_UOPS_RETIRED.SPLIT_LOADS', 'Line-splitted load uops retired to architected path.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 66, 'MEM_UOPS_RETIRED.SPLIT_STORES', 'Line-splitted store uops retired to architected path.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 129, 'MEM_UOPS_RETIRED.ALL_LOADS', 'Load uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (208, 130, 'MEM_UOPS_RETIRED.ALL_STORES', 'Store uops retired to architected path with filter on bits 0 and 1 applied.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 1, 'MEM_LOAD_UOPS_RETIRED.L1_HIT', 'Retired load uops with L1 cache hits as data sources.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 2, 'MEM_LOAD_UOPS_RETIRED.L2_HIT', 'Retired load uops with L2 cache hits as data sources.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 4, 'MEM_LOAD_UOPS_RETIRED.L3_HIT', 'Retired load uops which data sources were data hits in L3 without snoops required.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 8, 'MEM_LOAD_UOPS_RETIRED.L1_MISS', 'Retired load uops misses in L1 cache as data sources.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 16, 'MEM_LOAD_UOPS_RETIRED.L2_MISS', 'Miss in mid-level (L2) cache. Excludes Unknown data-source.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 32, 'MEM_LOAD_UOPS_RETIRED.L3_MISS', 'Miss in last-level (L3) cache. Excludes Unknown data-source.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (209, 64, 'MEM_LOAD_UOPS_RETIRED.HIT_LFB', 'Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 1, 'MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS', 'Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 2, 'MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT', 'Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 4, 'MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM', 'Retired load uops which data sources were HitM responses from shared L3.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (210, 8, 'MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE', 'Retired load uops which data sources were hits in L3 without snoops required.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (211, 1, 'MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM', 'Data from local DRAM either Snoop not needed or Snoop Miss (RspI)', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.THREAD_P', 'Thread cycles when thread is not in halt state', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 1, 'L2_TRANS.DEMAND_DATA_RD', 'Demand Data Read requests that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 2, 'L2_TRANS.RFO', 'RFO requests that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 4, 'L2_TRANS.CODE_RD', 'L2 cache accesses when fetching instructions', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 8, 'L2_TRANS.ALL_PF', 'L2 or L3 HW prefetches that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 16, 'L2_TRANS.L1D_WB', 'L1D writebacks that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 32, 'L2_TRANS.L2_FILL', 'L2 fill requests that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 64, 'L2_TRANS.L2_WB', 'L2 writebacks that access L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (240, 128, 'L2_TRANS.ALL_REQUESTS', 'Transactions accessing L2 pipe', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 1, 'L2_LINES_IN.I', 'L2 cache lines in I state filling L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 2, 'L2_LINES_IN.S', 'L2 cache lines in S state filling L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 4, 'L2_LINES_IN.E', 'L2 cache lines in E state filling L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (241, 7, 'L2_LINES_IN.ALL', 'L2 cache lines filling L2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 5, 'L2_LINES_OUT.DEMAND_CLEAN', 'Clean L2 cache lines evicted by demand', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (242, 6, 'L2_LINES_OUT.DEMAND_DIRTY', 'Dirty L2 cache lines evicted by demand', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 160, 'BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL', 'Taken speculative and retired mispredicted indirect calls', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 1, 'UOPS_EXECUTED_PORT.PORT_0_CORE', 'Cycles per core when uops are exectuted in port 0', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 2, 'UOPS_EXECUTED_PORT.PORT_1_CORE', 'Cycles per core when uops are exectuted in port 1', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 4, 'UOPS_EXECUTED_PORT.PORT_2_CORE', 'Cycles per core when uops are dispatched to port 2', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 8, 'UOPS_EXECUTED_PORT.PORT_3_CORE', 'Cycles per core when uops are dispatched to port 3', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 16, 'UOPS_EXECUTED_PORT.PORT_4_CORE', 'Cycles per core when uops are exectuted in port 4', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 32, 'UOPS_EXECUTED_PORT.PORT_5_CORE', 'Cycles per core when uops are exectuted in port 5', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 64, 'UOPS_EXECUTED_PORT.PORT_6_CORE', 'Cycles per core when uops are exectuted in port 6', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (161, 128, 'UOPS_EXECUTED_PORT.PORT_7_CORE', 'Cycles per core when uops are dispatched to port 7', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 32, 'BR_MISP_RETIRED.NEAR_TAKEN', 'number of near branch instructions retired that were mispredicted and taken.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 14, 'DTLB_LOAD_MISSES.WALK_COMPLETED', 'Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 96, 'DTLB_LOAD_MISSES.STLB_HIT', 'Load operations that miss the first DTLB level but hit the second and do not cause page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 66, 'L2_RQSTS.RFO_HIT', 'RFO requests that hit L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 34, 'L2_RQSTS.RFO_MISS', 'RFO requests that miss L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 68, 'L2_RQSTS.CODE_RD_HIT', 'L2 cache hits when fetching instructions, code reads.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 36, 'L2_RQSTS.CODE_RD_MISS', 'L2 cache misses when fetching instructions', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 39, 'L2_RQSTS.ALL_DEMAND_MISS', 'Demand requests that miss L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 231, 'L2_RQSTS.ALL_DEMAND_REFERENCES', 'Demand requests to L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 63, 'L2_RQSTS.MISS', 'All requests that miss L2 cache', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 255, 'L2_RQSTS.REFERENCES', 'All L2 requests', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 14, 'DTLB_STORE_MISSES.WALK_COMPLETED', 'Store misses in all DTLB levels that cause completed page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (73, 96, 'DTLB_STORE_MISSES.STLB_HIT', 'Store operations that miss the first TLB level but hit the second and do not cause page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 14, 'ITLB_MISSES.WALK_COMPLETED', 'Misses in all ITLB levels that cause completed page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (133, 96, 'ITLB_MISSES.STLB_HIT', 'Operations that miss the first ITLB level but hit the second and do not cause any page walks', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_1_UOPS_EXEC', 'Cycles where at least 1 uop was executed per-thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC', 'Cycles where at least 2 uops were executed per-thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC', 'Cycles where at least 3 uops were executed per-thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 1, 'UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC', 'Cycles where at least 4 uops were executed per-thread', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 31, 'BACLEARS.ANY', 'Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.COUNT', 'Number of machine clears (nukes) of any type.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (94, 1, 'RS_EVENTS.EMPTY_END', 'Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (121, 48, 'IDQ.MS_SWITCHES', 'Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer', 'core', 10);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Instructions retired from execution.', 'core', 10);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ALL_BRANCHES', 'Counts the number of branch instructions retired...', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 126, 'BR_INST_RETIRED.JCC', 'Counts the number of JCC branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 254, 'BR_INST_RETIRED.TAKEN_JCC', 'Counts the number of taken JCC branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 249, 'BR_INST_RETIRED.CALL', 'Counts the number of near CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 253, 'BR_INST_RETIRED.REL_CALL', 'Counts the number of near relative CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 251, 'BR_INST_RETIRED.IND_CALL', 'Counts the number of near indirect CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 247, 'BR_INST_RETIRED.RETURN', 'Counts the number of near RET branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 235, 'BR_INST_RETIRED.NON_RETURN_IND', 'Counts the number of near indirect JMP and near indirect CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 191, 'BR_INST_RETIRED.FAR_BRANCH', 'Counts the number of far branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_MISP_RETIRED.ALL_BRANCHES', 'Counts the number of mispredicted branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 126, 'BR_MISP_RETIRED.JCC', 'Counts the number of mispredicted JCC branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 254, 'BR_MISP_RETIRED.TAKEN_JCC', 'Counts the number of mispredicted taken JCC branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 251, 'BR_MISP_RETIRED.IND_CALL', 'Counts the number of mispredicted near indirect CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 247, 'BR_MISP_RETIRED.RETURN', 'Counts the number of mispredicted near RET branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 235, 'BR_MISP_RETIRED.NON_RETURN_IND', 'Counts the number of mispredicted near indirect JMP and near indirect CALL branch instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 1, 'UOPS_RETIRED.MS', 'MSROM micro-ops retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 16, 'UOPS_RETIRED.ALL', 'Micro-ops retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 2, 'MACHINE_CLEARS.MEMORY_ORDERING', 'Stalls due to Memory ordering', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 4, 'MACHINE_CLEARS.FP_ASSIST', 'Stalls due to FP assists', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 8, 'MACHINE_CLEARS.ALL', 'Counts all machine clears', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 1, 'NO_ALLOC_CYCLES.ROB_FULL', 'Counts the number of cycles when no uops are allocated and the ROB is full (less than 2 entries available)', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 32, 'NO_ALLOC_CYCLES.RAT_STALL', 'Counts the number of cycles when no uops are allocated and a RATstall is asserted.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 80, 'NO_ALLOC_CYCLES.NOT_DELIVERED', 'Counts the number of cycles when no uops are allocated, the IQ is empty, and no other condition is blocking allocation. The Silvermont implementation for this event is identical to NO_ALLOC_CYCLES.IQ_EMPTY. This is a good approximation for NO_ALLOC_CYCLES.NOT_DELIVERED.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 63, 'NO_ALLOC_CYCLES.ALL', 'Counts the number of cycles when no uops are allocated for any reason.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'RS_FULL_STALL.MEC', 'Counts the number of cycles and allocation pipeline is stalled and is waiting for a free MEC reservation station entry. The cycles should be appropriately counted in case of the cracked ops e.g. In case of a cracked load-op, the load portion is sent to M', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 31, 'RS_FULL_STALL.ALL', 'Counts the number of cycles the Alloc pipeline is stalled when any one of the RSs (IEC, FPC and MEC) is full. This event is a superset of all the individual RS stall event counts.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 1, 'CYCLES_DIV_BUSY.ALL', 'Cycles the divider is busy. Does not imply a stall waiting for the divider.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 1, 'INST_RETIRED.ANY', 'Fixed Counter: Counts the number of instructions retired', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 2, 'CPU_CLK_UNHALTED.CORE', 'Fixed Counter: Counts the number of unhalted core clock cycles', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 3, 'CPU_CLK_UNHALTED.REF_TSC', 'Fixed Counter: Counts the number of unhalted reference clock cycles', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.CORE_P', 'Core cycles when core is not halted', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when core is not halted', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 0, 'L2_REJECT_XQ.ALL', 'Counts the number of request from the L2 that were not accepted into the XQ', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (49, 0, 'CORE_REJECT_L2Q.ALL', 'Counts the number of request that were not accepted into the L2Q because the L2Q is FULL.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'LONGEST_LAT_CACHE.REFERENCE', 'L2 cache requests from this core', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'LONGEST_LAT_CACHE.MISS', 'L2 cache request misses', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'ICACHE.ACCESSES', 'Instruction fetches', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'ICACHE.HIT', 'Instruction fetches from Icache', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Icache miss', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEARS.ALL', 'Counts the number of baclears', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 8, 'BACLEARS.RETURN', 'Counts the number of RETURN baclears', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 16, 'BACLEARS.COND', 'Counts the number of JCC baclears', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (231, 1, 'MS_DECODED.MS_ENTRY', 'Counts the number of times entered into a ucode flow in the FEC. Includes inserted flows due to front-end detected faults or assists. Speculative count.', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 1, 'REHABQ.LD_BLOCK_ST_FORWARD', 'Loads blocked due to store forward restriction', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 2, 'REHABQ.LD_BLOCK_STD_NOTREADY', 'Loads blocked due to store data not ready', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 4, 'REHABQ.ST_SPLITS', 'Store uops that split cache line boundary', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 8, 'REHABQ.LD_SPLITS', 'Load uops that split cache line boundary', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 16, 'REHABQ.LOCK', 'Uops with lock semantics', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 32, 'REHABQ.STA_FULL', 'Store address buffer full', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 64, 'REHABQ.ANY_LD', 'Any reissued load uops', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 128, 'REHABQ.ANY_ST', 'Any reissued store uops', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 1, 'MEM_UOPS_RETIRED.L1_MISS_LOADS', 'Loads missed L1', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 2, 'MEM_UOPS_RETIRED.L2_HIT_LOADS', 'Loads hit L2', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 4, 'MEM_UOPS_RETIRED.L2_MISS_LOADS', 'Loads missed L2', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 8, 'MEM_UOPS_RETIRED.DTLB_MISS_LOADS', 'Loads missed DTLB', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 16, 'MEM_UOPS_RETIRED.UTLB_MISS', 'Loads missed UTLB', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 32, 'MEM_UOPS_RETIRED.HITM', 'Cross core or cross module hitm', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 64, 'MEM_UOPS_RETIRED.ALL_LOADS', 'All Loads', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (4, 128, 'MEM_UOPS_RETIRED.ALL_STORES', 'All Stores', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'PAGE_WALKS.D_SIDE_WALKS', 'D-side page-walks', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 1, 'PAGE_WALKS.D_SIDE_CYCLES', 'Duration of D-side page-walks in core cycles', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'PAGE_WALKS.I_SIDE_WALKS', 'I-side page-walks', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 2, 'PAGE_WALKS.I_SIDE_CYCLES', 'Duration of I-side page-walks in core cycles', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 3, 'PAGE_WALKS.WALKS', 'Total page walks that are completed (I-side and D-side)', 'core', 11);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 3, 'PAGE_WALKS.CYCLES', 'Total cycles for all the page walks. (I-side and D-side)', 'core', 11);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (2, 131, 'STORE_FORWARDS.ANY', 'All store forwards', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (2, 129, 'STORE_FORWARDS.GOOD', 'Good store forwards', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 127, 'REISSUE.ANY', 'Micro-op reissues for any cause', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 255, 'REISSUE.ANY.AR', 'Micro-op reissues for any cause (At Retirement)', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 15, 'MISALIGN_MEM_REF.SPLIT', 'Memory references that cross an 8-byte boundary.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 9, 'MISALIGN_MEM_REF.LD_SPLIT', 'Load splits', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 10, 'MISALIGN_MEM_REF.ST_SPLIT', 'Store splits', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 143, 'MISALIGN_MEM_REF.SPLIT.AR', 'Memory references that cross an 8-byte boundary (At Retirement)', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 137, 'MISALIGN_MEM_REF.LD_SPLIT.AR', 'Load splits (At Retirement)', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 138, 'MISALIGN_MEM_REF.ST_SPLIT.AR', 'Store splits (Ar Retirement)', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 140, 'MISALIGN_MEM_REF.RMW_SPLIT', 'ld-op-st splits', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 151, 'MISALIGN_MEM_REF.BUBBLE', 'Nonzero segbase 1 bubble', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 145, 'MISALIGN_MEM_REF.LD_BUBBLE', 'Nonzero segbase load 1 bubble', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 146, 'MISALIGN_MEM_REF.ST_BUBBLE', 'Nonzero segbase store 1 bubble', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (5, 148, 'MISALIGN_MEM_REF.RMW_BUBBLE', 'Nonzero segbase ld-op-st 1 bubble', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (6, 128, 'SEGMENT_REG_LOADS.ANY', 'Number of segment register loads.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 129, 'PREFETCH.PREFETCHT0', 'Streaming SIMD Extensions (SSE) PrefetchT0 instructions executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 130, 'PREFETCH.PREFETCHT1', 'Streaming SIMD Extensions (SSE) PrefetchT1 instructions executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 132, 'PREFETCH.PREFETCHT2', 'Streaming SIMD Extensions (SSE) PrefetchT2 instructions executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 134, 'PREFETCH.SW_L2', 'Streaming SIMD Extensions (SSE) PrefetchT1 and PrefetchT2 instructions executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 136, 'PREFETCH.PREFETCHNTA', 'Streaming SIMD Extensions (SSE) Prefetch NTA instructions executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 16, 'PREFETCH.HW_PREFETCH', 'L1 hardware prefetch request', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 15, 'PREFETCH.SOFTWARE_PREFETCH', 'Any Software prefetch', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (7, 143, 'PREFETCH.SOFTWARE_PREFETCH.AR', 'Any Software prefetch', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 7, 'DATA_TLB_MISSES.DTLB_MISS', 'Memory accesses that missed the DTLB.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 5, 'DATA_TLB_MISSES.DTLB_MISS_LD', 'DTLB misses due to load operations.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 9, 'DATA_TLB_MISSES.L0_DTLB_MISS_LD', 'L0 DTLB misses due to load operations.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 6, 'DATA_TLB_MISSES.DTLB_MISS_ST', 'DTLB misses due to store operations.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (8, 10, 'DATA_TLB_MISSES.L0_DTLB_MISS_ST', 'L0 DTLB misses due to store operations', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (9, 32, 'DISPATCH_BLOCKED.ANY', 'Memory cluster signals to block micro-op dispatch for any reason', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 3, 'PAGE_WALKS.WALKS', 'Number of page-walks executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 3, 'PAGE_WALKS.CYCLES', 'Duration of page-walks in core cycles', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'PAGE_WALKS.D_SIDE_WALKS', 'Number of D-side only page walks', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 1, 'PAGE_WALKS.D_SIDE_CYCLES', 'Duration of D-side only page walks', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 2, 'PAGE_WALKS.I_SIDE_WALKS', 'Number of I-Side page walks', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (12, 2, 'PAGE_WALKS.I_SIDE_CYCLES', 'Duration of I-Side page walks', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 1, 'X87_COMP_OPS_EXE.ANY.S', 'Floating point computational micro-ops executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 129, 'X87_COMP_OPS_EXE.ANY.AR', 'Floating point computational micro-ops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 2, 'X87_COMP_OPS_EXE.FXCH.S', 'FXCH uops executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (16, 130, 'X87_COMP_OPS_EXE.FXCH.AR', 'FXCH uops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 1, 'FP_ASSIST.S', 'Floating point assists.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (17, 129, 'FP_ASSIST.AR', 'Floating point assists for retired operations.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 1, 'MUL.S', 'Multiply operations executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (18, 129, 'MUL.AR', 'Multiply operations retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 1, 'DIV.S', 'Divide operations executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (19, 129, 'DIV.AR', 'Divide operations retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (20, 1, 'CYCLES_DIV_BUSY', 'Cycles the divider is busy.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (33, 64, 'L2_ADS.SELF', 'Cycles L2 address bus is in use.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (34, 64, 'L2_DBUS_BUSY.SELF', 'Cycles the L2 cache data bus is busy.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (35, 64, 'L2_DBUS_BUSY_RD.SELF', 'Cycles the L2 transfers data to the core.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 112, 'L2_LINES_IN.SELF.ANY', 'L2 cache misses.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 64, 'L2_LINES_IN.SELF.DEMAND', 'L2 cache misses.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (36, 80, 'L2_LINES_IN.SELF.PREFETCH', 'L2 cache misses.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (37, 64, 'L2_M_LINES_IN.SELF', 'L2 cache line modifications.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 112, 'L2_LINES_OUT.SELF.ANY', 'L2 cache lines evicted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 64, 'L2_LINES_OUT.SELF.DEMAND', 'L2 cache lines evicted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (38, 80, 'L2_LINES_OUT.SELF.PREFETCH', 'L2 cache lines evicted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 112, 'L2_M_LINES_OUT.SELF.ANY', 'Modified lines evicted from the L2 cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 64, 'L2_M_LINES_OUT.SELF.DEMAND', 'Modified lines evicted from the L2 cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (39, 80, 'L2_M_LINES_OUT.SELF.PREFETCH', 'Modified lines evicted from the L2 cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 68, 'L2_IFETCH.SELF.E_STATE', 'L2 cacheable instruction fetch requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 65, 'L2_IFETCH.SELF.I_STATE', 'L2 cacheable instruction fetch requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 72, 'L2_IFETCH.SELF.M_STATE', 'L2 cacheable instruction fetch requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 66, 'L2_IFETCH.SELF.S_STATE', 'L2 cacheable instruction fetch requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (40, 79, 'L2_IFETCH.SELF.MESI', 'L2 cacheable instruction fetch requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 116, 'L2_LD.SELF.ANY.E_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 113, 'L2_LD.SELF.ANY.I_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 120, 'L2_LD.SELF.ANY.M_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 114, 'L2_LD.SELF.ANY.S_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 127, 'L2_LD.SELF.ANY.MESI', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 68, 'L2_LD.SELF.DEMAND.E_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 65, 'L2_LD.SELF.DEMAND.I_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 72, 'L2_LD.SELF.DEMAND.M_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 66, 'L2_LD.SELF.DEMAND.S_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 79, 'L2_LD.SELF.DEMAND.MESI', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 84, 'L2_LD.SELF.PREFETCH.E_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 81, 'L2_LD.SELF.PREFETCH.I_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 88, 'L2_LD.SELF.PREFETCH.M_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 82, 'L2_LD.SELF.PREFETCH.S_STATE', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (41, 95, 'L2_LD.SELF.PREFETCH.MESI', 'L2 cache reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (42, 68, 'L2_ST.SELF.E_STATE', 'L2 store requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (42, 65, 'L2_ST.SELF.I_STATE', 'L2 store requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (42, 72, 'L2_ST.SELF.M_STATE', 'L2 store requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (42, 66, 'L2_ST.SELF.S_STATE', 'L2 store requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (42, 79, 'L2_ST.SELF.MESI', 'L2 store requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (43, 68, 'L2_LOCK.SELF.E_STATE', 'L2 locked accesses', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (43, 65, 'L2_LOCK.SELF.I_STATE', 'L2 locked accesses', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (43, 72, 'L2_LOCK.SELF.M_STATE', 'L2 locked accesses', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (43, 66, 'L2_LOCK.SELF.S_STATE', 'L2 locked accesses', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (43, 79, 'L2_LOCK.SELF.MESI', 'L2 locked accesses', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (44, 68, 'L2_DATA_RQSTS.SELF.E_STATE', 'All data requests from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (44, 65, 'L2_DATA_RQSTS.SELF.I_STATE', 'All data requests from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (44, 72, 'L2_DATA_RQSTS.SELF.M_STATE', 'All data requests from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (44, 66, 'L2_DATA_RQSTS.SELF.S_STATE', 'All data requests from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (44, 79, 'L2_DATA_RQSTS.SELF.MESI', 'All data requests from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (45, 68, 'L2_LD_IFETCH.SELF.E_STATE', 'All read requests from L1 instruction and data caches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (45, 65, 'L2_LD_IFETCH.SELF.I_STATE', 'All read requests from L1 instruction and data caches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (45, 72, 'L2_LD_IFETCH.SELF.M_STATE', 'All read requests from L1 instruction and data caches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (45, 66, 'L2_LD_IFETCH.SELF.S_STATE', 'All read requests from L1 instruction and data caches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (45, 79, 'L2_LD_IFETCH.SELF.MESI', 'All read requests from L1 instruction and data caches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 116, 'L2_RQSTS.SELF.ANY.E_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 113, 'L2_RQSTS.SELF.ANY.I_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 120, 'L2_RQSTS.SELF.ANY.M_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 114, 'L2_RQSTS.SELF.ANY.S_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 127, 'L2_RQSTS.SELF.ANY.MESI', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 68, 'L2_RQSTS.SELF.DEMAND.E_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'L2_RQSTS.SELF.DEMAND.I_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 72, 'L2_RQSTS.SELF.DEMAND.M_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 66, 'L2_RQSTS.SELF.DEMAND.S_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'L2_RQSTS.SELF.DEMAND.MESI', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 84, 'L2_RQSTS.SELF.PREFETCH.E_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 81, 'L2_RQSTS.SELF.PREFETCH.I_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 88, 'L2_RQSTS.SELF.PREFETCH.M_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 82, 'L2_RQSTS.SELF.PREFETCH.S_STATE', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 95, 'L2_RQSTS.SELF.PREFETCH.MESI', 'L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 65, 'L2_RQSTS.SELF.DEMAND.I_STATE', 'L2 cache demand requests from this core that missed the L2', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (46, 79, 'L2_RQSTS.SELF.DEMAND.MESI', 'L2 cache demand requests from this core', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 116, 'L2_REJECT_BUSQ.SELF.ANY.E_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 113, 'L2_REJECT_BUSQ.SELF.ANY.I_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 120, 'L2_REJECT_BUSQ.SELF.ANY.M_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 114, 'L2_REJECT_BUSQ.SELF.ANY.S_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 127, 'L2_REJECT_BUSQ.SELF.ANY.MESI', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 68, 'L2_REJECT_BUSQ.SELF.DEMAND.E_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 65, 'L2_REJECT_BUSQ.SELF.DEMAND.I_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 72, 'L2_REJECT_BUSQ.SELF.DEMAND.M_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 66, 'L2_REJECT_BUSQ.SELF.DEMAND.S_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 79, 'L2_REJECT_BUSQ.SELF.DEMAND.MESI', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 84, 'L2_REJECT_BUSQ.SELF.PREFETCH.E_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 81, 'L2_REJECT_BUSQ.SELF.PREFETCH.I_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 88, 'L2_REJECT_BUSQ.SELF.PREFETCH.M_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 82, 'L2_REJECT_BUSQ.SELF.PREFETCH.S_STATE', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (48, 95, 'L2_REJECT_BUSQ.SELF.PREFETCH.MESI', 'Rejected L2 cache requests', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (50, 64, 'L2_NO_REQ.SELF', 'Cycles no L2 cache requests are pending', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (58, 0, 'EIST_TRANS', 'Number of Enhanced Intel SpeedStep(R) Technology (EIST) transitions', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (59, 192, 'THERMAL_TRIP', 'Number of thermal trips', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 0, 'CPU_CLK_UNHALTED.CORE_P', 'Core cycles when core is not halted', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (60, 1, 'CPU_CLK_UNHALTED.BUS', 'Bus cycles when core is not halted', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (10, 0, 'CPU_CLK_UNHALTED.CORE', 'Core cycles when core is not halted', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (10, 0, 'CPU_CLK_UNHALTED.REF', 'Reference cycles when core is not halted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 161, 'L1D_CACHE.LD', 'L1 Cacheable Data Reads', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 162, 'L1D_CACHE.ST', 'L1 Cacheable Data Writes', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 131, 'L1D_CACHE.ALL_REF', 'L1 Data reads and writes', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 163, 'L1D_CACHE.ALL_CACHE_REF', 'L1 Data Cacheable reads and writes', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 8, 'L1D_CACHE.REPL', 'L1 Data line replacements', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 72, 'L1D_CACHE.REPLM', 'Modified cache lines allocated in the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (64, 16, 'L1D_CACHE.EVICT', 'Modified cache lines evicted from the L1 data cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 224, 'BUS_REQUEST_OUTSTANDING.ALL_AGENTS', 'Outstanding cacheable data read bus requests duration.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (96, 64, 'BUS_REQUEST_OUTSTANDING.SELF', 'Outstanding cacheable data read bus requests duration.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (97, 32, 'BUS_BNR_DRV.ALL_AGENTS', 'Number of Bus Not Ready signals asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (97, 0, 'BUS_BNR_DRV.THIS_AGENT', 'Number of Bus Not Ready signals asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (98, 32, 'BUS_DRDY_CLOCKS.ALL_AGENTS', 'Bus cycles when data is sent on the bus.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (98, 0, 'BUS_DRDY_CLOCKS.THIS_AGENT', 'Bus cycles when data is sent on the bus.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 224, 'BUS_LOCK_CLOCKS.ALL_AGENTS', 'Bus cycles when a LOCK signal is asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (99, 64, 'BUS_LOCK_CLOCKS.SELF', 'Bus cycles when a LOCK signal is asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (100, 64, 'BUS_DATA_RCV.SELF', 'Bus cycles while processor receives data.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (101, 224, 'BUS_TRANS_BRD.ALL_AGENTS', 'Burst read bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (101, 64, 'BUS_TRANS_BRD.SELF', 'Burst read bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (102, 224, 'BUS_TRANS_RFO.ALL_AGENTS', 'RFO bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (102, 64, 'BUS_TRANS_RFO.SELF', 'RFO bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (103, 224, 'BUS_TRANS_WB.ALL_AGENTS', 'Explicit writeback bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (103, 64, 'BUS_TRANS_WB.SELF', 'Explicit writeback bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (104, 224, 'BUS_TRANS_IFETCH.ALL_AGENTS', 'Instruction-fetch bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (104, 64, 'BUS_TRANS_IFETCH.SELF', 'Instruction-fetch bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (105, 224, 'BUS_TRANS_INVAL.ALL_AGENTS', 'Invalidate bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (105, 64, 'BUS_TRANS_INVAL.SELF', 'Invalidate bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (106, 224, 'BUS_TRANS_PWR.ALL_AGENTS', 'Partial write bus transaction.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (106, 64, 'BUS_TRANS_PWR.SELF', 'Partial write bus transaction.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (107, 224, 'BUS_TRANS_P.ALL_AGENTS', 'Partial bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (107, 64, 'BUS_TRANS_P.SELF', 'Partial bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 224, 'BUS_TRANS_IO.ALL_AGENTS', 'IO bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (108, 64, 'BUS_TRANS_IO.SELF', 'IO bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (109, 224, 'BUS_TRANS_DEF.ALL_AGENTS', 'Deferred bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (109, 64, 'BUS_TRANS_DEF.SELF', 'Deferred bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (110, 224, 'BUS_TRANS_BURST.ALL_AGENTS', 'Burst (full cache-line) bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (110, 64, 'BUS_TRANS_BURST.SELF', 'Burst (full cache-line) bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (111, 224, 'BUS_TRANS_MEM.ALL_AGENTS', 'Memory bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (111, 64, 'BUS_TRANS_MEM.SELF', 'Memory bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (112, 224, 'BUS_TRANS_ANY.ALL_AGENTS', 'All bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (112, 64, 'BUS_TRANS_ANY.SELF', 'All bus transactions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 11, 'EXT_SNOOP.THIS_AGENT.ANY', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 1, 'EXT_SNOOP.THIS_AGENT.CLEAN', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 2, 'EXT_SNOOP.THIS_AGENT.HIT', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 8, 'EXT_SNOOP.THIS_AGENT.HITM', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 43, 'EXT_SNOOP.ALL_AGENTS.ANY', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 33, 'EXT_SNOOP.ALL_AGENTS.CLEAN', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 34, 'EXT_SNOOP.ALL_AGENTS.HIT', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (119, 40, 'EXT_SNOOP.ALL_AGENTS.HITM', 'External snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (122, 32, 'BUS_HIT_DRV.ALL_AGENTS', 'HIT signal asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (122, 0, 'BUS_HIT_DRV.THIS_AGENT', 'HIT signal asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (123, 32, 'BUS_HITM_DRV.ALL_AGENTS', 'HITM signal asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (123, 0, 'BUS_HITM_DRV.THIS_AGENT', 'HITM signal asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (125, 64, 'BUSQ_EMPTY.SELF', 'Bus queue is empty.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (126, 224, 'SNOOP_STALL_DRV.ALL_AGENTS', 'Bus stalled for snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (126, 64, 'SNOOP_STALL_DRV.SELF', 'Bus stalled for snoops.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (127, 64, 'BUS_IO_WAIT.SELF', 'IO requests waiting in the bus queue.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 3, 'ICACHE.ACCESSES', 'Instruction fetches.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 1, 'ICACHE.HIT', 'Icache hit', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (128, 2, 'ICACHE.MISSES', 'Icache miss', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 1, 'ITLB.HIT', 'ITLB hits.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 4, 'ITLB.FLUSH', 'ITLB flushes.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (130, 2, 'ITLB.MISSES', 'ITLB misses.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (134, 1, 'CYCLES_ICACHE_MEM_STALLED.ICACHE_MEM_STALLED', 'Cycles during which instruction fetches are stalled.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 1, 'DECODE_STALL.PFB_EMPTY', 'Decode stall due to PFB empty', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (135, 2, 'DECODE_STALL.IQ_FULL', 'Decode stall due to IQ full', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 1, 'BR_INST_TYPE_RETIRED.COND', 'All macro conditional branch instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 2, 'BR_INST_TYPE_RETIRED.UNCOND', 'All macro unconditional branch instructions, excluding calls and indirects', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 4, 'BR_INST_TYPE_RETIRED.IND', 'All indirect branches that are not calls.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 8, 'BR_INST_TYPE_RETIRED.RET', 'All indirect branches that have a return mnemonic', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 16, 'BR_INST_TYPE_RETIRED.DIR_CALL', 'All non-indirect calls', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 32, 'BR_INST_TYPE_RETIRED.IND_CALL', 'All indirect calls, including both register and memory indirect.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (136, 65, 'BR_INST_TYPE_RETIRED.COND_TAKEN', 'Only taken macro conditional branch instructions', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 1, 'BR_MISSP_TYPE_RETIRED.COND', 'Mispredicted cond branch instructions retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 2, 'BR_MISSP_TYPE_RETIRED.IND', 'Mispredicted ind branches that are not calls', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 4, 'BR_MISSP_TYPE_RETIRED.RETURN', 'Mispredicted return branches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 8, 'BR_MISSP_TYPE_RETIRED.IND_CALL', 'Mispredicted indirect calls, including both register and memory indirect.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (137, 17, 'BR_MISSP_TYPE_RETIRED.COND_TAKEN', 'Mispredicted and taken cond branch instructions retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (170, 1, 'MACRO_INSTS.NON_CISC_DECODED', 'Non-CISC nacro instructions decoded', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (170, 2, 'MACRO_INSTS.CISC_DECODED', 'CISC macro instructions decoded', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (170, 3, 'MACRO_INSTS.ALL_DECODED', 'All Instructions decoded', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 0, 'SIMD_UOPS_EXEC.S', 'SIMD micro-ops executed (excluding stores).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (176, 128, 'SIMD_UOPS_EXEC.AR', 'SIMD micro-ops retired (excluding stores).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 0, 'SIMD_SAT_UOP_EXEC.S', 'SIMD saturated arithmetic micro-ops executed.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (177, 128, 'SIMD_SAT_UOP_EXEC.AR', 'SIMD saturated arithmetic micro-ops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 1, 'SIMD_UOP_TYPE_EXEC.MUL.S', 'SIMD packed multiply micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 129, 'SIMD_UOP_TYPE_EXEC.MUL.AR', 'SIMD packed multiply micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 2, 'SIMD_UOP_TYPE_EXEC.SHIFT.S', 'SIMD packed shift micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 130, 'SIMD_UOP_TYPE_EXEC.SHIFT.AR', 'SIMD packed shift micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 4, 'SIMD_UOP_TYPE_EXEC.PACK.S', 'SIMD packed micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 132, 'SIMD_UOP_TYPE_EXEC.PACK.AR', 'SIMD packed micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 8, 'SIMD_UOP_TYPE_EXEC.UNPACK.S', 'SIMD unpacked micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 136, 'SIMD_UOP_TYPE_EXEC.UNPACK.AR', 'SIMD unpacked micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 16, 'SIMD_UOP_TYPE_EXEC.LOGICAL.S', 'SIMD packed logical micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 144, 'SIMD_UOP_TYPE_EXEC.LOGICAL.AR', 'SIMD packed logical micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 32, 'SIMD_UOP_TYPE_EXEC.ARITHMETIC.S', 'SIMD packed arithmetic micro-ops executed', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (179, 160, 'SIMD_UOP_TYPE_EXEC.ARITHMETIC.AR', 'SIMD packed arithmetic micro-ops retired', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (192, 0, 'INST_RETIRED.ANY_P', 'Instructions retired (precise event).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (10, 0, 'INST_RETIRED.ANY', 'Instructions retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 16, 'UOPS_RETIRED.ANY', 'Micro-ops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 16, 'UOPS_RETIRED.STALLED_CYCLES', 'Cycles no micro-ops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (194, 16, 'UOPS_RETIRED.STALLS', 'Periods no micro-ops retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (169, 1, 'UOPS.MS_CYCLES', 'This event counts the cycles where 1 or more uops are issued by the micro-sequencer (MS), including microcode assists and inserted flows, and written to the IQ.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (195, 1, 'MACHINE_CLEARS.SMC', 'Self-Modifying Code detected.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 0, 'BR_INST_RETIRED.ANY', 'Retired branch instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 1, 'BR_INST_RETIRED.PRED_NOT_TAKEN', 'Retired branch instructions that were predicted not-taken.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 2, 'BR_INST_RETIRED.MISPRED_NOT_TAKEN', 'Retired branch instructions that were mispredicted not-taken.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 4, 'BR_INST_RETIRED.PRED_TAKEN', 'Retired branch instructions that were predicted taken.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 8, 'BR_INST_RETIRED.MISPRED_TAKEN', 'Retired branch instructions that were mispredicted taken.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 12, 'BR_INST_RETIRED.TAKEN', 'Retired taken branch instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (196, 15, 'BR_INST_RETIRED.ANY1', 'Retired branch instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (197, 0, 'BR_INST_RETIRED.MISPRED', 'Retired mispredicted branch instructions (precise event).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (198, 1, 'CYCLES_INT_MASKED.CYCLES_INT_MASKED', 'Cycles during which interrupts are disabled.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (198, 2, 'CYCLES_INT_MASKED.CYCLES_INT_PENDING_AND_MASKED', 'Cycles during which interrupts are pending and disabled.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 1, 'SIMD_INST_RETIRED.PACKED_SINGLE', 'Retired Streaming SIMD Extensions (SSE) packed-single instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 2, 'SIMD_INST_RETIRED.SCALAR_SINGLE', 'Retired Streaming SIMD Extensions (SSE) scalar-single instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 8, 'SIMD_INST_RETIRED.SCALAR_DOUBLE', 'Retired Streaming SIMD Extensions 2 (SSE2) scalar-double instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (199, 16, 'SIMD_INST_RETIRED.VECTOR', 'Retired Streaming SIMD Extensions 2 (SSE2) vector instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (200, 0, 'HW_INT_RCV', 'Hardware interrupts received.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 1, 'SIMD_COMP_INST_RETIRED.PACKED_SINGLE', 'Retired computational Streaming SIMD Extensions (SSE) packed-single instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 2, 'SIMD_COMP_INST_RETIRED.SCALAR_SINGLE', 'Retired computational Streaming SIMD Extensions (SSE) scalar-single instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (202, 8, 'SIMD_COMP_INST_RETIRED.SCALAR_DOUBLE', 'Retired computational Streaming SIMD Extensions 2 (SSE2) scalar-double instructions.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 1, 'MEM_LOAD_RETIRED.L2_HIT', 'Retired loads that hit the L2 cache (precise event).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 2, 'MEM_LOAD_RETIRED.L2_MISS', 'Retired loads that miss the L2 cache', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (203, 4, 'MEM_LOAD_RETIRED.DTLB_MISS', 'Retired loads that miss the DTLB (precise event).', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (205, 0, 'SIMD_ASSIST', 'SIMD assists invoked.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (206, 0, 'SIMD_INSTR_RETIRED', 'SIMD Instructions retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (207, 0, 'SIMD_SAT_INSTR_RETIRED', 'Saturated arithmetic instructions retired.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (220, 2, 'RESOURCE_STALLS.DIV_BUSY', 'Cycles issue is stalled due to div busy.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (224, 1, 'BR_INST_DECODED', 'Branch instructions decoded', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (228, 1, 'BOGUS_BR', 'Bogus branches', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (230, 1, 'BACLEARS.ANY', 'BACLEARS asserted.', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 1, 'REISSUE.OVERLAP_STORE', 'Micro-op reissues on a store-load collision', 'core', 12);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (3, 129, 'REISSUE.OVERLAP_STORE.AR', 'Micro-op reissues on a store-load collision (At Retirement)', 'core', 12);

INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'BANK_CONFLICTS', 'Number of actual bank conflicts', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'BRANCHES', 'Number of taken and not taken branches, including: conditional branches, jumps, calls, returns, software interrupts, and interrupt returns', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'BRANCHES_MISPREDICTED', 'Number of branch mispredictions that occurred on BTB hits. BTB misses are not considered branch mispredicts because no prediction exists for them yet.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CODE_CACHE_MISS', 'Number of instruction reads that miss the internal code cache; whether the read is cacheable or noncacheable', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CODE_PAGE_WALK', 'Number of code page walks', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CODE_READ', 'Number of instruction reads; whether the read is cacheable or noncacheable', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'CPU_CLK_UNHALTED', 'Number of cycles during which the processor is not halted.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_CACHE_LINES_WRITTEN_BACK', 'Number of dirty lines (all) that are written back, regardless of the cause', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_PAGE_WALK', 'Number of data page walks', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_READ', 'Number of successful memory data reads committed by the K-unit (L1). Cache accesses resulting from prefetch instructions are included for A0 stepping.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_READ_MISS', 'Number of memory read accesses that miss the internal data cache whether or not the access is cacheable or noncacheable. Cache accesses resulting from prefetch instructions are not included.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_READ_MISS_OR_WRITE_MISS', 'Number of memory read and/or write accesses that miss the internal data cache, whether or not the access is cacheable or noncacheable', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_READ_OR_WRITE', 'Number of memory data reads and/or writes (internal data cache hit and miss combined). Read cache accesses resulting from prefetch instructions are included for A0 stepping.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_WRITE', 'Number of successful memory data writes committed by the K-unit (L1). Streaming stores (hit/miss L1), cacheable write partials, and UC promotions are all included.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'DATA_WRITE_MISS', 'Number of memory write accesses that miss the internal data cache whether or not the access is cacheable. Non-cacheable misses are not included.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'EXEC_STAGE_CYCLES', 'Number of E-stage cycles that were successfully completed. Includes cycles generated by multi-cycle E-stage instructions. For instructions destined for the FPU or VPU pipelines, this event only counts occupancy in the integer E-stage.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'FE_STALLED', 'Number of cycles where the front-end could not advance. Any multi-cycle instructions which delay pipeline advance and apply backpressure to the front-end will be included, e.g. read-modify-write instructions. Includes cycles when the front-end did not have any instructions to issue.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INSTRUCTIONS_EXECUTED', 'Number of instructions executed (up to two per clock)', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'INSTRUCTIONS_EXECUTED_V_PIPE', 'Number of instructions executed in the V_pipe. The event indicates the number of instructions that were paired.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L1_DATA_HIT_INFLIGHT_PF1', 'Number of data requests which hit an in-flight vprefetch0. The in-flight vprefetch0 was not necessarily issued from the same thread as the data request.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L1_DATA_PF1', 'Number of data vprefetch0 requests seen by the L1.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L1_DATA_PF1_DROP', 'Number of data vprefetch0 requests seen by the L1 which were dropped for any reason. A vprefetch0 can be dropped if the requested address matches another in-flight request or if it has a UC memtype.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L1_DATA_PF1_MISS', 'Number of data vprefetch0 requests seen by the L1 which missed L1. Does not include vprefetch1 requests which are counted in L1_DATA_PF1_DROP.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L1_DATA_PF2', 'Number of data vprefetch1 requests seen by the L1. This is not necessarily the same number as seen by the L2 because this count includes requests that are dropped by the core. A vprefetch1 can be dropped by the core if the requested address matches another in-flight request or if it has a UC memtype.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_CODE_READ_MISS_CACHE_FILL', 'Number of code read accesses that missed the L2 cache and were satisfied by another L2 cache. Can include promoted read misses that started as DATA accesses.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_CODE_READ_MISS_MEM_FILL', 'Number of code read accesses that missed the L2 cache and were satisfied by main memory. Can include promoted read misses that started as DATA accesses.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_HIT_INFLIGHT_PF2', 'Number of data requests which hit an in-flight vprefetch1. The in-flight vprefetch1 was not necessarily issued from the same thread as the data request.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_PF1_MISS', 'Number of data vprefetch0 requests seen by the L2 which missed L2.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_PF2', 'Number of data vprefetch1 requests seen by the L2. Only counts vprefetch1 hits on A0 stepping.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_PF2_DROP', 'Number of data vprefetch1 requests seen by the L2 which were dropped for any reason.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_PF2_MISS', 'Number of data vprefetch1 requests seen by the L2 which missed L2. Does not include vprefetch2 requests which are counted in L2_DATA_PF2_DROP.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_READ_MISS_CACHE_FILL', 'Number of data read accesses that missed the L2 cache and were satisfied by another L2 cache. Can include promoted read misses that started as CODE accesses.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_READ_MISS_MEM_FILL', 'Number of data read accesses that missed the L2 cache and were satisfied by main memory. Can include promoted read misses that started as CODE accesses.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_WRITE_MISS_CACHE_FILL', 'Number of data write (RFO) accesses that missed the L2 cache and were satisfied by another L2 cache.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_DATA_WRITE_MISS_MEM_FILL', 'Number of data write (RFO) accesses that missed the L2 cache and were satisfied by main memory.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_READ_HIT_E', 'L2 Read Hit E State, may include prefetches on A0 stepping.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_READ_HIT_M', 'L2 Read Hit M State', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_READ_HIT_S', 'L2 Read Hit S State', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_READ_MISS', 'L2 Read Misses. Prefetch and demand requests to the same address will produce double counting.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_VICTIM_REQ_WITH_DATA', 'L2 received a victim request and responded with data', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'L2_WRITE_HIT', 'L2 Write HIT, may undercount on A0 stepping.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'LONG_CODE_PAGE_WALK', 'Number of long code page walks, i.e. page walks that also missed the L2 uTLB. Subset of DATA_CODE_WALK event', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'LONG_DATA_PAGE_WALK', 'Number of long data page walks, i.e. page walks that also missed the L2 uTLB. Subset of DATA_PAGE_WALK event', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'MEMORY_ACCESSES_IN_BOTH_PIPES', 'Number of data memory reads or writes that are paired in both pipes of the pipeline', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'MICROCODE_CYCLES', 'The number of cycles microcode is executing. While microcode is executing, all other threads are stalled.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'PIPELINE_AGI_STALLS', 'Number of address generation interlock (AGI) stalls. An AGI occurring in both the U- and V- pipelines in the same clock signals this event twice.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'PIPELINE_FLUSHES', 'Number of pipeline flushes that occur. Pipeline flushes are caused by BTB misses on taken branches, mispredictions, exceptions, interrupts, and some segment descriptor loads.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'PIPELINE_SG_AGI_STALLS', 'Number of address generation interlock (AGI) stalls due to vscatter* and vgather* instructions.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'SNP_HITM_BUNIT', 'Snoop HITM in BUNIT', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'SNP_HITM_L2', 'Snoop HITM in L2', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'SNP_HIT_L2', 'Snoop HIT in L2', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_DATA_READ', 'Number of read transactions that were issued. In general each read transaction will read 1 64B cacheline. If there are alignment issues, then reads against multiple cache lines will each be counted individually.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_DATA_READ_MISS', 'VPU L1 data cache readmiss. Counts the number of occurrences.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_DATA_WRITE', 'Number of write transactions that were issued. . In general each write transaction will write 1 64B cacheline. If there are alignment issues, then write against multiple cache lines will each be counted individually.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_DATA_WRITE_MISS', 'VPU L1 data cache write miss. Counts the number of occurrences.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_ELEMENTS_ACTIVE', 'Counts the cumulative number of elements active (via mask) for VPU instructions issued.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_INSTRUCTIONS_EXECUTED', 'Counts the number of VPU instructions executed in both u- and v-pipes.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_INSTRUCTIONS_EXECUTED_V_PIPE', 'Counts the number of VPU instructions that paired and executed in the v-pipe.', 'core', 13);
INSERT INTO arch_event (code, umask, name, description, type, processor_id) VALUES (0, 0, 'VPU_STALL_REG', 'VPU stall on Register Dependency. Counts the number of occurrences. Dependencies will include RAW, WAW, WAR.', 'core', 13);

END TRANSACTION;
